{"componentChunkName":"component---src-pages-blog-strapi-article-slug-tsx","path":"/blog/wsl-hashcat-cuda-acceleration/","result":{"data":{"allStrapiArticle":{"nodes":[{"id":"ef4dcebc-f801-5d1b-a7b3-5b9b7146b154","slug":"wsl-hashcat-cuda-acceleration","title":"WSL Hashcat CUDA acceleration","description":"Guidelines of setup hashcat with CUDA acceleration for WSL.","content":{"data":{"content":"# Introduction\nHashat is a particularly fast, efficient, and versatile hacking tool that assists brute-force attacks by conducting them with hash values of passwords that the tool is guessing or applying.   \nIt really useful for CTF challenge that require to bruteforce something, like cracking password, hash collision attack, etc.   \nI currently using setup of Windows 11 + WSL(Kali) for intermediate level of CTF challenge, it works very well but for WSL you will need some extra config to access GPU (CUDA). This article show you how to use Hashcat in WSL(Kali Linux) with CUDA.   \n\n# Prerequisites\nFirst please check your WSL kernel support CUDA. Only version 5.10.43.3 above support CUDA. If your wsl linux kernel version not meet the requirement, please upgrade it via windows update.   \n```powershell\nwsl cat /proc/version\nLinux version 5.15.133.1-microsoft-standard-WSL2 (root@1c602f52c2e4) (gcc (GCC) 11.2.0, GNU ld (GNU Binutils) 2.37) #1 SMP Thu Oct 5 21:02:42 UTC 2023\n```\n\n## Install CUDA toolkit\nVisit [Nvidia CUDA toolkit download site](https://developer.nvidia.com/cuda-downloads?target_os=Linux&target_arch=x86_64&Distribution=WSL-Ubuntu&target_version=2.0&target_type=runfile_local). Select the followings:   \n![dl-cuda-toolkit.png](https://www.cms.void-dojo.ninja/uploads/dl_cuda_toolkit_8e36cdb637.png)\nThen download and run the installation script:\n```bash\nwget https://developer.download.nvidia.com/compute/cuda/12.3.2/local_installers/cuda_12.3.2_545.23.08_linux.run\nsudo bash cuda_12.3.2_545.23.08_linux.run\n```\nSelect these options:   \n![install-cuda-toolkit-1.png](https://www.cms.void-dojo.ninja/uploads/install_cuda_toolkit_1_c444b18350.png)\n![install-cuda-toolkit-2.png](https://www.cms.void-dojo.ninja/uploads/install_cuda_toolkit_2_df15e977b9.png)\nSetup environment variables:\n```bash\n# edit\nvim ~/.bashrc\n\n# pay attention your cuda toolkit version here, mine is 12.3\nexport PATH=$PATH:/usr/local/cuda-12.3/bin\nexport LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda-12.3/lib64\n\n# make changes effective\n. ~/.bashrc\n```\n# Verification\nYou should see something like this if installation success.\n```bash\nnvcc -V\n\nnvcc: NVIDIA (R) Cuda compiler driver\nCopyright (c) 2005-2023 NVIDIA Corporation\nBuilt on Wed_Nov_22_10:17:15_PST_2023\nCuda compilation tools, release 12.3, V12.3.107\nBuild cuda_12.3.r12.3/compiler.33567101_0\n```\n\n# Test with Hashcat\nUse command option `-d #` to force Hashcat to use CUDA device. You should see Hashcat prompt CUDA device (your Nvidia GPU) and OpenCL device (your CPU) at the beginning, the unused device will be mark as `skipped`. Done! ðŸš€ðŸ˜¼\n```bash\n hashcat -d 1 -a 0 -m 9600 ./msdocxhash /usr/share/seclists/Passwords/Cracked-Hashes/milw0rm-dictionary.txt\nhashcat (v6.2.6) starting\n\n* Device #1: WARNING! Kernel exec timeout is not disabled.\n             This may cause \"CL_OUT_OF_RESOURCES\" or related errors.\n             To disable the timeout, see: https://hashcat.net/q/timeoutpatch\nCUDA API (CUDA 12.3)\n====================\n* Device #1: NVIDIA GeForce RTX 2060 SUPER, 7165/8191 MB, 34MCU\n\nOpenCL API (OpenCL 3.0 PoCL 4.0+debian  Linux, None+Asserts, RELOC, SPIR, LLVM 15.0.7, SLEEF, DISTRO, POCL_DEBUG) - Platform #1 [The pocl project]\n==================================================================================================================================================\n* Device #2: cpu-haswell-AMD Ryzen 7 3700X 8-Core Processor, skipped\n\nMinimum password length supported by kernel: 0\nMaximum password length supported by kernel: 256\n\nHashes: 1 digests; 1 unique digests, 1 unique salts\nBitmaps: 16 bits, 65536 entries, 0x0000ffff mask, 262144 bytes, 5/13 rotates\nRules: 1\n\nOptimizers applied:\n* Zero-Byte\n* Single-Hash\n* Single-Salt\n* Slow-Hash-SIMD-LOOP\n* Uses-64-Bit\n\nWatchdog: Temperature abort trigger set to 90c\n\nHost memory required for this attack: 281 MB\n\nDictionary cache built:\n* Filename..: /usr/share/seclists/Passwords/Cracked-Hashes/milw0rm-dictionary.txt\n* Passwords.: 84195\n* Bytes.....: 675067\n* Keyspace..: 84195\n* Runtime...: 0 secs\n```\n\n## More... FYI?\nHashcat will cache the result in somewhere. So in next run of the same challenge you can use `--show` to show the cached brute force result.   \nIf you want the compare the speed between GPU and CPU, you will need to clear the cache and re-run. To achieve it you can find the cache file, then remove the record, or rename the file with `.bak` suffix:   \n```bash\nsudo find / | grep \"hashcat.potfile\"\n/home/sawa/.local/share/hashcat/hashcat.potfile\n\n# clear cache\nsudo mv /home/sawa/.local/share/hashcat/hashcat.potfile /home/sawa/.local/share/hashcat/hashcat.potfile.bak\n```\n"}},"updatedAt":"2024-02-13T13:17:38.642Z","publishedAt":"2024-02-13T12:10:14.133Z","tags":[{"name":"general","color":"teal"}],"categories":[{"name":"cybersec","color":"red"}],"cover":{"formats":{"thumbnail":{"url":"/uploads/thumbnail_hashcat_thumbnail_1_513cbe89f0.png"},"small":{"url":"/uploads/small_hashcat_thumbnail_1_513cbe89f0.png"}}}}]}},"pageContext":{"id":"ef4dcebc-f801-5d1b-a7b3-5b9b7146b154","slug":"wsl-hashcat-cuda-acceleration","__params":{"slug":"wsl-hashcat-cuda-acceleration"}}},"staticQueryHashes":["3001278788"],"slicesMap":{}}