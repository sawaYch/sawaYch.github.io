{"componentChunkName":"component---src-pages-blog-strapi-article-slug-tsx","path":"/blog/hkcert23-ctf-fake-ground-offer/","result":{"data":{"allStrapiArticle":{"nodes":[{"id":"f3e53acc-bb47-5af2-99e6-a43dc13f3c06","slug":"hkcert23-ctf-fake-ground-offer","title":"HKCERT23 CTF - Fake Ground Offer (250)","description":"https://ctftime.org/event/2122","content":{"data":{"content":"# Challenge\n\n![Screen Shot 2023-12-02 at 22.29.50.png](https://www.cms.void-dojo.ninja/uploads/Screen_Shot_2023_12_02_at_22_29_50_f3cc206564.png)\n\nGiven a PHP site with the following <a href=\"https://www.cms.void-dojo.ninja/uploads/index_php_abdf4cb3bc.txt\"  target=\"_blank\">source code</a>   \nIt is a simple card drawing program, just like what we experience in FGO.   \nHere we can summon 1 or summon 10 each time, and we have total 20 summon tickets.   \nIf we get `UR` / `SSR` card total >= 20, we can sell our account to retrieve the flag by passing GET query parameter `?sellacc`   \n```php\nif(isset($_GET[\"sellacc\"])){\n    if($_SESSION[\"inventory\"][\"UR\"]+$_SESSION[\"inventory\"][\"SSR\"]>=20){\n        exit(\"$flag\");\n    }else{\n        exit('$flag');\n    }\n}\n```\n\n# Bug?\nFirst I figure out that there is a bug, see the code segment below:   \n```php\nif(isset($_GET[\"gacha1\"])){\n    if($_SESSION[\"balance\"] < 1){\n        $gacha_result = \"Insufficient Summon Tickets!\";\n    }else{\n        $_SESSION[\"balance\"] -= 1;\n        $gacha_result = \"You got \".implode(\", \",gacha(1,$seed));\n    }\n}elseif(isset($_GET[\"gacha10\"])){\n    if($_SESSION[\"balance\"] < 1){    // this condition buggy\n        $gacha_result = \"Insufficient Summon Tickets!\";\n    }else{\n        $_SESSION[\"balance\"] -= 10;\n        $gacha_result = \"You got \".implode(\", \",gacha(10,$seed));\n    }\n} \n```\nWhen we run summon 10, the ticket checking condition only check where our tickets > 1 , `if($_SESSION[\"balance\"] < 1)`. So we can summon 29 times actually (10summon + 1summon*9times + 10 summon)  xDDDD\n\nAfter running the program several time, I've found that the bug mention above does not critical to exploit; the SSR & UR rate is quite low even we can draw 29 times.  \n\n# Solve\n## Brute Solve\nUsing python to spent all summon request within very short period (for loop 20, or concurrently also okay), once we can draw 1 SSR / UR, the remaining summon will also be the SSR / UR, so keep repeating this script until we hit any one SSR / UR moment, we will eventually success.  \n```python\nfrom selenium import webdriver\nimport time\n\ndriver = webdriver.Chrome()\n\nwhile True:\n    driver.get(\"http://chal-b.hkcert23.pwnable.hk:28137/\")\n    for i in range(20):\n        driver.get(\"http://chal-b.hkcert23.pwnable.hk:28137/?gacha1=Summon+1\")\n    driver.get(\"http://chal-b.hkcert23.pwnable.hk:28137/?sellacc\")\n    driver.delete_all_cookies()\n    print(driver.page_source)\n    time.sleep(1)\n```\n\nflag: `hkcert23{USSR_stands_for_Union_of_Sov...oh_no_we_cannot_talk_about_that_in_here}`\n\n## More complex analysis\nBrute force works but require more times to tried & error. Check the random process from the source code (i.e. using sin() with time) you may found that it is not uniform distributed. \n```php\n$seed = (time() - $pin) % 3600 + 1;  //cannot use zero as seed\n...\ngacha(10, $seed);\n...\nfunction gacha($n,$s){\n    $out = [];\n\n    for($i=1;$i<=$n;$i++){\n        $x = sin($i*$s);\n        $r = $x-floor($x);\n        $out[] = lookup($r);\n   }\n    return $out;\n}\n```\n\nThe start (closest to zero) & end would take higher probability to occur (see histogram below):   \n![sin-histogram.png](https://www.cms.void-dojo.ninja/uploads/sin_histogram_0ca52490b5.png)\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport time\nimport math\n\nseed = (time.time() % 3600) + 1\n\nout = []\nfor num in range(1, 3601):\n  x = math.sin(num*seed)\n  r = x-math.floor(x)\n  out.append(r)\n\nplt.xlabel(\"Sin\")\nplt.ylabel(\"Count (Total=3600)\")\nplt.hist(out)\nplt.show() \n```\nWe aim to find the time that most occurrence fulfill condition y <= 0.004, set up the equation:\n![fake-grand-offer.png](https://www.cms.void-dojo.ninja/uploads/fake_grand_offer_08345d320f.png)\nYou can found that s=709, y = 0.158561590849, it does not match `y <= 0.004` for summon a SSR / UR, so try again, next step check s=710, the closet `s` (a.k.a seed) is 710 fulfill condition `y <= 0.004`. It implies every 710 second you will get a chance to summon 20 SSR / UR. You may need to sync the server & your machine time.\n\n## Alternative: $pin leak   \nTo find the correct timing to summon SSR / UR, we need to know variable `$pin`, this variable is hide in another `secret.php` so we cannot see directly. To leak the variable `$pin`, we can do the followings:\n1. Given we know the gacha() only accept parameter from 1 - 3601, generate a map of all result for gacha(s) from 1 - 3601 for our local machine\n\n```python\nfrom math import sin, floor\n\ndef lookup(r):\n    if(r <= 0.001):\n        return \"UR\"\n    elif(r <= 0.004):\n        return \"SSR\"\n    elif(r <= 0.009):\n        return \"SR\"\n    elif(r <= 0.016):\n        return \"R\"\n    else:\n        return \"N\"\n        \ndef gacha(n, s):\n    results = []\n    for i in range(1, n+1):\n        x = sin(i*s)\n        r = x - floor(x)\n        results.append(lookup(r))\n    return results\n\n```\n```python\ngacha10 = []\nfor s in range(1, 3601):\n    gacha10.append(gacha(10, s))\n\nfrom pprint import pprint\npprint(gacha10)\n```\n\n2. Do the similar things to server. Take 100 sample for summon 10, record down the summon result list & and the request time that we are using for the summoning. It spent <= 3 minutes to run.\n\n```python\ndef search_gacha10(s):\n    s_lst = s.split(\", \")\n    results = []\n    for (i, lst) in enumerate(gacha10):\n        if lst == s_lst:\n            results.append(i)\n    return results\n\n```\n```python\nimport requests\nfrom bs4 import BeautifulSoup\nfrom time import sleep, time, monotonic\n```\n\n```python\nresults = []\nfor i in range(100):\n    r = requests.get(\"http://localhost:9000/?gacha10=Summon+10\")\n    timenow = time()\n    soup = BeautifulSoup(r.content.decode())\n    query = str(soup.h2)[12:-5]\n    results.append((query, int(timenow) % 3600))\n    sleep(1)\n\n```\n\n \n```python\nsearch_gacha10('UR, UR, UR, UR, UR, UR, UR, UR, SSR, SSR') # time % 3600 in server (that 100 sample) = 2653\n```\n```\n   [1419] # this is the time % 3600 that in our local machine gotcha map\n```\n```python\nsearch_gacha10('N, SR, UR, N, N, N, UR, N, N, N') # time % 3600 in sever (that 100 sample) = 2642\n```\n```\n    [698, 1408, 2118, 2828, 3538] # this is the time % 3600 that in our local machine gotcha map, multiple hit\n```\n3. Find $pin   \n2653 in actual epoch time, 1419 is our local machine epoch time   \nRemember that our local's `time` seed does not add $pin.   \nSo we suppose `$pin = remote_server's time % 3600 - local_server's time % 3600` when the time is synced\nWe pick two data, let say A(local=1409, remote=2642); and B(local=1408, remote=2642)   \n...while A and B must have the exactly same 10 draw summon results   \nIdeally:\n```\nA's remote - A's local == B's remote - B's local == $pin\n\n2653 - 1419 = 1234\n2642 - 1408 = 1234\n$pin = 1234\n```\n\n4. Hence we found the `$pin`, set `$pin`=1234 in our code\n```python\npin = (2653-1419) % 3600\npin\n```\n```\n    1234\n```\n```python\ndef get_gacha10(t):\n    return gacha(10, ((t - pin) % 3600) + 1)\n\ndef get_gacha1(t):\n    return gacha(1, ((t - pin) % 3600) + 1)[0]\n\n```\n\n4. Now we know in what time we can get a SSR / UR. Create the map for those moment\n```python\ngacha_map = []\ngacha_wins = []\nfor t in range(3600):\n    result = get_gacha1(t)\n    if result == \"UR\" or result == \"SSR\":\n        gacha_map.append(True)\n        gacha_wins.append(t)\n    else:\n        gacha_map.append(False)\n```\n\n5. Based on the map created above, do server summon1 request if the current time is exist in the gacha map that have UR / SSR (it return true). Repeat this process until we get 20 gacha. Then sell the flag, done.\n```python\ns = requests.Session()\nwin_count = 0\nsummon1_url = \"http://localhost:9000/?gacha1=Summon+1\"\nwhile win_count < 20:\n    sleep(0.1)\n    curr_time = time()\n    if curr_time % 1 > 0.8:\n        continue\n    secs = int(curr_time) % 3600\n    if gacha_map[secs]:\n        r = s.get(summon1_url)\n        print(\"win obtained!!\")\n        print(r.content)\n        win_count += 1\nprint(r.content)\n```\n```python\nsell_url = \"http://localhost:9000/?sellacc\"\nr = s.get(sell_url)\nr.content\n```\n```\nhkcert23{USSR_stands_for_Union_of_Sov...oh_no_we_cannot_talk_about_that_in_here}\n```\n\n"}},"updatedAt":"2024-02-14T19:03:00.280Z","publishedAt":"2023-12-02T14:17:24.365Z","tags":[{"name":"web","color":"dark"},{"name":"hkcertctf","color":"yellow"}],"categories":[],"cover":{"formats":{"thumbnail":{"url":"/uploads/thumbnail_hkcert23_banner_0e9291d451.png"},"small":null}}}]}},"pageContext":{"id":"f3e53acc-bb47-5af2-99e6-a43dc13f3c06","slug":"hkcert23-ctf-fake-ground-offer","__params":{"slug":"hkcert23-ctf-fake-ground-offer"}}},"staticQueryHashes":["3001278788"],"slicesMap":{}}