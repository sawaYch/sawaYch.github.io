{"componentChunkName":"component---src-pages-blog-strapi-article-slug-tsx","path":"/blog/turborepo-changeset-gh-action/","result":{"data":{"allStrapiArticle":{"nodes":[{"id":"7989651d-598f-5df1-a5d2-4c5da2ad4c1c","slug":"turborepo-changeset-gh-action","title":"Turborepo x Changeset x Github Action","description":"Simplify Project Versioning with Semantic Releases using Changeset in Turborepo","content":{"data":{"content":"# Turborepo x Changeset x GitHub Action\n\n## Introduction\nRecently, I have been working on my first npm-published package [next-yotube-livechat](https://www.npmjs.com/package/next-youtube-livechat) ([github repo](https://github.com/sawaYch/next-youtube-livechat)) - a react hook package work with NextJS to fetch YouTube live stream chat message.  \n[Turborepo](https://turbo.build/repo) is used for the monorepo structure, the whole project consist the followings:\n- a demo web app (NextJS 14)\n- next-youtube-livechat package\n- others packages for project config (e.g. eslint, prettier, typescript)\n\nMonorepo structure is widely used for developing packages. Once Turborepo is well setup, your package will hot reload while source code update, so that developer can debug in testing app (in `/apps/web`) easily. The package are separated, we can publish it via ci workflows, and here we are going to do with GitHub Action. Changeset is another tool will be mention in this article, which provide sematic versioning and changelog recording feature, and it specially provide very good support for Turborepo monorepo.\n\n## Workflow Overview\nLet's introduce the workflow of using Changeset + GitHub Action. Assume you already integrated changeset to Turborepo (with `npx changeset init`).\n1. Let say I have some changes to the package `next-youtube-livechat`. First we update the package source code.\n2. After updated your code, run `npx changeset`. Select the package that you want to bump the version, for example, package `next-youtube-livechat` and select `patch` then enter corresponding bugfix summary. \n![changeset.png](https://www.cms.void-dojo.ninja/uploads/changeset_878a3e6af6.png)\n3. Confirm that the changeset file is added in `/.changeset/*.md`. Once everything okay, you can now commit all the changes and the push the branch to GitHub.\n4. On GitHub, create a Pull Request using the pushed branch.\n![github-action.png](https://www.cms.void-dojo.ninja/uploads/gh_action2_d685784bbd.png)\n6. Maintainers review the changes of Pull Request from Contributor, then approved and merge to main branch.\n7. Once the PR merge to main branch, the GitHub Action detect packages code is modified and it will trigger the Release workflow.\n8. Release workflow will do version bumping for `next-youtube-livechat`, i.e. sematic version update in `package.json`. GitHub Bot then create a new Pull Request contains changelog for all these changing.\n![github-action2.png](https://www.cms.void-dojo.ninja/uploads/gh_action_f3424d5626.png)\n10. When Maintainer confirm everything looks good, merge the package release PR.\n11. Once the package release PR is merged, the same GitHub action triggered. This time the package.json file is changed, or we called it version drift, our changeset action will do changeset publish. Finally the package is published to NPM registry!\n\n## Getting Started with Changesets\nNow that you have a good understand of the workflow, lets explore how you can get started with changeset in project. Here has some special config of changeset that I would like to mention.... since I found that the `npx changeset version` command may not work out of the box by default - 6 April 2024.\n\n### Installation\nAdd changeset cli as dev dependencies to the __project root__ package.json:\n```bash\nnpm i --save-dev @changesets/cli \n```\n\nFor __GitHub release__ + __Changelog record__ support:\n![release](https://www.cms.void-dojo.ninja/uploads/next_youtube_livechat_release1_601608de48.png)\n![changelog](https://www.cms.void-dojo.ninja/uploads/next_youtube_livechat_release2_bb63e9fd47.png)\nIf you need to publish those, also add this package.\n```bash\nnpm i --save-dev @changesets/changelog-github\n```\n\n## Configuration\nInitial changeset in the project root.  \nYou __Only__ need to do it in project root, and __never__ do it within your packages!\n```bash\nnpx changeset init\n```\nThis create the hidden folder `.changeset` where store your changesets file and config (.changeset/config.json).  \n\\\n\\\nModify `config.json`.   \nAdd `@changesets/changelog-github` of json key `changelog` and also your repo name. Please ensure your repo name is in `{userOrOrg}/{repoName}` format which should be same as your github repo! Otherwise the GitHub release part in workflow will cause error and throw exception.  \nAlso beware of `baseBranch`, remind some repo still using `master` branch.\n```json\n{\n  \"$schema\": \"https://unpkg.com/@changesets/config@3.0.0/schema.json\",\n  \"changelog\": [\n    \"@changesets/changelog-github\",\n    { \"repo\": \"sawaYch/next-youtube-livechat\" }\n  ],\n  \"commit\": false,\n  \"fixed\": [],\n  \"linked\": [],\n  \"access\": \"public\",\n  \"baseBranch\": \"main\",\n  \"updateInternalDependencies\": \"patch\",\n  \"ignore\": []\n}\n```\nThe changeset part is done! Rest of the part are leaving to GitHub Action.\n\n## Automation Changeset & Package release with GitHub Action\nWe'll use GitHub Action to achieve automation of pakcage versioning and publishing. Changeset officially provide a action template `changesets/action@v1` for doing this.  \nTo make it works, you need to prepare:\n1. NPM_ACCESS_TOKEN - The npm registry access token, add the token to `Settings` -> `Secrets and Variables` -> `Actions` -> `Repository secrets`. If you have different env like SIT, UAT, PROD, you can use environment secrets and specify `environment: {target_env}` on the aciton step / job\n2.  GITHUB_TOKEN - github access token, no need to generate manually, it automatically include while running the GitHub Action, which mean already done for you, so actually you can simply ignore this.\n\nMore about the GitHub Action script:\n- This script will be triggered __only__ push to main branch __AND__ when is changes on path `packages/next-youtube-livechat/*`. Since `next-youtube-livechat` package is what we are going to release and do version tracking, the demo app in `/apps/web` is not our target to publish to NPM registry. Or even in my case I chose to ignore versioning for the demo app (actually the demo app is just a app for debug testing). Of cause you may adjust it to fit your requirement.\n- Do Lint, Format & Typecheck before release. We need to build the package first otherwise the type file (*.d.ts) is missing which will fail Typecheck step.\n- In `changesets/action@v1` step, remember to add `createGithubReleases: true` to publish package source code to GitHub release section. Also specific `publish` & `version` to run Turborepo task.\n\n\nHere's the YAML configuration for the above described GitHub Actions workflow:\n```yaml\n# trigger only when packages code modified are merged on main branch\nname: Bump version & publish to NPM\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - 'packages/next-youtube-livechat/**'\n  workflow_dispatch: {}\n\njobs:\n  release:\n    name: Release\n    if: ${{ github.repository_owner == 'sawaYch' }}\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write # to create release (changesets/action)\n      issues: write # to post issue comments (changesets/action)\n      pull-requests: write # to create pull request (changesets/action)\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n\n      - name: Setup Node.js 20\n        uses: actions/setup-node@v4\n        with:\n          node-version: 20\n\n      - name: Restore dependencies\n        run: npx ci\n\n      - name: Build the package next-youtube-livechat\n        run: npm run build\n        working-directory: packages/next-youtube-livechat \n\n      - name: Lint check\n        run: npm run lint\n        working-directory: packages/next-youtube-livechat \n\n      - name: Code format check\n        run: npm run format\n        working-directory: packages/next-youtube-livechat \n\n      - name: Typescript check\n        run: npm run typecheck\n        working-directory: packages/next-youtube-livechat \n\n      - name: Create Release Pull Request or Publish to npm\n        uses: changesets/action@v1\n        with:\n          publish: npm run release\n          version: npm run version\n          commit: 'chore: new release'\n          title: 'chore: new release candidate'\n          createGithubReleases: true\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          NPM_TOKEN: ${{ secrets.NPM_ACCESS_TOKEN }}\n```\n\nDon't forget to add the changeset `version` & `release` task to Turborepo:\n\\\n`/package.json`\n```json\n{\n  \"name\": \"next-youtube-livechat-monorepo\",\n  \"private\": true,\n  \"scripts\": {\n    \"build\": \"turbo run build\",\n    \"dev\": \"turbo run dev\",\n    \"lint\": \"turbo run lint\",\n    \"format\": \"turbo run format\",\n    \"format:fix\": \"turbo run format:fix\",\n    \"typecheck\": \"turbo run typecheck\",\n    \"version\": \"npx changeset version\",\n    \"release\": \"npx changeset publish\"\n  },\n  \"devDependencies\": {\n    \"@changesets/changelog-github\": \"^0.5.0\",\n    \"@changesets/cli\": \"^2.27.1\",\n    \"@repo/eslint-config\": \"*\",\n    \"@repo/typescript-config\": \"*\",\n    \"turbo\": \"^1.13.0\"\n  },\n  \"engines\": {\n    \"node\": \">=18\"\n  },\n  \"packageManager\": \"npm@9.6.7\",\n  \"workspaces\": [\n    \"apps/*\",\n    \"packages/*\"\n  ]\n}\n```\n\\\n`/turbo.json`\n```json\n{\n  \"$schema\": \"https://turbo.build/schema.json\",\n  \"globalDependencies\": [\"**/.env.*local\"],\n  \"pipeline\": {\n    \"build\": {\n      \"dependsOn\": [\"^build\"],\n      \"outputs\": [\".next/**\", \"!.next/cache/**\", \"dist/**\"]\n    },\n    \"lint\": {\n      \"dependsOn\": [\"^lint\"]\n    },\n    \"format\": {\n      \"cache\": false,\n      \"dependsOn\": [\"^format\"]\n    },\n    \"format:fix\": {\n      \"cache\": false,\n      \"dependsOn\": [\"^format:fix\"]\n    },\n    \"typecheck\": {\n      \"cache\": false,\n      \"dependsOn\": [\"^typecheck\"]\n    },\n    \"dev\": {\n      \"cache\": false\n    },\n    \"release\": {\n      \"cache\": false\n    },\n    \"version\": {\n      \"cache\": false\n    }\n  }\n}\n```  \n\\\nNow you may test the workflow by following the step on #Workflow Overview.\n\n\n\n## Summary\nChangesets provides an simple and intuitive solution for managing project releases in Turborepo.   \nIn this article, we understand how to integrate changeset release & publish workflow with GitHub Action. It will be really useful for open source project contribution.   \n\nBefore trying Changesets, I had also tried `conventional-changelog` & `semantic-release`. I would say those are not bad, but the main point is that they are not natively support Turborepo really well...   \n\nOne more thing, I consider to improve the workflow by adding `husky` and `commitlint` for standardize changelog format 🚀   \n\nTo checkout more specific configuration, you can reference to my repo [next-youtube-livechat](https://github.com/sawaYch/next-youtube-livechat).   \n\\\nThat's all. Thank you for your reading.    \nHappy publishing! 🥳"}},"updatedAt":"2024-04-06T08:09:42.010Z","publishedAt":"2024-04-05T08:02:42.781Z","tags":[{"name":"dev","color":"orange"},{"name":"dev-ops-sec","color":"pink"}],"categories":[{"name":"dev","color":"blue"}],"cover":{"formats":{"thumbnail":{"url":"/uploads/thumbnail_changset_article_thumbnail_dbd242dfc4.png"},"small":{"url":"/uploads/small_changset_article_thumbnail_dbd242dfc4.png"}}}}]}},"pageContext":{"id":"7989651d-598f-5df1-a5d2-4c5da2ad4c1c","slug":"turborepo-changeset-gh-action","__params":{"slug":"turborepo-changeset-gh-action"}}},"staticQueryHashes":["3001278788"],"slicesMap":{}}