{"componentChunkName":"component---src-pages-blog-strapi-article-slug-tsx","path":"/blog/ios-enterprise-distribution-vs-developer-mode/","result":{"data":{"allStrapiArticle":{"nodes":[{"id":"c4208f8a-a10d-598d-9a17-3d7197bf99c4","slug":"ios-enterprise-distribution-vs-developer-mode","title":"iOS Enterprise Distribution vs Developer Mode","description":"iOS Enterprise Distribution is for In House app deployment usage. Developer Mode is new after iOS 16. These two seems unrelated but these day I suffer these two thing for some reason. Here I am going to illustrate what is happening.","content":{"data":{"content":"# The Story\nRecently I encountered a strange phenomenon regarding iOS deployment when using iOS enterprise distribution, so I am writing to share some findings from this accident to avoid experiencing the same problem again. Notice that when I was writing this article, the latest iOS version is `18.0.1` (Oct 2024). Let's start with the story:\n> My project is a react-native mobile application. The codebase was really old, around 5 years ago (2019)... and still using React class component. For iOS platform, it originally using Ad-Hoc deployment for the company internal usage. Back to the present, one day some of the end user tell me that he cannot launch the app. \n> \n> When it open, it just prompt:\n> \n> \"**{App name} required Developer Mode to run. Until Developer Mode has been enabled this app will not be available for use.**\" \n> \n> ... and keep rejecting user to launch the app. This only happen on high version iOS device (> iOS 16), and iOS 16 device works fine. Unfortunately we couldn't ask our user to turn on 'Developer Mode' by themselves because of security & UX reasons.\n> \n> Maybe there is another deployment strategy is much more appropriate to our case?\n\n## Ad-Hoc Deployment 🔥\nSo, I was just thinking... well, why this deployment strategy not working? It made me remember the original reason of using Ad-Hoc is because we do not want to go through Apple Review process for some reasons. Okay, then Ad-Hoc is good enough for company internal use...(?) Later then I double check the documentation about Ad-hoc distribution, I found that it is designed for deploying the app to some small scale testing groups with known devices. \n- Have to collect end-users device's UUID add to the team provision file before signing up the app\n- Limit 100 devices (for each device type e.g. iOS, AppleTV, macOS, etc)\n- Must enable developer mode to launch the app (>= iOS 16) ✨ NEW ✨\n\nIn the old days, Ad-Hoc might be good for company internal application production deployment, but currently we see Apple try involve Developer Mode to guard us doing this since they think it is not the best practice due to security concern.\n\n## Developer Mode 🛠️\n![enabling-developer-mode-on-a-device-03~dark@2x.png](https://www.cms.void-dojo.ninja/uploads/enabling_developer_mode_on_a_device_03_dark_2x_b216ee49b4.png)\nWe have it on >= iOS 16. I get the point that Apple want to guard us for inappropriate use of Ad-Hoc build, aiming to protect people from inadvertently installing potentially harmful software on their devices, and reduces attack vectors exposed by developer-only functionality. \n\nThe device explicitly asks the person using it to confirm that they’re a developer, aware of the risks of installing development-signed software.\n\n## Enterprise Distribution\n\nintroduce by [Apple](https://developer.apple.com/documentation/xcode/enabling-developer-mode-on-a-device)\n\n## Verify .ipa's singing certificate\n```shell\ncodesign -dvvv ./Payload\\ 2/Smart\\ CS\\ SHL.app/\n```\n\ncheck more information about provision file\n```shell\nsecurity cms -D -i /Users/sawa/Downloads/Payload/Smart\\ CS\\ RSS.app/embedded.mobileprovision > rss-provision\n```\n\n# Wipe old provision files inside iOS device\nWe can use **Apple Configurator** to clear the cached mobile provision files. The requirement are: a Mac with Configurator installed, and a USB wire connect to the target device. Unfortunately, in my case our client not accept doing this manually to end user's device since some of them are using their personal device which have privacy concern.\n\n# Imperfect Solution - Changing Bundle ID\nSince we observe that the mobile provision file installed to iOS device is cached with bundle Id as the key. We can change our bundle Id, so that force the latest mobile provision file install to the device.\nNoted that when we change the bundle Id, we need to care about the followings:\n- Firebase config GoogleServiceInfo.plist need to regenerate\n- Register new bundle Id to Apple Developer Program (Enterprise) using XCode\n- Create mobile provision file for Enterprise Distribution (using Fastlane)\n- Create a new VoIP certificate\n\nreference: [Facing Developer mode issue on iOS 16](https://forums.developer.apple.com/forums/thread/722487)"}},"updatedAt":"2024-10-17T18:58:23.061Z","publishedAt":"2024-10-09T06:41:34.669Z","tags":[{"name":"dev","color":"orange"},{"name":"react-native","color":"pink"},{"name":"iOS","color":"pink"}],"categories":[{"name":"dev","color":"blue"}],"cover":{"formats":{"thumbnail":{"url":"/uploads/thumbnail_apple_developer_a1b72fdd5d.jpeg"},"small":{"url":"/uploads/small_apple_developer_a1b72fdd5d.jpeg"}}}}]}},"pageContext":{"id":"c4208f8a-a10d-598d-9a17-3d7197bf99c4","slug":"ios-enterprise-distribution-vs-developer-mode","__params":{"slug":"ios-enterprise-distribution-vs-developer-mode"}}},"staticQueryHashes":["3001278788"],"slicesMap":{}}