{"componentChunkName":"component---src-pages-blog-strapi-article-slug-tsx","path":"/blog/hkcert23-ctf-st-code-1/","result":{"data":{"allStrapiArticle":{"nodes":[{"id":"e1e449b0-3573-5847-a7ec-7328427f9138","slug":"hkcert23-ctf-st-code-1","title":"HKCERT23 CTF - ST Code I (50)","description":"https://ctftime.org/event/2122","content":{"data":{"content":"# Writeup\n![stcode-1.png](https://www.cms.void-dojo.ninja/uploads/stcode_1_ebb4dd40e2.png)\nST Code I (50) require us to observe a <a href=\"https://www.cms.void-dojo.ninja/uploads/stcode_flag1_62a29c5fd8.svg\" target=\"_blank\">SVG image</a>. We can see the SVG rect attribute contains `rx` value which is `1` or `0`, so it is clear that standing for binary representation of something (properly the flag?).   \n```html\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"256\" height=\"256\">\n  <rect x=\"0\" y=\"0\" width=\"256\" height=\"256\" style=\"fill:#ffffff;shape-rendering:crispEdges;\"/>\n  <rect rx=\"0\" x=\"31.03030303030303\" y=\"31.03030303030303\" width=\"7.757575757575758\" height=\"7.757575757575758\" style=\"fill:#000000;shape-rendering:crispEdges;\"/>\n  <rect rx=\"1\" x=\"38.78787878787879\" y=\"31.03030303030303\" width=\"7.757575757575758\" height=\"7.757575757575758\" style=\"fill:#000000;shape-rendering:crispEdges;\"/>\n  <rect rx=\"1\" x=\"46.54545454545455\" y=\"31.03030303030303\" width=\"7.757575757575758\" height=\"7.757575757575758\" style=\"fill:#000000;shape-rendering:crispEdges;\"/>\n  <rect rx=\"0\" x=\"54.303030303030305\" y=\"31.03030303030303\" width=\"7.757575757575758\" height=\"7.757575757575758\" style=\"fill:#000000;shape-rendering:crispEdges;\"/>\n  <rect rx=\"1\" x=\"62.06060606060606\" y=\"31.03030303030303\" width=\"7.757575757575758\" height=\"7.757575757575758\" style=\"fill:#000000;shape-rendering:crispEdges;\"/>\n  <rect rx=\"0\" x=\"69.81818181818181\" y=\"31.03030303030303\" width=\"7.757575757575758\" height=\"7.757575757575758\" style=\"fill:#000000;shape-rendering:crispEdges;\"/>\n  <rect rx=\"0\" x=\"77.57575757575758\" y=\"31.03030303030303\" width=\"7.757575757575758\" height=\"7.757575757575758\" style=\"fill:#000000;shape-rendering:crispEdges;\"/>\n  <rect rx=\"0\" x=\"93.0909090909091\" y=\"31.03030303030303\" width=\"7.757575757575758\" height=\"7.757575757575758\" style=\"fill:#000000;shape-rendering:crispEdges;\"/>\n  <rect rx=\"0\" x=\"124.12121212121212\" y=\"31.03030303030303\" width=\"7.757575757575758\" height=\"7.757575757575758\" style=\"fill:#000000;shape-rendering:crispEdges;\"/>\n  <rect rx=\"1\" x=\"139.63636363636363\" y=\"31.03030303030303\" width=\"7.757575757575758\" height=\"7.757575757575758\" style=\"fill:#000000;shape-rendering:crispEdges;\"/>\n  <rect rx=\"1\" x=\"155.15151515151516\" y=\"31.03030303030303\" width=\"7.757575757575758\" height=\"7.757575757575758\" style=\"fill:#000000;shape-rendering:crispEdges;\"/>\n  <rect rx=\"0\" x=\"170.66666666666666\" y=\"31.03030303030303\" width=\"7.757575757575758\" height=\"7.757575757575758\" style=\"fill:#000000;shape-rendering:crispEdges;\"/>\n  <rect rx=\"1\" x=\"178.42424242424244\" y=\"31.03030303030303\" width=\"7.757575757575758\" height=\"7.757575757575758\" style=\"fill:#000000;shape-rendering:crispEdges;\"/>\n  <rect rx=\"0\" x=\"186.1818181818182\" y=\"31.03030303030303\" width=\"7.757575757575758\" height=\"7.757575757575758\" style=\"fill:#000000;shape-rendering:crispEdges;\"/>\n  <rect rx=\"1\" x=\"193.93939393939394\" y=\"31.03030303030303\" width=\"7.757575757575758\" height=\"7.757575757575758\" style=\"fill:#000000;shape-rendering:crispEdges;\"/>\n  <rect rx=\"1\" x=\"201.69696969696972\" y=\"31.03030303030303\" width=\"7.757575757575758\" height=\"7.757575757575758\" style=\"fill:#000000;shape-rendering:crispEdges;\"/>\n  <rect rx=\"0\" x=\"209.45454545454547\" y=\"31.03030303030303\" width=\"7.757575757575758\" height=\"7.757575757575758\" style=\"fill:#000000;shape-rendering:crispEdges;\"/>\n  ...\n  ```\n  # Solve\n  We can use JS to process data to decode the flag\n  1. rx is either `1` or `0` binary data, for 8 digit we group and convert it to as ASCII character. e.g. for first 8 digit (see code above) we get `01101000_binary` => `104_decimal` => character `h`\n  2. Use `.reduce(all, current_is_one_or_zero, idx)` to join a map of binary string: `all[0] = ['0', '1', '1', '0', '1', '0', '0', '0']`\n  3. For each of binary string list, do `Doubling Method` convert bin to dec from MSB (start from the left most): Double the previous number and add the current digit.\n  4. Finally convert ASCII code to character, done.\n  ```javascript\n[...document.querySelectorAll(\"svg > rect\")].map((e, i) => e.getAttribute('rx')).filter(e => e).reduce((all, one, i) => {\n    const ch = Math.floor(i / 8);\n    all[ch] = [].concat((all[ch] || []), one); // handle first null case\n    return all\n}, []).map(e => e.reduce((a, b) => a * 2 + parseInt(b), 0)).map(e => String.fromCharCode(e)).join('')\n  ```\n  \n  flag: `hkcert23{ST_ST&s4_STegan0graphy--STeg0}`"}},"updatedAt":"2023-12-03T11:53:12.933Z","publishedAt":"2023-12-03T11:09:50.540Z","tags":[{"name":"misc","color":"indigo"},{"name":"hkcertctf","color":"yellow"}],"categories":[{"name":"ctf","color":"red"}],"cover":{"formats":{"thumbnail":{"url":"/uploads/thumbnail_hkcert23_banner_0e9291d451.png"},"small":null}}}]}},"pageContext":{"id":"e1e449b0-3573-5847-a7ec-7328427f9138","slug":"hkcert23-ctf-st-code-1","__params":{"slug":"hkcert23-ctf-st-code-1"}}},"staticQueryHashes":["3001278788"],"slicesMap":{}}