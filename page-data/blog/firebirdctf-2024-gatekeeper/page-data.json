{"componentChunkName":"component---src-pages-blog-strapi-article-slug-tsx","path":"/blog/firebirdctf-2024-gatekeeper/","result":{"data":{"allStrapiArticle":{"nodes":[{"id":"f491b5f8-8431-59b7-b32b-37c826f05c9b","slug":"firebirdctf-2024-gatekeeper","title":"Firebird CTF 2024 - Gatekeeper (314pts)","description":"https://ash.firebird.sh/challenges","content":{"data":{"content":"# Writeup\nChallenge link (still open till 8 Feb 2024): [Gatekeeper](https://ash.firebird.sh/challenges?id=32)   \n\n## .docx?\nGiven by the challenge we download a `songs.docx` file.   \nA docx file is actually archive file type, hence you can unarchive it (or you can say unzip).    \nAfter unzip it, open `/word/document.xml` have a look. Let's check the comment, it's base64 encode word file binary.    \nIf you does not realize it, you can copy those starting byte and search using google, or convert those base64 to binary (HEX) search for the magic header prefix.   \n![gatekeeper_b64.png](https://www.cms.void-dojo.ninja/uploads/gatekeeper_b64_431c40a5dd.png)\n\n## Convert base64 to BIN\nYou can doing this by using python script. We save the converted file to `decoded.docx`. When you open it, you may find that the file is being protected and require a password to open.   \n```python\ndata = ... (copy from above)\ndocoded = base64.b64decode(data)\nf = open('decoded.docx', 'wb')\nf.write(decoded)\n```\n\n## Crack M$ word protected password\nHere we can use `Hashcat` to crack the password using dictionary attack. All related utilities are included in the Kali Linux.    \nYou can use this via WSL. Noted that WSL also support CUDA accleration. Please see [this article](/blog/wsl-hashcat-cuda-acceleration) for more information.    \n\nHashcat (with CUDA / OpenCL via CPU):\n```bash\n# CUDA\nhashcat -d 1 -a 0 -m 9600 ./msdocxhash /usr/share/seclists/Passwords/Cracked-Hashes/milw0rm-dictionary.txt\n# OpenCL\nhashcat -d 2 -a 0 -m 9600 ./msdocxhash /usr/share/seclists/Passwords/Cracked-Hashes/milw0rm-dictionary.txt\n\nhashcat (v6.2.6) starting\n...\n$office$*2013*100000*256*16*b3893c06576f129ed79a814173a09671*ccdc840f30716ff5e01331b2711ac107*420e8c4f57bc6bbbb71fc04855f81e93466c5abbea2b236e466ffce0eacd603f:love\n\nSession..........: hashcat\nStatus...........: Cracked\nHash.Mode........: 9600 (MS Office 2013)\nHash.Target......: $office$*2013*100000*256*16*b3893c06576f129ed79a814...cd603f\nTime.Started.....: Tue Feb 13 19:04:30 2024 (25 secs)\nTime.Estimated...: Tue Feb 13 19:04:55 2024 (0 secs)\nKernel.Feature...: Pure Kernel\nGuess.Base.......: File (/usr/share/seclists/Passwords/Cracked-Hashes/milw0rm-dictionary.txt)\nGuess.Queue......: 1/1 (100.00%)\nSpeed.#1.........:     3388 H/s (0.35ms) @ Accel:1664 Loops:8 Thr:512 Vec:1\nRecovered........: 1/1 (100.00%) Digests (total), 1/1 (100.00%) Digests (new)\nProgress.........: 84195/84195 (100.00%)\nRejected.........: 0/84195 (0.00%)\nRestore.Point....: 42098/84195 (50.00%)\nRestore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:0-1\nCandidate.Engine.: Device Generator\nCandidates.#1....: flib -> zzzzzzzzzzzzzzz\nHardware.Mon.#1..: Temp: 68c Fan: 53% Util: 99% Core:1935MHz Mem:6801MHz Bus:16\n\nStarted: Tue Feb 13 19:02:56 2024\nStopped: Tue Feb 13 19:04:56 2024\n```\nThe password here we found is `love` ðŸ’–\n\n## Get it\nOpen the docx with passworld `love`, you can see the flag inside!    \n![gatekeeper_flag.png](https://www.cms.void-dojo.ninja/uploads/gatekeeper_flag_facafefbf9.png)\nflag: `firebird{d0_n0t_ga7ek33p_g00d_s7uff_NhzG2Hpbdjk}`\n"}},"updatedAt":"2024-02-14T19:02:34.731Z","publishedAt":"2024-01-25T13:55:54.897Z","tags":[{"name":"forensics","color":"blue"},{"name":"firebirdctf","color":"red"}],"categories":[],"cover":{"formats":{"thumbnail":{"url":"/uploads/thumbnail_firebirdctf_2024_4c8f24745f.png"},"small":null}}}]}},"pageContext":{"id":"f491b5f8-8431-59b7-b32b-37c826f05c9b","slug":"firebirdctf-2024-gatekeeper","__params":{"slug":"firebirdctf-2024-gatekeeper"}}},"staticQueryHashes":["3001278788"],"slicesMap":{}}