{"version":3,"file":"ee8b1517-6c5c448026fdeb1f0f12.js","mappings":"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","sources":["webpack://sawaych.github.io/./node_modules/chart.js/dist/chart.js"],"sourcesContent":["/*!\n * Chart.js v4.4.2\n * https://www.chartjs.org\n * (c) 2024 Chart.js Contributors\n * Released under the MIT License\n */\nimport { r as requestAnimFrame, a as resolve, e as effects, c as color, i as isObject, d as defaults, b as isArray, v as valueOrDefault, u as unlistenArrayEvents, l as listenArrayEvents, f as resolveObjectKey, g as isNumberFinite, h as defined, s as sign, j as createContext, k as isNullOrUndef, _ as _arrayUnique, t as toRadians, m as toPercentage, n as toDimension, T as TAU, o as formatNumber, p as _angleBetween, H as HALF_PI, P as PI, q as _getStartAndCountOfVisiblePoints, w as _scaleRangesChanged, x as isNumber, y as _parseObjectDataRadialScale, z as getRelativePosition, A as _rlookupByKey, B as _lookupByKey, C as _isPointInArea, D as getAngleFromPoint, E as toPadding, F as each, G as getMaximumSize, I as _getParentNode, J as readUsedSize, K as supportsEventListenerOptions, L as throttled, M as _isDomSupported, N as _factorize, O as finiteOrDefault, Q as callback, R as _addGrace, S as _limitValue, U as toDegrees, V as _measureText, W as _int16Range, X as _alignPixel, Y as clipArea, Z as renderText, $ as unclipArea, a0 as toFont, a1 as _toLeftRightCenter, a2 as _alignStartEnd, a3 as overrides, a4 as merge, a5 as _capitalize, a6 as descriptors, a7 as isFunction, a8 as _attachContext, a9 as _createResolver, aa as _descriptors, ab as mergeIf, ac as uid, ad as debounce, ae as retinaScale, af as clearCanvas, ag as setsEqual, ah as _elementsEqual, ai as _isClickEvent, aj as _isBetween, ak as _readValueToProps, al as _updateBezierControlPoints, am as _computeSegments, an as _boundSegments, ao as _steppedInterpolation, ap as _bezierInterpolation, aq as _pointInLine, ar as _steppedLineTo, as as _bezierCurveTo, at as drawPoint, au as addRoundedRectPath, av as toTRBL, aw as toTRBLCorners, ax as _boundSegment, ay as _normalizeAngle, az as getRtlAdapter, aA as overrideTextDirection, aB as _textX, aC as restoreTextDirection, aD as drawPointLegend, aE as distanceBetweenPoints, aF as noop, aG as _setMinAndMaxByKey, aH as niceNum, aI as almostWhole, aJ as almostEquals, aK as _decimalPlaces, aL as Ticks, aM as log10, aN as _longestText, aO as _filterBetween, aP as _lookup } from './chunks/helpers.segment.js';\nimport '@kurkle/color';\n\nclass Animator {\n    constructor(){\n        this._request = null;\n        this._charts = new Map();\n        this._running = false;\n        this._lastDate = undefined;\n    }\n _notify(chart, anims, date, type) {\n        const callbacks = anims.listeners[type];\n        const numSteps = anims.duration;\n        callbacks.forEach((fn)=>fn({\n                chart,\n                initial: anims.initial,\n                numSteps,\n                currentStep: Math.min(date - anims.start, numSteps)\n            }));\n    }\n _refresh() {\n        if (this._request) {\n            return;\n        }\n        this._running = true;\n        this._request = requestAnimFrame.call(window, ()=>{\n            this._update();\n            this._request = null;\n            if (this._running) {\n                this._refresh();\n            }\n        });\n    }\n _update(date = Date.now()) {\n        let remaining = 0;\n        this._charts.forEach((anims, chart)=>{\n            if (!anims.running || !anims.items.length) {\n                return;\n            }\n            const items = anims.items;\n            let i = items.length - 1;\n            let draw = false;\n            let item;\n            for(; i >= 0; --i){\n                item = items[i];\n                if (item._active) {\n                    if (item._total > anims.duration) {\n                        anims.duration = item._total;\n                    }\n                    item.tick(date);\n                    draw = true;\n                } else {\n                    items[i] = items[items.length - 1];\n                    items.pop();\n                }\n            }\n            if (draw) {\n                chart.draw();\n                this._notify(chart, anims, date, 'progress');\n            }\n            if (!items.length) {\n                anims.running = false;\n                this._notify(chart, anims, date, 'complete');\n                anims.initial = false;\n            }\n            remaining += items.length;\n        });\n        this._lastDate = date;\n        if (remaining === 0) {\n            this._running = false;\n        }\n    }\n _getAnims(chart) {\n        const charts = this._charts;\n        let anims = charts.get(chart);\n        if (!anims) {\n            anims = {\n                running: false,\n                initial: true,\n                items: [],\n                listeners: {\n                    complete: [],\n                    progress: []\n                }\n            };\n            charts.set(chart, anims);\n        }\n        return anims;\n    }\n listen(chart, event, cb) {\n        this._getAnims(chart).listeners[event].push(cb);\n    }\n add(chart, items) {\n        if (!items || !items.length) {\n            return;\n        }\n        this._getAnims(chart).items.push(...items);\n    }\n has(chart) {\n        return this._getAnims(chart).items.length > 0;\n    }\n start(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims) {\n            return;\n        }\n        anims.running = true;\n        anims.start = Date.now();\n        anims.duration = anims.items.reduce((acc, cur)=>Math.max(acc, cur._duration), 0);\n        this._refresh();\n    }\n    running(chart) {\n        if (!this._running) {\n            return false;\n        }\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.running || !anims.items.length) {\n            return false;\n        }\n        return true;\n    }\n stop(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.items.length) {\n            return;\n        }\n        const items = anims.items;\n        let i = items.length - 1;\n        for(; i >= 0; --i){\n            items[i].cancel();\n        }\n        anims.items = [];\n        this._notify(chart, anims, Date.now(), 'complete');\n    }\n remove(chart) {\n        return this._charts.delete(chart);\n    }\n}\nvar animator = /* #__PURE__ */ new Animator();\n\nconst transparent = 'transparent';\nconst interpolators = {\n    boolean (from, to, factor) {\n        return factor > 0.5 ? to : from;\n    },\n color (from, to, factor) {\n        const c0 = color(from || transparent);\n        const c1 = c0.valid && color(to || transparent);\n        return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n    },\n    number (from, to, factor) {\n        return from + (to - from) * factor;\n    }\n};\nclass Animation {\n    constructor(cfg, target, prop, to){\n        const currentValue = target[prop];\n        to = resolve([\n            cfg.to,\n            to,\n            currentValue,\n            cfg.from\n        ]);\n        const from = resolve([\n            cfg.from,\n            currentValue,\n            to\n        ]);\n        this._active = true;\n        this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n        this._easing = effects[cfg.easing] || effects.linear;\n        this._start = Math.floor(Date.now() + (cfg.delay || 0));\n        this._duration = this._total = Math.floor(cfg.duration);\n        this._loop = !!cfg.loop;\n        this._target = target;\n        this._prop = prop;\n        this._from = from;\n        this._to = to;\n        this._promises = undefined;\n    }\n    active() {\n        return this._active;\n    }\n    update(cfg, to, date) {\n        if (this._active) {\n            this._notify(false);\n            const currentValue = this._target[this._prop];\n            const elapsed = date - this._start;\n            const remain = this._duration - elapsed;\n            this._start = date;\n            this._duration = Math.floor(Math.max(remain, cfg.duration));\n            this._total += elapsed;\n            this._loop = !!cfg.loop;\n            this._to = resolve([\n                cfg.to,\n                to,\n                currentValue,\n                cfg.from\n            ]);\n            this._from = resolve([\n                cfg.from,\n                currentValue,\n                to\n            ]);\n        }\n    }\n    cancel() {\n        if (this._active) {\n            this.tick(Date.now());\n            this._active = false;\n            this._notify(false);\n        }\n    }\n    tick(date) {\n        const elapsed = date - this._start;\n        const duration = this._duration;\n        const prop = this._prop;\n        const from = this._from;\n        const loop = this._loop;\n        const to = this._to;\n        let factor;\n        this._active = from !== to && (loop || elapsed < duration);\n        if (!this._active) {\n            this._target[prop] = to;\n            this._notify(true);\n            return;\n        }\n        if (elapsed < 0) {\n            this._target[prop] = from;\n            return;\n        }\n        factor = elapsed / duration % 2;\n        factor = loop && factor > 1 ? 2 - factor : factor;\n        factor = this._easing(Math.min(1, Math.max(0, factor)));\n        this._target[prop] = this._fn(from, to, factor);\n    }\n    wait() {\n        const promises = this._promises || (this._promises = []);\n        return new Promise((res, rej)=>{\n            promises.push({\n                res,\n                rej\n            });\n        });\n    }\n    _notify(resolved) {\n        const method = resolved ? 'res' : 'rej';\n        const promises = this._promises || [];\n        for(let i = 0; i < promises.length; i++){\n            promises[i][method]();\n        }\n    }\n}\n\nclass Animations {\n    constructor(chart, config){\n        this._chart = chart;\n        this._properties = new Map();\n        this.configure(config);\n    }\n    configure(config) {\n        if (!isObject(config)) {\n            return;\n        }\n        const animationOptions = Object.keys(defaults.animation);\n        const animatedProps = this._properties;\n        Object.getOwnPropertyNames(config).forEach((key)=>{\n            const cfg = config[key];\n            if (!isObject(cfg)) {\n                return;\n            }\n            const resolved = {};\n            for (const option of animationOptions){\n                resolved[option] = cfg[option];\n            }\n            (isArray(cfg.properties) && cfg.properties || [\n                key\n            ]).forEach((prop)=>{\n                if (prop === key || !animatedProps.has(prop)) {\n                    animatedProps.set(prop, resolved);\n                }\n            });\n        });\n    }\n _animateOptions(target, values) {\n        const newOptions = values.options;\n        const options = resolveTargetOptions(target, newOptions);\n        if (!options) {\n            return [];\n        }\n        const animations = this._createAnimations(options, newOptions);\n        if (newOptions.$shared) {\n            awaitAll(target.options.$animations, newOptions).then(()=>{\n                target.options = newOptions;\n            }, ()=>{\n            });\n        }\n        return animations;\n    }\n _createAnimations(target, values) {\n        const animatedProps = this._properties;\n        const animations = [];\n        const running = target.$animations || (target.$animations = {});\n        const props = Object.keys(values);\n        const date = Date.now();\n        let i;\n        for(i = props.length - 1; i >= 0; --i){\n            const prop = props[i];\n            if (prop.charAt(0) === '$') {\n                continue;\n            }\n            if (prop === 'options') {\n                animations.push(...this._animateOptions(target, values));\n                continue;\n            }\n            const value = values[prop];\n            let animation = running[prop];\n            const cfg = animatedProps.get(prop);\n            if (animation) {\n                if (cfg && animation.active()) {\n                    animation.update(cfg, value, date);\n                    continue;\n                } else {\n                    animation.cancel();\n                }\n            }\n            if (!cfg || !cfg.duration) {\n                target[prop] = value;\n                continue;\n            }\n            running[prop] = animation = new Animation(cfg, target, prop, value);\n            animations.push(animation);\n        }\n        return animations;\n    }\n update(target, values) {\n        if (this._properties.size === 0) {\n            Object.assign(target, values);\n            return;\n        }\n        const animations = this._createAnimations(target, values);\n        if (animations.length) {\n            animator.add(this._chart, animations);\n            return true;\n        }\n    }\n}\nfunction awaitAll(animations, properties) {\n    const running = [];\n    const keys = Object.keys(properties);\n    for(let i = 0; i < keys.length; i++){\n        const anim = animations[keys[i]];\n        if (anim && anim.active()) {\n            running.push(anim.wait());\n        }\n    }\n    return Promise.all(running);\n}\nfunction resolveTargetOptions(target, newOptions) {\n    if (!newOptions) {\n        return;\n    }\n    let options = target.options;\n    if (!options) {\n        target.options = newOptions;\n        return;\n    }\n    if (options.$shared) {\n        target.options = options = Object.assign({}, options, {\n            $shared: false,\n            $animations: {}\n        });\n    }\n    return options;\n}\n\nfunction scaleClip(scale, allowedOverflow) {\n    const opts = scale && scale.options || {};\n    const reverse = opts.reverse;\n    const min = opts.min === undefined ? allowedOverflow : 0;\n    const max = opts.max === undefined ? allowedOverflow : 0;\n    return {\n        start: reverse ? max : min,\n        end: reverse ? min : max\n    };\n}\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n    if (allowedOverflow === false) {\n        return false;\n    }\n    const x = scaleClip(xScale, allowedOverflow);\n    const y = scaleClip(yScale, allowedOverflow);\n    return {\n        top: y.end,\n        right: x.end,\n        bottom: y.start,\n        left: x.start\n    };\n}\nfunction toClip(value) {\n    let t, r, b, l;\n    if (isObject(value)) {\n        t = value.top;\n        r = value.right;\n        b = value.bottom;\n        l = value.left;\n    } else {\n        t = r = b = l = value;\n    }\n    return {\n        top: t,\n        right: r,\n        bottom: b,\n        left: l,\n        disabled: value === false\n    };\n}\nfunction getSortedDatasetIndices(chart, filterVisible) {\n    const keys = [];\n    const metasets = chart._getSortedDatasetMetas(filterVisible);\n    let i, ilen;\n    for(i = 0, ilen = metasets.length; i < ilen; ++i){\n        keys.push(metasets[i].index);\n    }\n    return keys;\n}\nfunction applyStack(stack, value, dsIndex, options = {}) {\n    const keys = stack.keys;\n    const singleMode = options.mode === 'single';\n    let i, ilen, datasetIndex, otherValue;\n    if (value === null) {\n        return;\n    }\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        datasetIndex = +keys[i];\n        if (datasetIndex === dsIndex) {\n            if (options.all) {\n                continue;\n            }\n            break;\n        }\n        otherValue = stack.values[datasetIndex];\n        if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {\n            value += otherValue;\n        }\n    }\n    return value;\n}\nfunction convertObjectDataToArray(data) {\n    const keys = Object.keys(data);\n    const adata = new Array(keys.length);\n    let i, ilen, key;\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        key = keys[i];\n        adata[i] = {\n            x: key,\n            y: data[key]\n        };\n    }\n    return adata;\n}\nfunction isStacked(scale, meta) {\n    const stacked = scale && scale.options.stacked;\n    return stacked || stacked === undefined && meta.stack !== undefined;\n}\nfunction getStackKey(indexScale, valueScale, meta) {\n    return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\nfunction getUserBounds(scale) {\n    const { min , max , minDefined , maxDefined  } = scale.getUserBounds();\n    return {\n        min: minDefined ? min : Number.NEGATIVE_INFINITY,\n        max: maxDefined ? max : Number.POSITIVE_INFINITY\n    };\n}\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n    const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n    return subStack[indexValue] || (subStack[indexValue] = {});\n}\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n    for (const meta of vScale.getMatchingVisibleMetas(type).reverse()){\n        const value = stack[meta.index];\n        if (positive && value > 0 || !positive && value < 0) {\n            return meta.index;\n        }\n    }\n    return null;\n}\nfunction updateStacks(controller, parsed) {\n    const { chart , _cachedMeta: meta  } = controller;\n    const stacks = chart._stacks || (chart._stacks = {});\n    const { iScale , vScale , index: datasetIndex  } = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const key = getStackKey(iScale, vScale, meta);\n    const ilen = parsed.length;\n    let stack;\n    for(let i = 0; i < ilen; ++i){\n        const item = parsed[i];\n        const { [iAxis]: index , [vAxis]: value  } = item;\n        const itemStacks = item._stacks || (item._stacks = {});\n        stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n        stack[datasetIndex] = value;\n        stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n        stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n        const visualValues = stack._visualValues || (stack._visualValues = {});\n        visualValues[datasetIndex] = value;\n    }\n}\nfunction getFirstScaleId(chart, axis) {\n    const scales = chart.scales;\n    return Object.keys(scales).filter((key)=>scales[key].axis === axis).shift();\n}\nfunction createDatasetContext(parent, index) {\n    return createContext(parent, {\n        active: false,\n        dataset: undefined,\n        datasetIndex: index,\n        index,\n        mode: 'default',\n        type: 'dataset'\n    });\n}\nfunction createDataContext(parent, index, element) {\n    return createContext(parent, {\n        active: false,\n        dataIndex: index,\n        parsed: undefined,\n        raw: undefined,\n        element,\n        index,\n        mode: 'default',\n        type: 'data'\n    });\n}\nfunction clearStacks(meta, items) {\n    const datasetIndex = meta.controller.index;\n    const axis = meta.vScale && meta.vScale.axis;\n    if (!axis) {\n        return;\n    }\n    items = items || meta._parsed;\n    for (const parsed of items){\n        const stacks = parsed._stacks;\n        if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n            return;\n        }\n        delete stacks[axis][datasetIndex];\n        if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n            delete stacks[axis]._visualValues[datasetIndex];\n        }\n    }\n}\nconst isDirectUpdateMode = (mode)=>mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared)=>shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart)=>canStack && !meta.hidden && meta._stacked && {\n        keys: getSortedDatasetIndices(chart, true),\n        values: null\n    };\nclass DatasetController {\n static defaults = {};\n static datasetElementType = null;\n static dataElementType = null;\n constructor(chart, datasetIndex){\n        this.chart = chart;\n        this._ctx = chart.ctx;\n        this.index = datasetIndex;\n        this._cachedDataOpts = {};\n        this._cachedMeta = this.getMeta();\n        this._type = this._cachedMeta.type;\n        this.options = undefined;\n         this._parsing = false;\n        this._data = undefined;\n        this._objectData = undefined;\n        this._sharedOptions = undefined;\n        this._drawStart = undefined;\n        this._drawCount = undefined;\n        this.enableOptionSharing = false;\n        this.supportsDecimation = false;\n        this.$context = undefined;\n        this._syncList = [];\n        this.datasetElementType = new.target.datasetElementType;\n        this.dataElementType = new.target.dataElementType;\n        this.initialize();\n    }\n    initialize() {\n        const meta = this._cachedMeta;\n        this.configure();\n        this.linkScales();\n        meta._stacked = isStacked(meta.vScale, meta);\n        this.addElements();\n        if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n            console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n        }\n    }\n    updateIndex(datasetIndex) {\n        if (this.index !== datasetIndex) {\n            clearStacks(this._cachedMeta);\n        }\n        this.index = datasetIndex;\n    }\n    linkScales() {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        const chooseId = (axis, x, y, r)=>axis === 'x' ? x : axis === 'r' ? r : y;\n        const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n        const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n        const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n        const indexAxis = meta.indexAxis;\n        const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n        const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n        meta.xScale = this.getScaleForId(xid);\n        meta.yScale = this.getScaleForId(yid);\n        meta.rScale = this.getScaleForId(rid);\n        meta.iScale = this.getScaleForId(iid);\n        meta.vScale = this.getScaleForId(vid);\n    }\n    getDataset() {\n        return this.chart.data.datasets[this.index];\n    }\n    getMeta() {\n        return this.chart.getDatasetMeta(this.index);\n    }\n getScaleForId(scaleID) {\n        return this.chart.scales[scaleID];\n    }\n _getOtherScale(scale) {\n        const meta = this._cachedMeta;\n        return scale === meta.iScale ? meta.vScale : meta.iScale;\n    }\n    reset() {\n        this._update('reset');\n    }\n _destroy() {\n        const meta = this._cachedMeta;\n        if (this._data) {\n            unlistenArrayEvents(this._data, this);\n        }\n        if (meta._stacked) {\n            clearStacks(meta);\n        }\n    }\n _dataCheck() {\n        const dataset = this.getDataset();\n        const data = dataset.data || (dataset.data = []);\n        const _data = this._data;\n        if (isObject(data)) {\n            this._data = convertObjectDataToArray(data);\n        } else if (_data !== data) {\n            if (_data) {\n                unlistenArrayEvents(_data, this);\n                const meta = this._cachedMeta;\n                clearStacks(meta);\n                meta._parsed = [];\n            }\n            if (data && Object.isExtensible(data)) {\n                listenArrayEvents(data, this);\n            }\n            this._syncList = [];\n            this._data = data;\n        }\n    }\n    addElements() {\n        const meta = this._cachedMeta;\n        this._dataCheck();\n        if (this.datasetElementType) {\n            meta.dataset = new this.datasetElementType();\n        }\n    }\n    buildOrUpdateElements(resetNewElements) {\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        let stackChanged = false;\n        this._dataCheck();\n        const oldStacked = meta._stacked;\n        meta._stacked = isStacked(meta.vScale, meta);\n        if (meta.stack !== dataset.stack) {\n            stackChanged = true;\n            clearStacks(meta);\n            meta.stack = dataset.stack;\n        }\n        this._resyncElements(resetNewElements);\n        if (stackChanged || oldStacked !== meta._stacked) {\n            updateStacks(this, meta._parsed);\n        }\n    }\n configure() {\n        const config = this.chart.config;\n        const scopeKeys = config.datasetScopeKeys(this._type);\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n        this.options = config.createResolver(scopes, this.getContext());\n        this._parsing = this.options.parsing;\n        this._cachedDataOpts = {};\n    }\n parse(start, count) {\n        const { _cachedMeta: meta , _data: data  } = this;\n        const { iScale , _stacked  } = meta;\n        const iAxis = iScale.axis;\n        let sorted = start === 0 && count === data.length ? true : meta._sorted;\n        let prev = start > 0 && meta._parsed[start - 1];\n        let i, cur, parsed;\n        if (this._parsing === false) {\n            meta._parsed = data;\n            meta._sorted = true;\n            parsed = data;\n        } else {\n            if (isArray(data[start])) {\n                parsed = this.parseArrayData(meta, data, start, count);\n            } else if (isObject(data[start])) {\n                parsed = this.parseObjectData(meta, data, start, count);\n            } else {\n                parsed = this.parsePrimitiveData(meta, data, start, count);\n            }\n            const isNotInOrderComparedToPrev = ()=>cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n            for(i = 0; i < count; ++i){\n                meta._parsed[i + start] = cur = parsed[i];\n                if (sorted) {\n                    if (isNotInOrderComparedToPrev()) {\n                        sorted = false;\n                    }\n                    prev = cur;\n                }\n            }\n            meta._sorted = sorted;\n        }\n        if (_stacked) {\n            updateStacks(this, parsed);\n        }\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const labels = iScale.getLabels();\n        const singleScale = iScale === vScale;\n        const parsed = new Array(count);\n        let i, ilen, index;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            parsed[i] = {\n                [iAxis]: singleScale || iScale.parse(labels[index], index),\n                [vAxis]: vScale.parse(data[index], index)\n            };\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(item[0], index),\n                y: yScale.parse(item[1], index)\n            };\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n                y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n            };\n        }\n        return parsed;\n    }\n getParsed(index) {\n        return this._cachedMeta._parsed[index];\n    }\n getDataElement(index) {\n        return this._cachedMeta.data[index];\n    }\n applyStack(scale, parsed, mode) {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const value = parsed[scale.axis];\n        const stack = {\n            keys: getSortedDatasetIndices(chart, true),\n            values: parsed._stacks[scale.axis]._visualValues\n        };\n        return applyStack(stack, value, meta.index, {\n            mode\n        });\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        const parsedValue = parsed[scale.axis];\n        let value = parsedValue === null ? NaN : parsedValue;\n        const values = stack && parsed._stacks[scale.axis];\n        if (stack && values) {\n            stack.values = values;\n            value = applyStack(stack, parsedValue, this._cachedMeta.index);\n        }\n        range.min = Math.min(range.min, value);\n        range.max = Math.max(range.max, value);\n    }\n getMinMax(scale, canStack) {\n        const meta = this._cachedMeta;\n        const _parsed = meta._parsed;\n        const sorted = meta._sorted && scale === meta.iScale;\n        const ilen = _parsed.length;\n        const otherScale = this._getOtherScale(scale);\n        const stack = createStack(canStack, meta, this.chart);\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        const { min: otherMin , max: otherMax  } = getUserBounds(otherScale);\n        let i, parsed;\n        function _skip() {\n            parsed = _parsed[i];\n            const otherValue = parsed[otherScale.axis];\n            return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n        }\n        for(i = 0; i < ilen; ++i){\n            if (_skip()) {\n                continue;\n            }\n            this.updateRangeFromParsed(range, scale, parsed, stack);\n            if (sorted) {\n                break;\n            }\n        }\n        if (sorted) {\n            for(i = ilen - 1; i >= 0; --i){\n                if (_skip()) {\n                    continue;\n                }\n                this.updateRangeFromParsed(range, scale, parsed, stack);\n                break;\n            }\n        }\n        return range;\n    }\n    getAllParsedValues(scale) {\n        const parsed = this._cachedMeta._parsed;\n        const values = [];\n        let i, ilen, value;\n        for(i = 0, ilen = parsed.length; i < ilen; ++i){\n            value = parsed[i][scale.axis];\n            if (isNumberFinite(value)) {\n                values.push(value);\n            }\n        }\n        return values;\n    }\n getMaxOverflow() {\n        return false;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const vScale = meta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n            value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n        };\n    }\n _update(mode) {\n        const meta = this._cachedMeta;\n        this.update(mode || 'default');\n        meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n    }\n update(mode) {}\n    draw() {\n        const ctx = this._ctx;\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const elements = meta.data || [];\n        const area = chart.chartArea;\n        const active = [];\n        const start = this._drawStart || 0;\n        const count = this._drawCount || elements.length - start;\n        const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n        let i;\n        if (meta.dataset) {\n            meta.dataset.draw(ctx, area, start, count);\n        }\n        for(i = start; i < start + count; ++i){\n            const element = elements[i];\n            if (element.hidden) {\n                continue;\n            }\n            if (element.active && drawActiveElementsOnTop) {\n                active.push(element);\n            } else {\n                element.draw(ctx, area);\n            }\n        }\n        for(i = 0; i < active.length; ++i){\n            active[i].draw(ctx, area);\n        }\n    }\n getStyle(index, active) {\n        const mode = active ? 'active' : 'default';\n        return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n    }\n getContext(index, active, mode) {\n        const dataset = this.getDataset();\n        let context;\n        if (index >= 0 && index < this._cachedMeta.data.length) {\n            const element = this._cachedMeta.data[index];\n            context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));\n            context.parsed = this.getParsed(index);\n            context.raw = dataset.data[index];\n            context.index = context.dataIndex = index;\n        } else {\n            context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n            context.dataset = dataset;\n            context.index = context.datasetIndex = this.index;\n        }\n        context.active = !!active;\n        context.mode = mode;\n        return context;\n    }\n resolveDatasetElementOptions(mode) {\n        return this._resolveElementOptions(this.datasetElementType.id, mode);\n    }\n resolveDataElementOptions(index, mode) {\n        return this._resolveElementOptions(this.dataElementType.id, mode, index);\n    }\n _resolveElementOptions(elementType, mode = 'default', index) {\n        const active = mode === 'active';\n        const cache = this._cachedDataOpts;\n        const cacheKey = elementType + '-' + mode;\n        const cached = cache[cacheKey];\n        const sharing = this.enableOptionSharing && defined(index);\n        if (cached) {\n            return cloneIfNotShared(cached, sharing);\n        }\n        const config = this.chart.config;\n        const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n        const prefixes = active ? [\n            `${elementType}Hover`,\n            'hover',\n            elementType,\n            ''\n        ] : [\n            elementType,\n            ''\n        ];\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n        const names = Object.keys(defaults.elements[elementType]);\n        const context = ()=>this.getContext(index, active, mode);\n        const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n        if (values.$shared) {\n            values.$shared = sharing;\n            cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n        }\n        return values;\n    }\n _resolveAnimations(index, transition, active) {\n        const chart = this.chart;\n        const cache = this._cachedDataOpts;\n        const cacheKey = `animation-${transition}`;\n        const cached = cache[cacheKey];\n        if (cached) {\n            return cached;\n        }\n        let options;\n        if (chart.options.animation !== false) {\n            const config = this.chart.config;\n            const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n            const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n            options = config.createResolver(scopes, this.getContext(index, active, transition));\n        }\n        const animations = new Animations(chart, options && options.animations);\n        if (options && options._cacheable) {\n            cache[cacheKey] = Object.freeze(animations);\n        }\n        return animations;\n    }\n getSharedOptions(options) {\n        if (!options.$shared) {\n            return;\n        }\n        return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n    }\n includeOptions(mode, sharedOptions) {\n        return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n    }\n _getSharedOptions(start, mode) {\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const previouslySharedOptions = this._sharedOptions;\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n        return {\n            sharedOptions,\n            includeOptions\n        };\n    }\n updateElement(element, index, properties, mode) {\n        if (isDirectUpdateMode(mode)) {\n            Object.assign(element, properties);\n        } else {\n            this._resolveAnimations(index, mode).update(element, properties);\n        }\n    }\n updateSharedOptions(sharedOptions, mode, newOptions) {\n        if (sharedOptions && !isDirectUpdateMode(mode)) {\n            this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n        }\n    }\n _setStyle(element, index, mode, active) {\n        element.active = active;\n        const options = this.getStyle(index, active);\n        this._resolveAnimations(index, mode, active).update(element, {\n            options: !active && this.getSharedOptions(options) || options\n        });\n    }\n    removeHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', false);\n    }\n    setHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', true);\n    }\n _removeDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', false);\n        }\n    }\n _setDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', true);\n        }\n    }\n _resyncElements(resetNewElements) {\n        const data = this._data;\n        const elements = this._cachedMeta.data;\n        for (const [method, arg1, arg2] of this._syncList){\n            this[method](arg1, arg2);\n        }\n        this._syncList = [];\n        const numMeta = elements.length;\n        const numData = data.length;\n        const count = Math.min(numData, numMeta);\n        if (count) {\n            this.parse(0, count);\n        }\n        if (numData > numMeta) {\n            this._insertElements(numMeta, numData - numMeta, resetNewElements);\n        } else if (numData < numMeta) {\n            this._removeElements(numData, numMeta - numData);\n        }\n    }\n _insertElements(start, count, resetNewElements = true) {\n        const meta = this._cachedMeta;\n        const data = meta.data;\n        const end = start + count;\n        let i;\n        const move = (arr)=>{\n            arr.length += count;\n            for(i = arr.length - 1; i >= end; i--){\n                arr[i] = arr[i - count];\n            }\n        };\n        move(data);\n        for(i = start; i < end; ++i){\n            data[i] = new this.dataElementType();\n        }\n        if (this._parsing) {\n            move(meta._parsed);\n        }\n        this.parse(start, count);\n        if (resetNewElements) {\n            this.updateElements(data, start, count, 'reset');\n        }\n    }\n    updateElements(element, start, count, mode) {}\n _removeElements(start, count) {\n        const meta = this._cachedMeta;\n        if (this._parsing) {\n            const removed = meta._parsed.splice(start, count);\n            if (meta._stacked) {\n                clearStacks(meta, removed);\n            }\n        }\n        meta.data.splice(start, count);\n    }\n _sync(args) {\n        if (this._parsing) {\n            this._syncList.push(args);\n        } else {\n            const [method, arg1, arg2] = args;\n            this[method](arg1, arg2);\n        }\n        this.chart._dataChanges.push([\n            this.index,\n            ...args\n        ]);\n    }\n    _onDataPush() {\n        const count = arguments.length;\n        this._sync([\n            '_insertElements',\n            this.getDataset().data.length - count,\n            count\n        ]);\n    }\n    _onDataPop() {\n        this._sync([\n            '_removeElements',\n            this._cachedMeta.data.length - 1,\n            1\n        ]);\n    }\n    _onDataShift() {\n        this._sync([\n            '_removeElements',\n            0,\n            1\n        ]);\n    }\n    _onDataSplice(start, count) {\n        if (count) {\n            this._sync([\n                '_removeElements',\n                start,\n                count\n            ]);\n        }\n        const newCount = arguments.length - 2;\n        if (newCount) {\n            this._sync([\n                '_insertElements',\n                start,\n                newCount\n            ]);\n        }\n    }\n    _onDataUnshift() {\n        this._sync([\n            '_insertElements',\n            0,\n            arguments.length\n        ]);\n    }\n}\n\nfunction getAllScaleValues(scale, type) {\n    if (!scale._cache.$bar) {\n        const visibleMetas = scale.getMatchingVisibleMetas(type);\n        let values = [];\n        for(let i = 0, ilen = visibleMetas.length; i < ilen; i++){\n            values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n        }\n        scale._cache.$bar = _arrayUnique(values.sort((a, b)=>a - b));\n    }\n    return scale._cache.$bar;\n}\n function computeMinSampleSize(meta) {\n    const scale = meta.iScale;\n    const values = getAllScaleValues(scale, meta.type);\n    let min = scale._length;\n    let i, ilen, curr, prev;\n    const updateMinAndPrev = ()=>{\n        if (curr === 32767 || curr === -32768) {\n            return;\n        }\n        if (defined(prev)) {\n            min = Math.min(min, Math.abs(curr - prev) || min);\n        }\n        prev = curr;\n    };\n    for(i = 0, ilen = values.length; i < ilen; ++i){\n        curr = scale.getPixelForValue(values[i]);\n        updateMinAndPrev();\n    }\n    prev = undefined;\n    for(i = 0, ilen = scale.ticks.length; i < ilen; ++i){\n        curr = scale.getPixelForTick(i);\n        updateMinAndPrev();\n    }\n    return min;\n}\n function computeFitCategoryTraits(index, ruler, options, stackCount) {\n    const thickness = options.barThickness;\n    let size, ratio;\n    if (isNullOrUndef(thickness)) {\n        size = ruler.min * options.categoryPercentage;\n        ratio = options.barPercentage;\n    } else {\n        size = thickness * stackCount;\n        ratio = 1;\n    }\n    return {\n        chunk: size / stackCount,\n        ratio,\n        start: ruler.pixels[index] - size / 2\n    };\n}\n function computeFlexCategoryTraits(index, ruler, options, stackCount) {\n    const pixels = ruler.pixels;\n    const curr = pixels[index];\n    let prev = index > 0 ? pixels[index - 1] : null;\n    let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n    const percent = options.categoryPercentage;\n    if (prev === null) {\n        prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n    }\n    if (next === null) {\n        next = curr + curr - prev;\n    }\n    const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n    const size = Math.abs(next - prev) / 2 * percent;\n    return {\n        chunk: size / stackCount,\n        ratio: options.barPercentage,\n        start\n    };\n}\nfunction parseFloatBar(entry, item, vScale, i) {\n    const startValue = vScale.parse(entry[0], i);\n    const endValue = vScale.parse(entry[1], i);\n    const min = Math.min(startValue, endValue);\n    const max = Math.max(startValue, endValue);\n    let barStart = min;\n    let barEnd = max;\n    if (Math.abs(min) > Math.abs(max)) {\n        barStart = max;\n        barEnd = min;\n    }\n    item[vScale.axis] = barEnd;\n    item._custom = {\n        barStart,\n        barEnd,\n        start: startValue,\n        end: endValue,\n        min,\n        max\n    };\n}\nfunction parseValue(entry, item, vScale, i) {\n    if (isArray(entry)) {\n        parseFloatBar(entry, item, vScale, i);\n    } else {\n        item[vScale.axis] = vScale.parse(entry, i);\n    }\n    return item;\n}\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = [];\n    let i, ilen, item, entry;\n    for(i = start, ilen = start + count; i < ilen; ++i){\n        entry = data[i];\n        item = {};\n        item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n        parsed.push(parseValue(entry, item, vScale, i));\n    }\n    return parsed;\n}\nfunction isFloatBar(custom) {\n    return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\nfunction barSign(size, vScale, actualBase) {\n    if (size !== 0) {\n        return sign(size);\n    }\n    return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\nfunction borderProps(properties) {\n    let reverse, start, end, top, bottom;\n    if (properties.horizontal) {\n        reverse = properties.base > properties.x;\n        start = 'left';\n        end = 'right';\n    } else {\n        reverse = properties.base < properties.y;\n        start = 'bottom';\n        end = 'top';\n    }\n    if (reverse) {\n        top = 'end';\n        bottom = 'start';\n    } else {\n        top = 'start';\n        bottom = 'end';\n    }\n    return {\n        start,\n        end,\n        reverse,\n        top,\n        bottom\n    };\n}\nfunction setBorderSkipped(properties, options, stack, index) {\n    let edge = options.borderSkipped;\n    const res = {};\n    if (!edge) {\n        properties.borderSkipped = res;\n        return;\n    }\n    if (edge === true) {\n        properties.borderSkipped = {\n            top: true,\n            right: true,\n            bottom: true,\n            left: true\n        };\n        return;\n    }\n    const { start , end , reverse , top , bottom  } = borderProps(properties);\n    if (edge === 'middle' && stack) {\n        properties.enableBorderRadius = true;\n        if ((stack._top || 0) === index) {\n            edge = top;\n        } else if ((stack._bottom || 0) === index) {\n            edge = bottom;\n        } else {\n            res[parseEdge(bottom, start, end, reverse)] = true;\n            edge = top;\n        }\n    }\n    res[parseEdge(edge, start, end, reverse)] = true;\n    properties.borderSkipped = res;\n}\nfunction parseEdge(edge, a, b, reverse) {\n    if (reverse) {\n        edge = swap(edge, a, b);\n        edge = startEnd(edge, b, a);\n    } else {\n        edge = startEnd(edge, a, b);\n    }\n    return edge;\n}\nfunction swap(orig, v1, v2) {\n    return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\nfunction startEnd(v, start, end) {\n    return v === 'start' ? start : v === 'end' ? end : v;\n}\nfunction setInflateAmount(properties, { inflateAmount  }, ratio) {\n    properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;\n}\nclass BarController extends DatasetController {\n    static id = 'bar';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'bar',\n        categoryPercentage: 0.8,\n        barPercentage: 0.9,\n        grouped: true,\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'base',\n                    'width',\n                    'height'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category',\n                offset: true,\n                grid: {\n                    offset: true\n                }\n            },\n            _value_: {\n                type: 'linear',\n                beginAtZero: true\n            }\n        }\n    };\n parsePrimitiveData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseArrayData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseObjectData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const parsed = [];\n        let i, ilen, item, obj;\n        for(i = start, ilen = start + count; i < ilen; ++i){\n            obj = data[i];\n            item = {};\n            item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n            parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n        }\n        return parsed;\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        super.updateRangeFromParsed(range, scale, parsed, stack);\n        const custom = parsed._custom;\n        if (custom && scale === this._cachedMeta.vScale) {\n            range.min = Math.min(range.min, custom.min);\n            range.max = Math.max(range.max, custom.max);\n        }\n    }\n getMaxOverflow() {\n        return 0;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const { iScale , vScale  } = meta;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n        return {\n            label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n            value\n        };\n    }\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n        const meta = this._cachedMeta;\n        meta.stack = this.getDataset().stack;\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        this.updateElements(meta.data, 0, meta.data.length, mode);\n    }\n    updateElements(bars, start, count, mode) {\n        const reset = mode === 'reset';\n        const { index , _cachedMeta: { vScale  }  } = this;\n        const base = vScale.getBasePixel();\n        const horizontal = vScale.isHorizontal();\n        const ruler = this._getRuler();\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        for(let i = start; i < start + count; i++){\n            const parsed = this.getParsed(i);\n            const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {\n                base,\n                head: base\n            } : this._calculateBarValuePixels(i);\n            const ipixels = this._calculateBarIndexPixels(i, ruler);\n            const stack = (parsed._stacks || {})[vScale.axis];\n            const properties = {\n                horizontal,\n                base: vpixels.base,\n                enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\n                x: horizontal ? vpixels.head : ipixels.center,\n                y: horizontal ? ipixels.center : vpixels.head,\n                height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n                width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n            }\n            const options = properties.options || bars[i].options;\n            setBorderSkipped(properties, options, stack, index);\n            setInflateAmount(properties, options, ruler.ratio);\n            this.updateElement(bars[i], i, properties, mode);\n        }\n    }\n _getStacks(last, dataIndex) {\n        const { iScale  } = this._cachedMeta;\n        const metasets = iScale.getMatchingVisibleMetas(this._type).filter((meta)=>meta.controller.options.grouped);\n        const stacked = iScale.options.stacked;\n        const stacks = [];\n        const skipNull = (meta)=>{\n            const parsed = meta.controller.getParsed(dataIndex);\n            const val = parsed && parsed[meta.vScale.axis];\n            if (isNullOrUndef(val) || isNaN(val)) {\n                return true;\n            }\n        };\n        for (const meta of metasets){\n            if (dataIndex !== undefined && skipNull(meta)) {\n                continue;\n            }\n            if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {\n                stacks.push(meta.stack);\n            }\n            if (meta.index === last) {\n                break;\n            }\n        }\n        if (!stacks.length) {\n            stacks.push(undefined);\n        }\n        return stacks;\n    }\n _getStackCount(index) {\n        return this._getStacks(undefined, index).length;\n    }\n _getStackIndex(datasetIndex, name, dataIndex) {\n        const stacks = this._getStacks(datasetIndex, dataIndex);\n        const index = name !== undefined ? stacks.indexOf(name) : -1;\n        return index === -1 ? stacks.length - 1 : index;\n    }\n _getRuler() {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const pixels = [];\n        let i, ilen;\n        for(i = 0, ilen = meta.data.length; i < ilen; ++i){\n            pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n        }\n        const barThickness = opts.barThickness;\n        const min = barThickness || computeMinSampleSize(meta);\n        return {\n            min,\n            pixels,\n            start: iScale._startPixel,\n            end: iScale._endPixel,\n            stackCount: this._getStackCount(),\n            scale: iScale,\n            grouped: opts.grouped,\n            ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n        };\n    }\n _calculateBarValuePixels(index) {\n        const { _cachedMeta: { vScale , _stacked , index: datasetIndex  } , options: { base: baseValue , minBarLength  }  } = this;\n        const actualBase = baseValue || 0;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const floating = isFloatBar(custom);\n        let value = parsed[vScale.axis];\n        let start = 0;\n        let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n        let head, size;\n        if (length !== value) {\n            start = length - value;\n            length = value;\n        }\n        if (floating) {\n            value = custom.barStart;\n            length = custom.barEnd - custom.barStart;\n            if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n                start = 0;\n            }\n            start += value;\n        }\n        const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n        let base = vScale.getPixelForValue(startValue);\n        if (this.chart.getDataVisibility(index)) {\n            head = vScale.getPixelForValue(start + length);\n        } else {\n            head = base;\n        }\n        size = head - base;\n        if (Math.abs(size) < minBarLength) {\n            size = barSign(size, vScale, actualBase) * minBarLength;\n            if (value === actualBase) {\n                base -= size / 2;\n            }\n            const startPixel = vScale.getPixelForDecimal(0);\n            const endPixel = vScale.getPixelForDecimal(1);\n            const min = Math.min(startPixel, endPixel);\n            const max = Math.max(startPixel, endPixel);\n            base = Math.max(Math.min(base, max), min);\n            head = base + size;\n            if (_stacked && !floating) {\n                parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n            }\n        }\n        if (base === vScale.getPixelForValue(actualBase)) {\n            const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n            base += halfGrid;\n            size -= halfGrid;\n        }\n        return {\n            size,\n            base,\n            head,\n            center: head + size / 2\n        };\n    }\n _calculateBarIndexPixels(index, ruler) {\n        const scale = ruler.scale;\n        const options = this.options;\n        const skipNull = options.skipNull;\n        const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n        let center, size;\n        if (ruler.grouped) {\n            const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n            const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);\n            const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n            center = range.start + range.chunk * stackIndex + range.chunk / 2;\n            size = Math.min(maxBarThickness, range.chunk * range.ratio);\n        } else {\n            center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n            size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n        }\n        return {\n            base: center - size / 2,\n            head: center + size / 2,\n            center,\n            size\n        };\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        const vScale = meta.vScale;\n        const rects = meta.data;\n        const ilen = rects.length;\n        let i = 0;\n        for(; i < ilen; ++i){\n            if (this.getParsed(i)[vScale.axis] !== null) {\n                rects[i].draw(this._ctx);\n            }\n        }\n    }\n}\n\nclass BubbleController extends DatasetController {\n    static id = 'bubble';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'borderWidth',\n                    'radius'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const parsed = super.parsePrimitiveData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const parsed = super.parseArrayData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const parsed = super.parseObjectData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n getMaxOverflow() {\n        const data = this._cachedMeta.data;\n        let max = 0;\n        for(let i = data.length - 1; i >= 0; --i){\n            max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n        }\n        return max > 0 && max;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        const r = parsed._custom;\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n        };\n    }\n    update(mode) {\n        const points = this._cachedMeta.data;\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const parsed = !reset && this.getParsed(i);\n            const properties = {};\n            const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n            const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel);\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n                if (reset) {\n                    properties.options.radius = 0;\n                }\n            }\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n resolveDataElementOptions(index, mode) {\n        const parsed = this.getParsed(index);\n        let values = super.resolveDataElementOptions(index, mode);\n        if (values.$shared) {\n            values = Object.assign({}, values, {\n                $shared: false\n            });\n        }\n        const radius = values.radius;\n        if (mode !== 'active') {\n            values.radius = 0;\n        }\n        values.radius += valueOrDefault(parsed && parsed._custom, radius);\n        return values;\n    }\n}\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n    let ratioX = 1;\n    let ratioY = 1;\n    let offsetX = 0;\n    let offsetY = 0;\n    if (circumference < TAU) {\n        const startAngle = rotation;\n        const endAngle = startAngle + circumference;\n        const startX = Math.cos(startAngle);\n        const startY = Math.sin(startAngle);\n        const endX = Math.cos(endAngle);\n        const endY = Math.sin(endAngle);\n        const calcMax = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n        const calcMin = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n        const maxX = calcMax(0, startX, endX);\n        const maxY = calcMax(HALF_PI, startY, endY);\n        const minX = calcMin(PI, startX, endX);\n        const minY = calcMin(PI + HALF_PI, startY, endY);\n        ratioX = (maxX - minX) / 2;\n        ratioY = (maxY - minY) / 2;\n        offsetX = -(maxX + minX) / 2;\n        offsetY = -(maxY + minY) / 2;\n    }\n    return {\n        ratioX,\n        ratioY,\n        offsetX,\n        offsetY\n    };\n}\nclass DoughnutController extends DatasetController {\n    static id = 'doughnut';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: false\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'circumference',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius',\n                    'startAngle',\n                    'x',\n                    'y',\n                    'offset',\n                    'borderWidth',\n                    'spacing'\n                ]\n            }\n        },\n        cutout: '50%',\n        rotation: 0,\n        circumference: 360,\n        radius: '100%',\n        spacing: 0,\n        indexAxis: 'r'\n    };\n    static descriptors = {\n        _scriptable: (name)=>name !== 'spacing',\n        _indexable: (name)=>name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash')\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.enableOptionSharing = true;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.offsetX = undefined;\n        this.offsetY = undefined;\n    }\n    linkScales() {}\n parse(start, count) {\n        const data = this.getDataset().data;\n        const meta = this._cachedMeta;\n        if (this._parsing === false) {\n            meta._parsed = data;\n        } else {\n            let getter = (i)=>+data[i];\n            if (isObject(data[start])) {\n                const { key ='value'  } = this._parsing;\n                getter = (i)=>+resolveObjectKey(data[i], key);\n            }\n            let i, ilen;\n            for(i = start, ilen = start + count; i < ilen; ++i){\n                meta._parsed[i] = getter(i);\n            }\n        }\n    }\n _getRotation() {\n        return toRadians(this.options.rotation - 90);\n    }\n _getCircumference() {\n        return toRadians(this.options.circumference);\n    }\n _getRotationExtents() {\n        let min = TAU;\n        let max = -TAU;\n        for(let i = 0; i < this.chart.data.datasets.length; ++i){\n            if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n                const controller = this.chart.getDatasetMeta(i).controller;\n                const rotation = controller._getRotation();\n                const circumference = controller._getCircumference();\n                min = Math.min(min, rotation);\n                max = Math.max(max, rotation + circumference);\n            }\n        }\n        return {\n            rotation: min,\n            circumference: max - min\n        };\n    }\n update(mode) {\n        const chart = this.chart;\n        const { chartArea  } = chart;\n        const meta = this._cachedMeta;\n        const arcs = meta.data;\n        const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n        const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n        const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n        const chartWeight = this._getRingWeight(this.index);\n        const { circumference , rotation  } = this._getRotationExtents();\n        const { ratioX , ratioY , offsetX , offsetY  } = getRatioAndOffset(rotation, circumference, cutout);\n        const maxWidth = (chartArea.width - spacing) / ratioX;\n        const maxHeight = (chartArea.height - spacing) / ratioY;\n        const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n        const outerRadius = toDimension(this.options.radius, maxRadius);\n        const innerRadius = Math.max(outerRadius * cutout, 0);\n        const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n        this.offsetX = offsetX * outerRadius;\n        this.offsetY = offsetY * outerRadius;\n        meta.total = this.calculateTotal();\n        this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n        this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n _circumference(i, reset) {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const circumference = this._getCircumference();\n        if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n            return 0;\n        }\n        return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const centerX = (chartArea.left + chartArea.right) / 2;\n        const centerY = (chartArea.top + chartArea.bottom) / 2;\n        const animateScale = reset && animationOpts.animateScale;\n        const innerRadius = animateScale ? 0 : this.innerRadius;\n        const outerRadius = animateScale ? 0 : this.outerRadius;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        let startAngle = this._getRotation();\n        let i;\n        for(i = 0; i < start; ++i){\n            startAngle += this._circumference(i, reset);\n        }\n        for(i = start; i < start + count; ++i){\n            const circumference = this._circumference(i, reset);\n            const arc = arcs[i];\n            const properties = {\n                x: centerX + this.offsetX,\n                y: centerY + this.offsetY,\n                startAngle,\n                endAngle: startAngle + circumference,\n                circumference,\n                outerRadius,\n                innerRadius\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n            }\n            startAngle += circumference;\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    calculateTotal() {\n        const meta = this._cachedMeta;\n        const metaData = meta.data;\n        let total = 0;\n        let i;\n        for(i = 0; i < metaData.length; i++){\n            const value = meta._parsed[i];\n            if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n                total += Math.abs(value);\n            }\n        }\n        return total;\n    }\n    calculateCircumference(value) {\n        const total = this._cachedMeta.total;\n        if (total > 0 && !isNaN(value)) {\n            return TAU * (Math.abs(value) / total);\n        }\n        return 0;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = formatNumber(meta._parsed[index], chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    getMaxBorderWidth(arcs) {\n        let max = 0;\n        const chart = this.chart;\n        let i, ilen, meta, controller, options;\n        if (!arcs) {\n            for(i = 0, ilen = chart.data.datasets.length; i < ilen; ++i){\n                if (chart.isDatasetVisible(i)) {\n                    meta = chart.getDatasetMeta(i);\n                    arcs = meta.data;\n                    controller = meta.controller;\n                    break;\n                }\n            }\n        }\n        if (!arcs) {\n            return 0;\n        }\n        for(i = 0, ilen = arcs.length; i < ilen; ++i){\n            options = controller.resolveDataElementOptions(i);\n            if (options.borderAlign !== 'inner') {\n                max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n            }\n        }\n        return max;\n    }\n    getMaxOffset(arcs) {\n        let max = 0;\n        for(let i = 0, ilen = arcs.length; i < ilen; ++i){\n            const options = this.resolveDataElementOptions(i);\n            max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n        }\n        return max;\n    }\n _getRingWeightOffset(datasetIndex) {\n        let ringWeightOffset = 0;\n        for(let i = 0; i < datasetIndex; ++i){\n            if (this.chart.isDatasetVisible(i)) {\n                ringWeightOffset += this._getRingWeight(i);\n            }\n        }\n        return ringWeightOffset;\n    }\n _getRingWeight(datasetIndex) {\n        return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n    }\n _getVisibleDatasetWeightTotal() {\n        return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n    }\n}\n\nclass LineController extends DatasetController {\n    static id = 'line';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        showLine: true,\n        spanGaps: false\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category'\n            },\n            _value_: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        this.supportsDecimation = true;\n        super.initialize();\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { dataset: line , data: points = [] , _dataset  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (_scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        line._chart = this.chart;\n        line._datasetIndex = this.index;\n        line._decimated = !!_dataset._decimated;\n        line.points = points;\n        const options = this.resolveDatasetElementOptions(mode);\n        if (!this.options.showLine) {\n            options.borderWidth = 0;\n        }\n        options.segment = this.options.segment;\n        this.updateElement(line, undefined, {\n            animated: !animationsDisabled,\n            options\n        }, mode);\n        this.updateElements(points, start, count, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        const end = start + count;\n        const pointsCount = points.length;\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = 0; i < pointsCount; ++i){\n            const point = points[i];\n            const properties = directUpdate ? point : {};\n            if (i < start || i >= end) {\n                properties.skip = true;\n                continue;\n            }\n            const parsed = this.getParsed(i);\n            const nullData = isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        const data = meta.data || [];\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n        super.draw();\n    }\n}\n\nclass PolarAreaController extends DatasetController {\n    static id = 'polarArea';\n static defaults = {\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: true\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'startAngle',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius'\n                ]\n            }\n        },\n        indexAxis: 'r',\n        startAngle: 0\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        },\n        scales: {\n            r: {\n                type: 'radialLinear',\n                angleLines: {\n                    display: false\n                },\n                beginAtZero: true,\n                grid: {\n                    circular: true\n                },\n                pointLabels: {\n                    display: false\n                },\n                startAngle: 0\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const arcs = this._cachedMeta.data;\n        this._updateRadius();\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n getMinMax() {\n        const meta = this._cachedMeta;\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        meta.data.forEach((element, index)=>{\n            const parsed = this.getParsed(index).r;\n            if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n                if (parsed < range.min) {\n                    range.min = parsed;\n                }\n                if (parsed > range.max) {\n                    range.max = parsed;\n                }\n            }\n        });\n        return range;\n    }\n _updateRadius() {\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n        const outerRadius = Math.max(minSize / 2, 0);\n        const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n        const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n        this.outerRadius = outerRadius - radiusLength * this.index;\n        this.innerRadius = this.outerRadius - radiusLength;\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const scale = this._cachedMeta.rScale;\n        const centerX = scale.xCenter;\n        const centerY = scale.yCenter;\n        const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n        let angle = datasetStartAngle;\n        let i;\n        const defaultAngle = 360 / this.countVisibleElements();\n        for(i = 0; i < start; ++i){\n            angle += this._computeAngle(i, mode, defaultAngle);\n        }\n        for(i = start; i < start + count; i++){\n            const arc = arcs[i];\n            let startAngle = angle;\n            let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n            let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n            angle = endAngle;\n            if (reset) {\n                if (animationOpts.animateScale) {\n                    outerRadius = 0;\n                }\n                if (animationOpts.animateRotate) {\n                    startAngle = endAngle = datasetStartAngle;\n                }\n            }\n            const properties = {\n                x: centerX,\n                y: centerY,\n                innerRadius: 0,\n                outerRadius,\n                startAngle,\n                endAngle,\n                options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n            };\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    countVisibleElements() {\n        const meta = this._cachedMeta;\n        let count = 0;\n        meta.data.forEach((element, index)=>{\n            if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n                count++;\n            }\n        });\n        return count;\n    }\n _computeAngle(index, mode, defaultAngle) {\n        return this.chart.getDataVisibility(index) ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n    }\n}\n\nclass PieController extends DoughnutController {\n    static id = 'pie';\n static defaults = {\n        cutout: 0,\n        rotation: 0,\n        circumference: 360,\n        radius: '100%'\n    };\n}\n\nclass RadarController extends DatasetController {\n    static id = 'radar';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        indexAxis: 'r',\n        showLine: true,\n        elements: {\n            line: {\n                fill: 'start'\n            }\n        }\n    };\n static overrides = {\n        aspectRatio: 1,\n        scales: {\n            r: {\n                type: 'radialLinear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const vScale = this._cachedMeta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: vScale.getLabels()[index],\n            value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const line = meta.dataset;\n        const points = meta.data || [];\n        const labels = meta.iScale.getLabels();\n        line.points = points;\n        if (mode !== 'resize') {\n            const options = this.resolveDatasetElementOptions(mode);\n            if (!this.options.showLine) {\n                options.borderWidth = 0;\n            }\n            const properties = {\n                _loop: true,\n                _fullLoop: labels.length === points.length,\n                options\n            };\n            this.updateElement(line, undefined, properties, mode);\n        }\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const scale = this._cachedMeta.rScale;\n        const reset = mode === 'reset';\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n            const x = reset ? scale.xCenter : pointPosition.x;\n            const y = reset ? scale.yCenter : pointPosition.y;\n            const properties = {\n                x,\n                y,\n                angle: pointPosition.angle,\n                skip: isNaN(x) || isNaN(y),\n                options\n            };\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n}\n\nclass ScatterController extends DatasetController {\n    static id = 'scatter';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        showLine: false,\n        fill: false\n    };\n static overrides = {\n        interaction: {\n            mode: 'point'\n        },\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + ')'\n        };\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { data: points = []  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (_scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        if (this.options.showLine) {\n            if (!this.datasetElementType) {\n                this.addElements();\n            }\n            const { dataset: line , _dataset  } = meta;\n            line._chart = this.chart;\n            line._datasetIndex = this.index;\n            line._decimated = !!_dataset._decimated;\n            line.points = points;\n            const options = this.resolveDatasetElementOptions(mode);\n            options.segment = this.options.segment;\n            this.updateElement(line, undefined, {\n                animated: !animationsDisabled,\n                options\n            }, mode);\n        } else if (this.datasetElementType) {\n            delete meta.dataset;\n            this.datasetElementType = false;\n        }\n        this.updateElements(points, start, count, mode);\n    }\n    addElements() {\n        const { showLine  } = this.options;\n        if (!this.datasetElementType && showLine) {\n            this.datasetElementType = this.chart.registry.getElement('line');\n        }\n        super.addElements();\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = start; i < start + count; ++i){\n            const point = points[i];\n            const parsed = this.getParsed(i);\n            const properties = directUpdate ? point : {};\n            const nullData = isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const data = meta.data || [];\n        if (!this.options.showLine) {\n            let max = 0;\n            for(let i = data.length - 1; i >= 0; --i){\n                max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n            }\n            return max > 0 && max;\n        }\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n}\n\nvar controllers = /*#__PURE__*/Object.freeze({\n__proto__: null,\nBarController: BarController,\nBubbleController: BubbleController,\nDoughnutController: DoughnutController,\nLineController: LineController,\nPieController: PieController,\nPolarAreaController: PolarAreaController,\nRadarController: RadarController,\nScatterController: ScatterController\n});\n\n/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */ function abstract() {\n    throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */ class DateAdapterBase {\n    /**\n   * Override default date adapter methods.\n   * Accepts type parameter to define options type.\n   * @example\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\n   *   init() {\n   *     console.log(this.options.myAdapterOption);\n   *   }\n   * })\n   */ static override(members) {\n        Object.assign(DateAdapterBase.prototype, members);\n    }\n    options;\n    constructor(options){\n        this.options = options || {};\n    }\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    init() {}\n    formats() {\n        return abstract();\n    }\n    parse() {\n        return abstract();\n    }\n    format() {\n        return abstract();\n    }\n    add() {\n        return abstract();\n    }\n    diff() {\n        return abstract();\n    }\n    startOf() {\n        return abstract();\n    }\n    endOf() {\n        return abstract();\n    }\n}\nvar adapters = {\n    _date: DateAdapterBase\n};\n\nfunction binarySearch(metaset, axis, value, intersect) {\n    const { controller , data , _sorted  } = metaset;\n    const iScale = controller._cachedMeta.iScale;\n    if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n        const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n        if (!intersect) {\n            return lookupMethod(data, axis, value);\n        } else if (controller._sharedOptions) {\n            const el = data[0];\n            const range = typeof el.getRange === 'function' && el.getRange(axis);\n            if (range) {\n                const start = lookupMethod(data, axis, value - range);\n                const end = lookupMethod(data, axis, value + range);\n                return {\n                    lo: start.lo,\n                    hi: end.hi\n                };\n            }\n        }\n    }\n    return {\n        lo: 0,\n        hi: data.length - 1\n    };\n}\n function evaluateInteractionItems(chart, axis, position, handler, intersect) {\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const value = position[axis];\n    for(let i = 0, ilen = metasets.length; i < ilen; ++i){\n        const { index , data  } = metasets[i];\n        const { lo , hi  } = binarySearch(metasets[i], axis, value, intersect);\n        for(let j = lo; j <= hi; ++j){\n            const element = data[j];\n            if (!element.skip) {\n                handler(element, index, j);\n            }\n        }\n    }\n}\n function getDistanceMetricForAxis(axis) {\n    const useX = axis.indexOf('x') !== -1;\n    const useY = axis.indexOf('y') !== -1;\n    return function(pt1, pt2) {\n        const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n        const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n        return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n    };\n}\n function getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n    const items = [];\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return items;\n    }\n    const evaluationFunc = function(element, datasetIndex, index) {\n        if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n            return;\n        }\n        if (element.inRange(position.x, position.y, useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    };\n    evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n    return items;\n}\n function getNearestRadialItems(chart, position, axis, useFinalPosition) {\n    let items = [];\n    function evaluationFunc(element, datasetIndex, index) {\n        const { startAngle , endAngle  } = element.getProps([\n            'startAngle',\n            'endAngle'\n        ], useFinalPosition);\n        const { angle  } = getAngleFromPoint(element, {\n            x: position.x,\n            y: position.y\n        });\n        if (_angleBetween(angle, startAngle, endAngle)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    let items = [];\n    const distanceMetric = getDistanceMetricForAxis(axis);\n    let minDistance = Number.POSITIVE_INFINITY;\n    function evaluationFunc(element, datasetIndex, index) {\n        const inRange = element.inRange(position.x, position.y, useFinalPosition);\n        if (intersect && !inRange) {\n            return;\n        }\n        const center = element.getCenterPoint(useFinalPosition);\n        const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n        if (!pointInArea && !inRange) {\n            return;\n        }\n        const distance = distanceMetric(position, center);\n        if (distance < minDistance) {\n            items = [\n                {\n                    element,\n                    datasetIndex,\n                    index\n                }\n            ];\n            minDistance = distance;\n        } else if (distance === minDistance) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return [];\n    }\n    return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n function getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n    const items = [];\n    const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n    let intersectsItem = false;\n    evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index)=>{\n        if (element[rangeMethod](position[axis], useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n            intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n        }\n    });\n    if (intersect && !intersectsItem) {\n        return [];\n    }\n    return items;\n}\n var Interaction = {\n    evaluateInteractionItems,\n    modes: {\n index (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'x';\n            const includeInvisible = options.includeInvisible || false;\n            const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            const elements = [];\n            if (!items.length) {\n                return [];\n            }\n            chart.getSortedVisibleDatasetMetas().forEach((meta)=>{\n                const index = items[0].index;\n                const element = meta.data[index];\n                if (element && !element.skip) {\n                    elements.push({\n                        element,\n                        datasetIndex: meta.index,\n                        index\n                    });\n                }\n            });\n            return elements;\n        },\n dataset (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            if (items.length > 0) {\n                const datasetIndex = items[0].datasetIndex;\n                const data = chart.getDatasetMeta(datasetIndex).data;\n                items = [];\n                for(let i = 0; i < data.length; ++i){\n                    items.push({\n                        element: data[i],\n                        datasetIndex,\n                        index: i\n                    });\n                }\n            }\n            return items;\n        },\n point (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n        },\n nearest (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n        },\n x (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n        },\n y (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n        }\n    }\n};\n\nconst STATIC_POSITIONS = [\n    'left',\n    'top',\n    'right',\n    'bottom'\n];\nfunction filterByPosition(array, position) {\n    return array.filter((v)=>v.pos === position);\n}\nfunction filterDynamicPositionByAxis(array, axis) {\n    return array.filter((v)=>STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\nfunction sortByWeight(array, reverse) {\n    return array.sort((a, b)=>{\n        const v0 = reverse ? b : a;\n        const v1 = reverse ? a : b;\n        return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n    });\n}\nfunction wrapBoxes(boxes) {\n    const layoutBoxes = [];\n    let i, ilen, box, pos, stack, stackWeight;\n    for(i = 0, ilen = (boxes || []).length; i < ilen; ++i){\n        box = boxes[i];\n        ({ position: pos , options: { stack , stackWeight =1  }  } = box);\n        layoutBoxes.push({\n            index: i,\n            box,\n            pos,\n            horizontal: box.isHorizontal(),\n            weight: box.weight,\n            stack: stack && pos + stack,\n            stackWeight\n        });\n    }\n    return layoutBoxes;\n}\nfunction buildStacks(layouts) {\n    const stacks = {};\n    for (const wrap of layouts){\n        const { stack , pos , stackWeight  } = wrap;\n        if (!stack || !STATIC_POSITIONS.includes(pos)) {\n            continue;\n        }\n        const _stack = stacks[stack] || (stacks[stack] = {\n            count: 0,\n            placed: 0,\n            weight: 0,\n            size: 0\n        });\n        _stack.count++;\n        _stack.weight += stackWeight;\n    }\n    return stacks;\n}\n function setLayoutDims(layouts, params) {\n    const stacks = buildStacks(layouts);\n    const { vBoxMaxWidth , hBoxMaxHeight  } = params;\n    let i, ilen, layout;\n    for(i = 0, ilen = layouts.length; i < ilen; ++i){\n        layout = layouts[i];\n        const { fullSize  } = layout.box;\n        const stack = stacks[layout.stack];\n        const factor = stack && layout.stackWeight / stack.weight;\n        if (layout.horizontal) {\n            layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n            layout.height = hBoxMaxHeight;\n        } else {\n            layout.width = vBoxMaxWidth;\n            layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n        }\n    }\n    return stacks;\n}\nfunction buildLayoutBoxes(boxes) {\n    const layoutBoxes = wrapBoxes(boxes);\n    const fullSize = sortByWeight(layoutBoxes.filter((wrap)=>wrap.box.fullSize), true);\n    const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n    const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n    const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n    const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n    const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n    const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n    return {\n        fullSize,\n        leftAndTop: left.concat(top),\n        rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n        chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n        vertical: left.concat(right).concat(centerVertical),\n        horizontal: top.concat(bottom).concat(centerHorizontal)\n    };\n}\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n    return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\nfunction updateMaxPadding(maxPadding, boxPadding) {\n    maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n    maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n    maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n    maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\nfunction updateDims(chartArea, params, layout, stacks) {\n    const { pos , box  } = layout;\n    const maxPadding = chartArea.maxPadding;\n    if (!isObject(pos)) {\n        if (layout.size) {\n            chartArea[pos] -= layout.size;\n        }\n        const stack = stacks[layout.stack] || {\n            size: 0,\n            count: 1\n        };\n        stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n        layout.size = stack.size / stack.count;\n        chartArea[pos] += layout.size;\n    }\n    if (box.getPadding) {\n        updateMaxPadding(maxPadding, box.getPadding());\n    }\n    const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n    const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n    const widthChanged = newWidth !== chartArea.w;\n    const heightChanged = newHeight !== chartArea.h;\n    chartArea.w = newWidth;\n    chartArea.h = newHeight;\n    return layout.horizontal ? {\n        same: widthChanged,\n        other: heightChanged\n    } : {\n        same: heightChanged,\n        other: widthChanged\n    };\n}\nfunction handleMaxPadding(chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function updatePos(pos) {\n        const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n        chartArea[pos] += change;\n        return change;\n    }\n    chartArea.y += updatePos('top');\n    chartArea.x += updatePos('left');\n    updatePos('right');\n    updatePos('bottom');\n}\nfunction getMargins(horizontal, chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function marginForPositions(positions) {\n        const margin = {\n            left: 0,\n            top: 0,\n            right: 0,\n            bottom: 0\n        };\n        positions.forEach((pos)=>{\n            margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n        });\n        return margin;\n    }\n    return horizontal ? marginForPositions([\n        'left',\n        'right'\n    ]) : marginForPositions([\n        'top',\n        'bottom'\n    ]);\n}\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n    const refitBoxes = [];\n    let i, ilen, layout, box, refit, changed;\n    for(i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i){\n        layout = boxes[i];\n        box = layout.box;\n        box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\n        const { same , other  } = updateDims(chartArea, params, layout, stacks);\n        refit |= same && refitBoxes.length;\n        changed = changed || other;\n        if (!box.fullSize) {\n            refitBoxes.push(layout);\n        }\n    }\n    return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\nfunction setBoxDims(box, left, top, width, height) {\n    box.top = top;\n    box.left = left;\n    box.right = left + width;\n    box.bottom = top + height;\n    box.width = width;\n    box.height = height;\n}\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n    const userPadding = params.padding;\n    let { x , y  } = chartArea;\n    for (const layout of boxes){\n        const box = layout.box;\n        const stack = stacks[layout.stack] || {\n            count: 1,\n            placed: 0,\n            weight: 1\n        };\n        const weight = layout.stackWeight / stack.weight || 1;\n        if (layout.horizontal) {\n            const width = chartArea.w * weight;\n            const height = stack.size || box.height;\n            if (defined(stack.start)) {\n                y = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n            } else {\n                setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n            }\n            stack.start = y;\n            stack.placed += width;\n            y = box.bottom;\n        } else {\n            const height = chartArea.h * weight;\n            const width = stack.size || box.width;\n            if (defined(stack.start)) {\n                x = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n            } else {\n                setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n            }\n            stack.start = x;\n            stack.placed += height;\n            x = box.right;\n        }\n    }\n    chartArea.x = x;\n    chartArea.y = y;\n}\nvar layouts = {\n addBox (chart, item) {\n        if (!chart.boxes) {\n            chart.boxes = [];\n        }\n        item.fullSize = item.fullSize || false;\n        item.position = item.position || 'top';\n        item.weight = item.weight || 0;\n        item._layers = item._layers || function() {\n            return [\n                {\n                    z: 0,\n                    draw (chartArea) {\n                        item.draw(chartArea);\n                    }\n                }\n            ];\n        };\n        chart.boxes.push(item);\n    },\n removeBox (chart, layoutItem) {\n        const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n        if (index !== -1) {\n            chart.boxes.splice(index, 1);\n        }\n    },\n configure (chart, item, options) {\n        item.fullSize = options.fullSize;\n        item.position = options.position;\n        item.weight = options.weight;\n    },\n update (chart, width, height, minPadding) {\n        if (!chart) {\n            return;\n        }\n        const padding = toPadding(chart.options.layout.padding);\n        const availableWidth = Math.max(width - padding.width, 0);\n        const availableHeight = Math.max(height - padding.height, 0);\n        const boxes = buildLayoutBoxes(chart.boxes);\n        const verticalBoxes = boxes.vertical;\n        const horizontalBoxes = boxes.horizontal;\n        each(chart.boxes, (box)=>{\n            if (typeof box.beforeLayout === 'function') {\n                box.beforeLayout();\n            }\n        });\n        const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap)=>wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n        const params = Object.freeze({\n            outerWidth: width,\n            outerHeight: height,\n            padding,\n            availableWidth,\n            availableHeight,\n            vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n            hBoxMaxHeight: availableHeight / 2\n        });\n        const maxPadding = Object.assign({}, padding);\n        updateMaxPadding(maxPadding, toPadding(minPadding));\n        const chartArea = Object.assign({\n            maxPadding,\n            w: availableWidth,\n            h: availableHeight,\n            x: padding.left,\n            y: padding.top\n        }, padding);\n        const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n        fitBoxes(boxes.fullSize, chartArea, params, stacks);\n        fitBoxes(verticalBoxes, chartArea, params, stacks);\n        if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n            fitBoxes(verticalBoxes, chartArea, params, stacks);\n        }\n        handleMaxPadding(chartArea);\n        placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n        chartArea.x += chartArea.w;\n        chartArea.y += chartArea.h;\n        placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n        chart.chartArea = {\n            left: chartArea.left,\n            top: chartArea.top,\n            right: chartArea.left + chartArea.w,\n            bottom: chartArea.top + chartArea.h,\n            height: chartArea.h,\n            width: chartArea.w\n        };\n        each(boxes.chartArea, (layout)=>{\n            const box = layout.box;\n            Object.assign(box, chart.chartArea);\n            box.update(chartArea.w, chartArea.h, {\n                left: 0,\n                top: 0,\n                right: 0,\n                bottom: 0\n            });\n        });\n    }\n};\n\nclass BasePlatform {\n acquireContext(canvas, aspectRatio) {}\n releaseContext(context) {\n        return false;\n    }\n addEventListener(chart, type, listener) {}\n removeEventListener(chart, type, listener) {}\n getDevicePixelRatio() {\n        return 1;\n    }\n getMaximumSize(element, width, height, aspectRatio) {\n        width = Math.max(0, width || element.width);\n        height = height || element.height;\n        return {\n            width,\n            height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n        };\n    }\n isAttached(canvas) {\n        return true;\n    }\n updateConfig(config) {\n    }\n}\n\nclass BasicPlatform extends BasePlatform {\n    acquireContext(item) {\n        return item && item.getContext && item.getContext('2d') || null;\n    }\n    updateConfig(config) {\n        config.options.animation = false;\n    }\n}\n\nconst EXPANDO_KEY = '$chartjs';\n const EVENT_TYPES = {\n    touchstart: 'mousedown',\n    touchmove: 'mousemove',\n    touchend: 'mouseup',\n    pointerenter: 'mouseenter',\n    pointerdown: 'mousedown',\n    pointermove: 'mousemove',\n    pointerup: 'mouseup',\n    pointerleave: 'mouseout',\n    pointerout: 'mouseout'\n};\nconst isNullOrEmpty = (value)=>value === null || value === '';\n function initCanvas(canvas, aspectRatio) {\n    const style = canvas.style;\n    const renderHeight = canvas.getAttribute('height');\n    const renderWidth = canvas.getAttribute('width');\n    canvas[EXPANDO_KEY] = {\n        initial: {\n            height: renderHeight,\n            width: renderWidth,\n            style: {\n                display: style.display,\n                height: style.height,\n                width: style.width\n            }\n        }\n    };\n    style.display = style.display || 'block';\n    style.boxSizing = style.boxSizing || 'border-box';\n    if (isNullOrEmpty(renderWidth)) {\n        const displayWidth = readUsedSize(canvas, 'width');\n        if (displayWidth !== undefined) {\n            canvas.width = displayWidth;\n        }\n    }\n    if (isNullOrEmpty(renderHeight)) {\n        if (canvas.style.height === '') {\n            canvas.height = canvas.width / (aspectRatio || 2);\n        } else {\n            const displayHeight = readUsedSize(canvas, 'height');\n            if (displayHeight !== undefined) {\n                canvas.height = displayHeight;\n            }\n        }\n    }\n    return canvas;\n}\nconst eventListenerOptions = supportsEventListenerOptions ? {\n    passive: true\n} : false;\nfunction addListener(node, type, listener) {\n    if (node) {\n        node.addEventListener(type, listener, eventListenerOptions);\n    }\n}\nfunction removeListener(chart, type, listener) {\n    if (chart && chart.canvas) {\n        chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n    }\n}\nfunction fromNativeEvent(event, chart) {\n    const type = EVENT_TYPES[event.type] || event.type;\n    const { x , y  } = getRelativePosition(event, chart);\n    return {\n        type,\n        chart,\n        native: event,\n        x: x !== undefined ? x : null,\n        y: y !== undefined ? y : null\n    };\n}\nfunction nodeListContains(nodeList, canvas) {\n    for (const node of nodeList){\n        if (node === canvas || node.contains(canvas)) {\n            return true;\n        }\n    }\n}\nfunction createAttachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nfunction createDetachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\nfunction onWindowResize() {\n    const dpr = window.devicePixelRatio;\n    if (dpr === oldDevicePixelRatio) {\n        return;\n    }\n    oldDevicePixelRatio = dpr;\n    drpListeningCharts.forEach((resize, chart)=>{\n        if (chart.currentDevicePixelRatio !== dpr) {\n            resize();\n        }\n    });\n}\nfunction listenDevicePixelRatioChanges(chart, resize) {\n    if (!drpListeningCharts.size) {\n        window.addEventListener('resize', onWindowResize);\n    }\n    drpListeningCharts.set(chart, resize);\n}\nfunction unlistenDevicePixelRatioChanges(chart) {\n    drpListeningCharts.delete(chart);\n    if (!drpListeningCharts.size) {\n        window.removeEventListener('resize', onWindowResize);\n    }\n}\nfunction createResizeObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const container = canvas && _getParentNode(canvas);\n    if (!container) {\n        return;\n    }\n    const resize = throttled((width, height)=>{\n        const w = container.clientWidth;\n        listener(width, height);\n        if (w < container.clientWidth) {\n            listener();\n        }\n    }, window);\n    const observer = new ResizeObserver((entries)=>{\n        const entry = entries[0];\n        const width = entry.contentRect.width;\n        const height = entry.contentRect.height;\n        if (width === 0 && height === 0) {\n            return;\n        }\n        resize(width, height);\n    });\n    observer.observe(container);\n    listenDevicePixelRatioChanges(chart, resize);\n    return observer;\n}\nfunction releaseObserver(chart, type, observer) {\n    if (observer) {\n        observer.disconnect();\n    }\n    if (type === 'resize') {\n        unlistenDevicePixelRatioChanges(chart);\n    }\n}\nfunction createProxyAndListen(chart, type, listener) {\n    const canvas = chart.canvas;\n    const proxy = throttled((event)=>{\n        if (chart.ctx !== null) {\n            listener(fromNativeEvent(event, chart));\n        }\n    }, chart);\n    addListener(canvas, type, proxy);\n    return proxy;\n}\n class DomPlatform extends BasePlatform {\n acquireContext(canvas, aspectRatio) {\n        const context = canvas && canvas.getContext && canvas.getContext('2d');\n        if (context && context.canvas === canvas) {\n            initCanvas(canvas, aspectRatio);\n            return context;\n        }\n        return null;\n    }\n releaseContext(context) {\n        const canvas = context.canvas;\n        if (!canvas[EXPANDO_KEY]) {\n            return false;\n        }\n        const initial = canvas[EXPANDO_KEY].initial;\n        [\n            'height',\n            'width'\n        ].forEach((prop)=>{\n            const value = initial[prop];\n            if (isNullOrUndef(value)) {\n                canvas.removeAttribute(prop);\n            } else {\n                canvas.setAttribute(prop, value);\n            }\n        });\n        const style = initial.style || {};\n        Object.keys(style).forEach((key)=>{\n            canvas.style[key] = style[key];\n        });\n        canvas.width = canvas.width;\n        delete canvas[EXPANDO_KEY];\n        return true;\n    }\n addEventListener(chart, type, listener) {\n        this.removeEventListener(chart, type);\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const handlers = {\n            attach: createAttachObserver,\n            detach: createDetachObserver,\n            resize: createResizeObserver\n        };\n        const handler = handlers[type] || createProxyAndListen;\n        proxies[type] = handler(chart, type, listener);\n    }\n removeEventListener(chart, type) {\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const proxy = proxies[type];\n        if (!proxy) {\n            return;\n        }\n        const handlers = {\n            attach: releaseObserver,\n            detach: releaseObserver,\n            resize: releaseObserver\n        };\n        const handler = handlers[type] || removeListener;\n        handler(chart, type, proxy);\n        proxies[type] = undefined;\n    }\n    getDevicePixelRatio() {\n        return window.devicePixelRatio;\n    }\n getMaximumSize(canvas, width, height, aspectRatio) {\n        return getMaximumSize(canvas, width, height, aspectRatio);\n    }\n isAttached(canvas) {\n        const container = _getParentNode(canvas);\n        return !!(container && container.isConnected);\n    }\n}\n\nfunction _detectPlatform(canvas) {\n    if (!_isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n        return BasicPlatform;\n    }\n    return DomPlatform;\n}\n\nclass Element {\n    static defaults = {};\n    static defaultRoutes = undefined;\n    x;\n    y;\n    active = false;\n    options;\n    $animations;\n    tooltipPosition(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    hasValue() {\n        return isNumber(this.x) && isNumber(this.y);\n    }\n    getProps(props, final) {\n        const anims = this.$animations;\n        if (!final || !anims) {\n            // let's not create an object, if not needed\n            return this;\n        }\n        const ret = {};\n        props.forEach((prop)=>{\n            ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n        });\n        return ret;\n    }\n}\n\nfunction autoSkip(scale, ticks) {\n    const tickOpts = scale.options.ticks;\n    const determinedMaxTicks = determineMaxTicks(scale);\n    const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n    const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n    const numMajorIndices = majorIndices.length;\n    const first = majorIndices[0];\n    const last = majorIndices[numMajorIndices - 1];\n    const newTicks = [];\n    if (numMajorIndices > ticksLimit) {\n        skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n        return newTicks;\n    }\n    const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n    if (numMajorIndices > 0) {\n        let i, ilen;\n        const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n        skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n        for(i = 0, ilen = numMajorIndices - 1; i < ilen; i++){\n            skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n        }\n        skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n        return newTicks;\n    }\n    skip(ticks, newTicks, spacing);\n    return newTicks;\n}\nfunction determineMaxTicks(scale) {\n    const offset = scale.options.offset;\n    const tickLength = scale._tickSize();\n    const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n    const maxChart = scale._maxLength / tickLength;\n    return Math.floor(Math.min(maxScale, maxChart));\n}\n function calculateSpacing(majorIndices, ticks, ticksLimit) {\n    const evenMajorSpacing = getEvenSpacing(majorIndices);\n    const spacing = ticks.length / ticksLimit;\n    if (!evenMajorSpacing) {\n        return Math.max(spacing, 1);\n    }\n    const factors = _factorize(evenMajorSpacing);\n    for(let i = 0, ilen = factors.length - 1; i < ilen; i++){\n        const factor = factors[i];\n        if (factor > spacing) {\n            return factor;\n        }\n    }\n    return Math.max(spacing, 1);\n}\n function getMajorIndices(ticks) {\n    const result = [];\n    let i, ilen;\n    for(i = 0, ilen = ticks.length; i < ilen; i++){\n        if (ticks[i].major) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n function skipMajors(ticks, newTicks, majorIndices, spacing) {\n    let count = 0;\n    let next = majorIndices[0];\n    let i;\n    spacing = Math.ceil(spacing);\n    for(i = 0; i < ticks.length; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = majorIndices[count * spacing];\n        }\n    }\n}\n function skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n    const start = valueOrDefault(majorStart, 0);\n    const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n    let count = 0;\n    let length, i, next;\n    spacing = Math.ceil(spacing);\n    if (majorEnd) {\n        length = majorEnd - majorStart;\n        spacing = length / Math.floor(length / spacing);\n    }\n    next = start;\n    while(next < 0){\n        count++;\n        next = Math.round(start + count * spacing);\n    }\n    for(i = Math.max(start, 0); i < end; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = Math.round(start + count * spacing);\n        }\n    }\n}\n function getEvenSpacing(arr) {\n    const len = arr.length;\n    let i, diff;\n    if (len < 2) {\n        return false;\n    }\n    for(diff = arr[0], i = 1; i < len; ++i){\n        if (arr[i] - arr[i - 1] !== diff) {\n            return false;\n        }\n    }\n    return diff;\n}\n\nconst reverseAlign = (align)=>align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset)=>edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit)=>Math.min(maxTicksLimit || ticksLength, ticksLength);\n function sample(arr, numItems) {\n    const result = [];\n    const increment = arr.length / numItems;\n    const len = arr.length;\n    let i = 0;\n    for(; i < len; i += increment){\n        result.push(arr[Math.floor(i)]);\n    }\n    return result;\n}\n function getPixelForGridLine(scale, index, offsetGridLines) {\n    const length = scale.ticks.length;\n    const validIndex = Math.min(index, length - 1);\n    const start = scale._startPixel;\n    const end = scale._endPixel;\n    const epsilon = 1e-6;\n    let lineValue = scale.getPixelForTick(validIndex);\n    let offset;\n    if (offsetGridLines) {\n        if (length === 1) {\n            offset = Math.max(lineValue - start, end - lineValue);\n        } else if (index === 0) {\n            offset = (scale.getPixelForTick(1) - lineValue) / 2;\n        } else {\n            offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n        }\n        lineValue += validIndex < index ? offset : -offset;\n        if (lineValue < start - epsilon || lineValue > end + epsilon) {\n            return;\n        }\n    }\n    return lineValue;\n}\n function garbageCollect(caches, length) {\n    each(caches, (cache)=>{\n        const gc = cache.gc;\n        const gcLen = gc.length / 2;\n        let i;\n        if (gcLen > length) {\n            for(i = 0; i < gcLen; ++i){\n                delete cache.data[gc[i]];\n            }\n            gc.splice(0, gcLen);\n        }\n    });\n}\n function getTickMarkLength(options) {\n    return options.drawTicks ? options.tickLength : 0;\n}\n function getTitleHeight(options, fallback) {\n    if (!options.display) {\n        return 0;\n    }\n    const font = toFont(options.font, fallback);\n    const padding = toPadding(options.padding);\n    const lines = isArray(options.text) ? options.text.length : 1;\n    return lines * font.lineHeight + padding.height;\n}\nfunction createScaleContext(parent, scale) {\n    return createContext(parent, {\n        scale,\n        type: 'scale'\n    });\n}\nfunction createTickContext(parent, index, tick) {\n    return createContext(parent, {\n        tick,\n        index,\n        type: 'tick'\n    });\n}\nfunction titleAlign(align, position, reverse) {\n     let ret = _toLeftRightCenter(align);\n    if (reverse && position !== 'right' || !reverse && position === 'right') {\n        ret = reverseAlign(ret);\n    }\n    return ret;\n}\nfunction titleArgs(scale, offset, position, align) {\n    const { top , left , bottom , right , chart  } = scale;\n    const { chartArea , scales  } = chart;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n    const height = bottom - top;\n    const width = right - left;\n    if (scale.isHorizontal()) {\n        titleX = _alignStartEnd(align, left, right);\n        if (isObject(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n        } else if (position === 'center') {\n            titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n        } else {\n            titleY = offsetFromEdge(scale, position, offset);\n        }\n        maxWidth = right - left;\n    } else {\n        if (isObject(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n        } else if (position === 'center') {\n            titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n        } else {\n            titleX = offsetFromEdge(scale, position, offset);\n        }\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = position === 'left' ? -HALF_PI : HALF_PI;\n    }\n    return {\n        titleX,\n        titleY,\n        maxWidth,\n        rotation\n    };\n}\nclass Scale extends Element {\n    constructor(cfg){\n        super();\n         this.id = cfg.id;\n         this.type = cfg.type;\n         this.options = undefined;\n         this.ctx = cfg.ctx;\n         this.chart = cfg.chart;\n         this.top = undefined;\n         this.bottom = undefined;\n         this.left = undefined;\n         this.right = undefined;\n         this.width = undefined;\n         this.height = undefined;\n        this._margins = {\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        };\n         this.maxWidth = undefined;\n         this.maxHeight = undefined;\n         this.paddingTop = undefined;\n         this.paddingBottom = undefined;\n         this.paddingLeft = undefined;\n         this.paddingRight = undefined;\n         this.axis = undefined;\n         this.labelRotation = undefined;\n        this.min = undefined;\n        this.max = undefined;\n        this._range = undefined;\n         this.ticks = [];\n         this._gridLineItems = null;\n         this._labelItems = null;\n         this._labelSizes = null;\n        this._length = 0;\n        this._maxLength = 0;\n        this._longestTextCache = {};\n         this._startPixel = undefined;\n         this._endPixel = undefined;\n        this._reversePixels = false;\n        this._userMax = undefined;\n        this._userMin = undefined;\n        this._suggestedMax = undefined;\n        this._suggestedMin = undefined;\n        this._ticksLength = 0;\n        this._borderValue = 0;\n        this._cache = {};\n        this._dataLimitsCached = false;\n        this.$context = undefined;\n    }\n init(options) {\n        this.options = options.setContext(this.getContext());\n        this.axis = options.axis;\n        this._userMin = this.parse(options.min);\n        this._userMax = this.parse(options.max);\n        this._suggestedMin = this.parse(options.suggestedMin);\n        this._suggestedMax = this.parse(options.suggestedMax);\n    }\n parse(raw, index) {\n        return raw;\n    }\n getUserBounds() {\n        let { _userMin , _userMax , _suggestedMin , _suggestedMax  } = this;\n        _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n        _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n        _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n        _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n        return {\n            min: finiteOrDefault(_userMin, _suggestedMin),\n            max: finiteOrDefault(_userMax, _suggestedMax),\n            minDefined: isNumberFinite(_userMin),\n            maxDefined: isNumberFinite(_userMax)\n        };\n    }\n getMinMax(canStack) {\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n        let range;\n        if (minDefined && maxDefined) {\n            return {\n                min,\n                max\n            };\n        }\n        const metas = this.getMatchingVisibleMetas();\n        for(let i = 0, ilen = metas.length; i < ilen; ++i){\n            range = metas[i].controller.getMinMax(this, canStack);\n            if (!minDefined) {\n                min = Math.min(min, range.min);\n            }\n            if (!maxDefined) {\n                max = Math.max(max, range.max);\n            }\n        }\n        min = maxDefined && min > max ? max : min;\n        max = minDefined && min > max ? min : max;\n        return {\n            min: finiteOrDefault(min, finiteOrDefault(max, min)),\n            max: finiteOrDefault(max, finiteOrDefault(min, max))\n        };\n    }\n getPadding() {\n        return {\n            left: this.paddingLeft || 0,\n            top: this.paddingTop || 0,\n            right: this.paddingRight || 0,\n            bottom: this.paddingBottom || 0\n        };\n    }\n getTicks() {\n        return this.ticks;\n    }\n getLabels() {\n        const data = this.chart.data;\n        return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n    }\n getLabelItems(chartArea = this.chart.chartArea) {\n        const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n        return items;\n    }\n    beforeLayout() {\n        this._cache = {};\n        this._dataLimitsCached = false;\n    }\n    beforeUpdate() {\n        callback(this.options.beforeUpdate, [\n            this\n        ]);\n    }\n update(maxWidth, maxHeight, margins) {\n        const { beginAtZero , grace , ticks: tickOpts  } = this.options;\n        const sampleSize = tickOpts.sampleSize;\n        this.beforeUpdate();\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins = Object.assign({\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        }, margins);\n        this.ticks = null;\n        this._labelSizes = null;\n        this._gridLineItems = null;\n        this._labelItems = null;\n        this.beforeSetDimensions();\n        this.setDimensions();\n        this.afterSetDimensions();\n        this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\n        if (!this._dataLimitsCached) {\n            this.beforeDataLimits();\n            this.determineDataLimits();\n            this.afterDataLimits();\n            this._range = _addGrace(this, grace, beginAtZero);\n            this._dataLimitsCached = true;\n        }\n        this.beforeBuildTicks();\n        this.ticks = this.buildTicks() || [];\n        this.afterBuildTicks();\n        const samplingEnabled = sampleSize < this.ticks.length;\n        this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n        this.configure();\n        this.beforeCalculateLabelRotation();\n        this.calculateLabelRotation();\n        this.afterCalculateLabelRotation();\n        if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n            this.ticks = autoSkip(this, this.ticks);\n            this._labelSizes = null;\n            this.afterAutoSkip();\n        }\n        if (samplingEnabled) {\n            this._convertTicksToLabels(this.ticks);\n        }\n        this.beforeFit();\n        this.fit();\n        this.afterFit();\n        this.afterUpdate();\n    }\n configure() {\n        let reversePixels = this.options.reverse;\n        let startPixel, endPixel;\n        if (this.isHorizontal()) {\n            startPixel = this.left;\n            endPixel = this.right;\n        } else {\n            startPixel = this.top;\n            endPixel = this.bottom;\n            reversePixels = !reversePixels;\n        }\n        this._startPixel = startPixel;\n        this._endPixel = endPixel;\n        this._reversePixels = reversePixels;\n        this._length = endPixel - startPixel;\n        this._alignToPixels = this.options.alignToPixels;\n    }\n    afterUpdate() {\n        callback(this.options.afterUpdate, [\n            this\n        ]);\n    }\n    beforeSetDimensions() {\n        callback(this.options.beforeSetDimensions, [\n            this\n        ]);\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = 0;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = 0;\n            this.bottom = this.height;\n        }\n        this.paddingLeft = 0;\n        this.paddingTop = 0;\n        this.paddingRight = 0;\n        this.paddingBottom = 0;\n    }\n    afterSetDimensions() {\n        callback(this.options.afterSetDimensions, [\n            this\n        ]);\n    }\n    _callHooks(name) {\n        this.chart.notifyPlugins(name, this.getContext());\n        callback(this.options[name], [\n            this\n        ]);\n    }\n    beforeDataLimits() {\n        this._callHooks('beforeDataLimits');\n    }\n    determineDataLimits() {}\n    afterDataLimits() {\n        this._callHooks('afterDataLimits');\n    }\n    beforeBuildTicks() {\n        this._callHooks('beforeBuildTicks');\n    }\n buildTicks() {\n        return [];\n    }\n    afterBuildTicks() {\n        this._callHooks('afterBuildTicks');\n    }\n    beforeTickToLabelConversion() {\n        callback(this.options.beforeTickToLabelConversion, [\n            this\n        ]);\n    }\n generateTickLabels(ticks) {\n        const tickOpts = this.options.ticks;\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            tick = ticks[i];\n            tick.label = callback(tickOpts.callback, [\n                tick.value,\n                i,\n                ticks\n            ], this);\n        }\n    }\n    afterTickToLabelConversion() {\n        callback(this.options.afterTickToLabelConversion, [\n            this\n        ]);\n    }\n    beforeCalculateLabelRotation() {\n        callback(this.options.beforeCalculateLabelRotation, [\n            this\n        ]);\n    }\n    calculateLabelRotation() {\n        const options = this.options;\n        const tickOpts = options.ticks;\n        const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n        const minRotation = tickOpts.minRotation || 0;\n        const maxRotation = tickOpts.maxRotation;\n        let labelRotation = minRotation;\n        let tickWidth, maxHeight, maxLabelDiagonal;\n        if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n            this.labelRotation = minRotation;\n            return;\n        }\n        const labelSizes = this._getLabelSizes();\n        const maxLabelWidth = labelSizes.widest.width;\n        const maxLabelHeight = labelSizes.highest.height;\n        const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n        tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n        if (maxLabelWidth + 6 > tickWidth) {\n            tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n            maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n            maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n            labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));\n            labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n        }\n        this.labelRotation = labelRotation;\n    }\n    afterCalculateLabelRotation() {\n        callback(this.options.afterCalculateLabelRotation, [\n            this\n        ]);\n    }\n    afterAutoSkip() {}\n    beforeFit() {\n        callback(this.options.beforeFit, [\n            this\n        ]);\n    }\n    fit() {\n        const minSize = {\n            width: 0,\n            height: 0\n        };\n        const { chart , options: { ticks: tickOpts , title: titleOpts , grid: gridOpts  }  } = this;\n        const display = this._isVisible();\n        const isHorizontal = this.isHorizontal();\n        if (display) {\n            const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n            if (isHorizontal) {\n                minSize.width = this.maxWidth;\n                minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n            } else {\n                minSize.height = this.maxHeight;\n                minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n            }\n            if (tickOpts.display && this.ticks.length) {\n                const { first , last , widest , highest  } = this._getLabelSizes();\n                const tickPadding = tickOpts.padding * 2;\n                const angleRadians = toRadians(this.labelRotation);\n                const cos = Math.cos(angleRadians);\n                const sin = Math.sin(angleRadians);\n                if (isHorizontal) {\n                    const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n                    minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n                } else {\n                    const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n                    minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n                }\n                this._calculatePadding(first, last, sin, cos);\n            }\n        }\n        this._handleMargins();\n        if (isHorizontal) {\n            this.width = this._length = chart.width - this._margins.left - this._margins.right;\n            this.height = minSize.height;\n        } else {\n            this.width = minSize.width;\n            this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n        }\n    }\n    _calculatePadding(first, last, sin, cos) {\n        const { ticks: { align , padding  } , position  } = this.options;\n        const isRotated = this.labelRotation !== 0;\n        const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n        if (this.isHorizontal()) {\n            const offsetLeft = this.getPixelForTick(0) - this.left;\n            const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n            let paddingLeft = 0;\n            let paddingRight = 0;\n            if (isRotated) {\n                if (labelsBelowTicks) {\n                    paddingLeft = cos * first.width;\n                    paddingRight = sin * last.height;\n                } else {\n                    paddingLeft = sin * first.height;\n                    paddingRight = cos * last.width;\n                }\n            } else if (align === 'start') {\n                paddingRight = last.width;\n            } else if (align === 'end') {\n                paddingLeft = first.width;\n            } else if (align !== 'inner') {\n                paddingLeft = first.width / 2;\n                paddingRight = last.width / 2;\n            }\n            this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n            this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n        } else {\n            let paddingTop = last.height / 2;\n            let paddingBottom = first.height / 2;\n            if (align === 'start') {\n                paddingTop = 0;\n                paddingBottom = first.height;\n            } else if (align === 'end') {\n                paddingTop = last.height;\n                paddingBottom = 0;\n            }\n            this.paddingTop = paddingTop + padding;\n            this.paddingBottom = paddingBottom + padding;\n        }\n    }\n _handleMargins() {\n        if (this._margins) {\n            this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n            this._margins.top = Math.max(this.paddingTop, this._margins.top);\n            this._margins.right = Math.max(this.paddingRight, this._margins.right);\n            this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n        }\n    }\n    afterFit() {\n        callback(this.options.afterFit, [\n            this\n        ]);\n    }\n isHorizontal() {\n        const { axis , position  } = this.options;\n        return position === 'top' || position === 'bottom' || axis === 'x';\n    }\n isFullSize() {\n        return this.options.fullSize;\n    }\n _convertTicksToLabels(ticks) {\n        this.beforeTickToLabelConversion();\n        this.generateTickLabels(ticks);\n        let i, ilen;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            if (isNullOrUndef(ticks[i].label)) {\n                ticks.splice(i, 1);\n                ilen--;\n                i--;\n            }\n        }\n        this.afterTickToLabelConversion();\n    }\n _getLabelSizes() {\n        let labelSizes = this._labelSizes;\n        if (!labelSizes) {\n            const sampleSize = this.options.ticks.sampleSize;\n            let ticks = this.ticks;\n            if (sampleSize < ticks.length) {\n                ticks = sample(ticks, sampleSize);\n            }\n            this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n        }\n        return labelSizes;\n    }\n _computeLabelSizes(ticks, length, maxTicksLimit) {\n        const { ctx , _longestTextCache: caches  } = this;\n        const widths = [];\n        const heights = [];\n        const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n        let widestLabelSize = 0;\n        let highestLabelSize = 0;\n        let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n        for(i = 0; i < length; i += increment){\n            label = ticks[i].label;\n            tickFont = this._resolveTickFontOptions(i);\n            ctx.font = fontString = tickFont.string;\n            cache = caches[fontString] = caches[fontString] || {\n                data: {},\n                gc: []\n            };\n            lineHeight = tickFont.lineHeight;\n            width = height = 0;\n            if (!isNullOrUndef(label) && !isArray(label)) {\n                width = _measureText(ctx, cache.data, cache.gc, width, label);\n                height = lineHeight;\n            } else if (isArray(label)) {\n                for(j = 0, jlen = label.length; j < jlen; ++j){\n                    nestedLabel =  label[j];\n                    if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n                        width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n                        height += lineHeight;\n                    }\n                }\n            }\n            widths.push(width);\n            heights.push(height);\n            widestLabelSize = Math.max(width, widestLabelSize);\n            highestLabelSize = Math.max(height, highestLabelSize);\n        }\n        garbageCollect(caches, length);\n        const widest = widths.indexOf(widestLabelSize);\n        const highest = heights.indexOf(highestLabelSize);\n        const valueAt = (idx)=>({\n                width: widths[idx] || 0,\n                height: heights[idx] || 0\n            });\n        return {\n            first: valueAt(0),\n            last: valueAt(length - 1),\n            widest: valueAt(widest),\n            highest: valueAt(highest),\n            widths,\n            heights\n        };\n    }\n getLabelForValue(value) {\n        return value;\n    }\n getPixelForValue(value, index) {\n        return NaN;\n    }\n getValueForPixel(pixel) {}\n getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n getPixelForDecimal(decimal) {\n        if (this._reversePixels) {\n            decimal = 1 - decimal;\n        }\n        const pixel = this._startPixel + decimal * this._length;\n        return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n    }\n getDecimalForPixel(pixel) {\n        const decimal = (pixel - this._startPixel) / this._length;\n        return this._reversePixels ? 1 - decimal : decimal;\n    }\n getBasePixel() {\n        return this.getPixelForValue(this.getBaseValue());\n    }\n getBaseValue() {\n        const { min , max  } = this;\n        return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n    }\n getContext(index) {\n        const ticks = this.ticks || [];\n        if (index >= 0 && index < ticks.length) {\n            const tick = ticks[index];\n            return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));\n        }\n        return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));\n    }\n _tickSize() {\n        const optionTicks = this.options.ticks;\n        const rot = toRadians(this.labelRotation);\n        const cos = Math.abs(Math.cos(rot));\n        const sin = Math.abs(Math.sin(rot));\n        const labelSizes = this._getLabelSizes();\n        const padding = optionTicks.autoSkipPadding || 0;\n        const w = labelSizes ? labelSizes.widest.width + padding : 0;\n        const h = labelSizes ? labelSizes.highest.height + padding : 0;\n        return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n    }\n _isVisible() {\n        const display = this.options.display;\n        if (display !== 'auto') {\n            return !!display;\n        }\n        return this.getMatchingVisibleMetas().length > 0;\n    }\n _computeGridLineItems(chartArea) {\n        const axis = this.axis;\n        const chart = this.chart;\n        const options = this.options;\n        const { grid , position , border  } = options;\n        const offset = grid.offset;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const ticksLength = ticks.length + (offset ? 1 : 0);\n        const tl = getTickMarkLength(grid);\n        const items = [];\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = borderOpts.display ? borderOpts.width : 0;\n        const axisHalfWidth = axisWidth / 2;\n        const alignBorderValue = function(pixel) {\n            return _alignPixel(chart, pixel, axisWidth);\n        };\n        let borderValue, i, lineValue, alignedLineValue;\n        let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n        if (position === 'top') {\n            borderValue = alignBorderValue(this.bottom);\n            ty1 = this.bottom - tl;\n            ty2 = borderValue - axisHalfWidth;\n            y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n            y2 = chartArea.bottom;\n        } else if (position === 'bottom') {\n            borderValue = alignBorderValue(this.top);\n            y1 = chartArea.top;\n            y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = this.top + tl;\n        } else if (position === 'left') {\n            borderValue = alignBorderValue(this.right);\n            tx1 = this.right - tl;\n            tx2 = borderValue - axisHalfWidth;\n            x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n            x2 = chartArea.right;\n        } else if (position === 'right') {\n            borderValue = alignBorderValue(this.left);\n            x1 = chartArea.left;\n            x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n            tx1 = borderValue + axisHalfWidth;\n            tx2 = this.left + tl;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            y1 = chartArea.top;\n            y2 = chartArea.bottom;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = ty1 + tl;\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            tx1 = borderValue - axisHalfWidth;\n            tx2 = tx1 - tl;\n            x1 = chartArea.left;\n            x2 = chartArea.right;\n        }\n        const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n        const step = Math.max(1, Math.ceil(ticksLength / limit));\n        for(i = 0; i < ticksLength; i += step){\n            const context = this.getContext(i);\n            const optsAtIndex = grid.setContext(context);\n            const optsAtIndexBorder = border.setContext(context);\n            const lineWidth = optsAtIndex.lineWidth;\n            const lineColor = optsAtIndex.color;\n            const borderDash = optsAtIndexBorder.dash || [];\n            const borderDashOffset = optsAtIndexBorder.dashOffset;\n            const tickWidth = optsAtIndex.tickWidth;\n            const tickColor = optsAtIndex.tickColor;\n            const tickBorderDash = optsAtIndex.tickBorderDash || [];\n            const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n            lineValue = getPixelForGridLine(this, i, offset);\n            if (lineValue === undefined) {\n                continue;\n            }\n            alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n            if (isHorizontal) {\n                tx1 = tx2 = x1 = x2 = alignedLineValue;\n            } else {\n                ty1 = ty2 = y1 = y2 = alignedLineValue;\n            }\n            items.push({\n                tx1,\n                ty1,\n                tx2,\n                ty2,\n                x1,\n                y1,\n                x2,\n                y2,\n                width: lineWidth,\n                color: lineColor,\n                borderDash,\n                borderDashOffset,\n                tickWidth,\n                tickColor,\n                tickBorderDash,\n                tickBorderDashOffset\n            });\n        }\n        this._ticksLength = ticksLength;\n        this._borderValue = borderValue;\n        return items;\n    }\n _computeLabelItems(chartArea) {\n        const axis = this.axis;\n        const options = this.options;\n        const { position , ticks: optionTicks  } = options;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const { align , crossAlign , padding , mirror  } = optionTicks;\n        const tl = getTickMarkLength(options.grid);\n        const tickAndPadding = tl + padding;\n        const hTickAndPadding = mirror ? -padding : tickAndPadding;\n        const rotation = -toRadians(this.labelRotation);\n        const items = [];\n        let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n        let textBaseline = 'middle';\n        if (position === 'top') {\n            y = this.bottom - hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'bottom') {\n            y = this.top + hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'left') {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (position === 'right') {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n            }\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                x = this.chart.scales[positionAxisID].getPixelForValue(value);\n            }\n            textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n        }\n        if (axis === 'y') {\n            if (align === 'start') {\n                textBaseline = 'top';\n            } else if (align === 'end') {\n                textBaseline = 'bottom';\n            }\n        }\n        const labelSizes = this._getLabelSizes();\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            label = tick.label;\n            const optsAtIndex = optionTicks.setContext(this.getContext(i));\n            pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n            font = this._resolveTickFontOptions(i);\n            lineHeight = font.lineHeight;\n            lineCount = isArray(label) ? label.length : 1;\n            const halfCount = lineCount / 2;\n            const color = optsAtIndex.color;\n            const strokeColor = optsAtIndex.textStrokeColor;\n            const strokeWidth = optsAtIndex.textStrokeWidth;\n            let tickTextAlign = textAlign;\n            if (isHorizontal) {\n                x = pixel;\n                if (textAlign === 'inner') {\n                    if (i === ilen - 1) {\n                        tickTextAlign = !this.options.reverse ? 'right' : 'left';\n                    } else if (i === 0) {\n                        tickTextAlign = !this.options.reverse ? 'left' : 'right';\n                    } else {\n                        tickTextAlign = 'center';\n                    }\n                }\n                if (position === 'top') {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = -lineCount * lineHeight + lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n                    } else {\n                        textOffset = -labelSizes.highest.height + lineHeight / 2;\n                    }\n                } else {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n                    } else {\n                        textOffset = labelSizes.highest.height - lineCount * lineHeight;\n                    }\n                }\n                if (mirror) {\n                    textOffset *= -1;\n                }\n                if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n                    x += lineHeight / 2 * Math.sin(rotation);\n                }\n            } else {\n                y = pixel;\n                textOffset = (1 - lineCount) * lineHeight / 2;\n            }\n            let backdrop;\n            if (optsAtIndex.showLabelBackdrop) {\n                const labelPadding = toPadding(optsAtIndex.backdropPadding);\n                const height = labelSizes.heights[i];\n                const width = labelSizes.widths[i];\n                let top = textOffset - labelPadding.top;\n                let left = 0 - labelPadding.left;\n                switch(textBaseline){\n                    case 'middle':\n                        top -= height / 2;\n                        break;\n                    case 'bottom':\n                        top -= height;\n                        break;\n                }\n                switch(textAlign){\n                    case 'center':\n                        left -= width / 2;\n                        break;\n                    case 'right':\n                        left -= width;\n                        break;\n                    case 'inner':\n                        if (i === ilen - 1) {\n                            left -= width;\n                        } else if (i > 0) {\n                            left -= width / 2;\n                        }\n                        break;\n                }\n                backdrop = {\n                    left,\n                    top,\n                    width: width + labelPadding.width,\n                    height: height + labelPadding.height,\n                    color: optsAtIndex.backdropColor\n                };\n            }\n            items.push({\n                label,\n                font,\n                textOffset,\n                options: {\n                    rotation,\n                    color,\n                    strokeColor,\n                    strokeWidth,\n                    textAlign: tickTextAlign,\n                    textBaseline,\n                    translation: [\n                        x,\n                        y\n                    ],\n                    backdrop\n                }\n            });\n        }\n        return items;\n    }\n    _getXAxisLabelAlignment() {\n        const { position , ticks  } = this.options;\n        const rotation = -toRadians(this.labelRotation);\n        if (rotation) {\n            return position === 'top' ? 'left' : 'right';\n        }\n        let align = 'center';\n        if (ticks.align === 'start') {\n            align = 'left';\n        } else if (ticks.align === 'end') {\n            align = 'right';\n        } else if (ticks.align === 'inner') {\n            align = 'inner';\n        }\n        return align;\n    }\n    _getYAxisLabelAlignment(tl) {\n        const { position , ticks: { crossAlign , mirror , padding  }  } = this.options;\n        const labelSizes = this._getLabelSizes();\n        const tickAndPadding = tl + padding;\n        const widest = labelSizes.widest.width;\n        let textAlign;\n        let x;\n        if (position === 'left') {\n            if (mirror) {\n                x = this.right + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x += widest;\n                }\n            } else {\n                x = this.right - tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x = this.left;\n                }\n            }\n        } else if (position === 'right') {\n            if (mirror) {\n                x = this.left + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x -= widest;\n                }\n            } else {\n                x = this.left + tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x = this.right;\n                }\n            }\n        } else {\n            textAlign = 'right';\n        }\n        return {\n            textAlign,\n            x\n        };\n    }\n _computeLabelArea() {\n        if (this.options.ticks.mirror) {\n            return;\n        }\n        const chart = this.chart;\n        const position = this.options.position;\n        if (position === 'left' || position === 'right') {\n            return {\n                top: 0,\n                left: this.left,\n                bottom: chart.height,\n                right: this.right\n            };\n        }\n        if (position === 'top' || position === 'bottom') {\n            return {\n                top: this.top,\n                left: 0,\n                bottom: this.bottom,\n                right: chart.width\n            };\n        }\n    }\n drawBackground() {\n        const { ctx , options: { backgroundColor  } , left , top , width , height  } = this;\n        if (backgroundColor) {\n            ctx.save();\n            ctx.fillStyle = backgroundColor;\n            ctx.fillRect(left, top, width, height);\n            ctx.restore();\n        }\n    }\n    getLineWidthForValue(value) {\n        const grid = this.options.grid;\n        if (!this._isVisible() || !grid.display) {\n            return 0;\n        }\n        const ticks = this.ticks;\n        const index = ticks.findIndex((t)=>t.value === value);\n        if (index >= 0) {\n            const opts = grid.setContext(this.getContext(index));\n            return opts.lineWidth;\n        }\n        return 0;\n    }\n drawGrid(chartArea) {\n        const grid = this.options.grid;\n        const ctx = this.ctx;\n        const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n        let i, ilen;\n        const drawLine = (p1, p2, style)=>{\n            if (!style.width || !style.color) {\n                return;\n            }\n            ctx.save();\n            ctx.lineWidth = style.width;\n            ctx.strokeStyle = style.color;\n            ctx.setLineDash(style.borderDash || []);\n            ctx.lineDashOffset = style.borderDashOffset;\n            ctx.beginPath();\n            ctx.moveTo(p1.x, p1.y);\n            ctx.lineTo(p2.x, p2.y);\n            ctx.stroke();\n            ctx.restore();\n        };\n        if (grid.display) {\n            for(i = 0, ilen = items.length; i < ilen; ++i){\n                const item = items[i];\n                if (grid.drawOnChartArea) {\n                    drawLine({\n                        x: item.x1,\n                        y: item.y1\n                    }, {\n                        x: item.x2,\n                        y: item.y2\n                    }, item);\n                }\n                if (grid.drawTicks) {\n                    drawLine({\n                        x: item.tx1,\n                        y: item.ty1\n                    }, {\n                        x: item.tx2,\n                        y: item.ty2\n                    }, {\n                        color: item.tickColor,\n                        width: item.tickWidth,\n                        borderDash: item.tickBorderDash,\n                        borderDashOffset: item.tickBorderDashOffset\n                    });\n                }\n            }\n        }\n    }\n drawBorder() {\n        const { chart , ctx , options: { border , grid  }  } = this;\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = border.display ? borderOpts.width : 0;\n        if (!axisWidth) {\n            return;\n        }\n        const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n        const borderValue = this._borderValue;\n        let x1, x2, y1, y2;\n        if (this.isHorizontal()) {\n            x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n            x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n            y1 = y2 = borderValue;\n        } else {\n            y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n            y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n            x1 = x2 = borderValue;\n        }\n        ctx.save();\n        ctx.lineWidth = borderOpts.width;\n        ctx.strokeStyle = borderOpts.color;\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.stroke();\n        ctx.restore();\n    }\n drawLabels(chartArea) {\n        const optionTicks = this.options.ticks;\n        if (!optionTicks.display) {\n            return;\n        }\n        const ctx = this.ctx;\n        const area = this._computeLabelArea();\n        if (area) {\n            clipArea(ctx, area);\n        }\n        const items = this.getLabelItems(chartArea);\n        for (const item of items){\n            const renderTextOptions = item.options;\n            const tickFont = item.font;\n            const label = item.label;\n            const y = item.textOffset;\n            renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n        }\n        if (area) {\n            unclipArea(ctx);\n        }\n    }\n drawTitle() {\n        const { ctx , options: { position , title , reverse  }  } = this;\n        if (!title.display) {\n            return;\n        }\n        const font = toFont(title.font);\n        const padding = toPadding(title.padding);\n        const align = title.align;\n        let offset = font.lineHeight / 2;\n        if (position === 'bottom' || position === 'center' || isObject(position)) {\n            offset += padding.bottom;\n            if (isArray(title.text)) {\n                offset += font.lineHeight * (title.text.length - 1);\n            }\n        } else {\n            offset += padding.top;\n        }\n        const { titleX , titleY , maxWidth , rotation  } = titleArgs(this, offset, position, align);\n        renderText(ctx, title.text, 0, 0, font, {\n            color: title.color,\n            maxWidth,\n            rotation,\n            textAlign: titleAlign(align, position, reverse),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n    draw(chartArea) {\n        if (!this._isVisible()) {\n            return;\n        }\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawBorder();\n        this.drawTitle();\n        this.drawLabels(chartArea);\n    }\n _layers() {\n        const opts = this.options;\n        const tz = opts.ticks && opts.ticks.z || 0;\n        const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n        const bz = valueOrDefault(opts.border && opts.border.z, 0);\n        if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n            return [\n                {\n                    z: tz,\n                    draw: (chartArea)=>{\n                        this.draw(chartArea);\n                    }\n                }\n            ];\n        }\n        return [\n            {\n                z: gz,\n                draw: (chartArea)=>{\n                    this.drawBackground();\n                    this.drawGrid(chartArea);\n                    this.drawTitle();\n                }\n            },\n            {\n                z: bz,\n                draw: ()=>{\n                    this.drawBorder();\n                }\n            },\n            {\n                z: tz,\n                draw: (chartArea)=>{\n                    this.drawLabels(chartArea);\n                }\n            }\n        ];\n    }\n getMatchingVisibleMetas(type) {\n        const metas = this.chart.getSortedVisibleDatasetMetas();\n        const axisID = this.axis + 'AxisID';\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            const meta = metas[i];\n            if (meta[axisID] === this.id && (!type || meta.type === type)) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n _resolveTickFontOptions(index) {\n        const opts = this.options.ticks.setContext(this.getContext(index));\n        return toFont(opts.font);\n    }\n _maxDigits() {\n        const fontSize = this._resolveTickFontOptions(0).lineHeight;\n        return (this.isHorizontal() ? this.width : this.height) / fontSize;\n    }\n}\n\nclass TypedRegistry {\n    constructor(type, scope, override){\n        this.type = type;\n        this.scope = scope;\n        this.override = override;\n        this.items = Object.create(null);\n    }\n    isForType(type) {\n        return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n    }\n register(item) {\n        const proto = Object.getPrototypeOf(item);\n        let parentScope;\n        if (isIChartComponent(proto)) {\n            parentScope = this.register(proto);\n        }\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope + '.' + id;\n        if (!id) {\n            throw new Error('class does not have id: ' + item);\n        }\n        if (id in items) {\n            return scope;\n        }\n        items[id] = item;\n        registerDefaults(item, scope, parentScope);\n        if (this.override) {\n            defaults.override(item.id, item.overrides);\n        }\n        return scope;\n    }\n get(id) {\n        return this.items[id];\n    }\n unregister(item) {\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope;\n        if (id in items) {\n            delete items[id];\n        }\n        if (scope && id in defaults[scope]) {\n            delete defaults[scope][id];\n            if (this.override) {\n                delete overrides[id];\n            }\n        }\n    }\n}\nfunction registerDefaults(item, scope, parentScope) {\n    const itemDefaults = merge(Object.create(null), [\n        parentScope ? defaults.get(parentScope) : {},\n        defaults.get(scope),\n        item.defaults\n    ]);\n    defaults.set(scope, itemDefaults);\n    if (item.defaultRoutes) {\n        routeDefaults(scope, item.defaultRoutes);\n    }\n    if (item.descriptors) {\n        defaults.describe(scope, item.descriptors);\n    }\n}\nfunction routeDefaults(scope, routes) {\n    Object.keys(routes).forEach((property)=>{\n        const propertyParts = property.split('.');\n        const sourceName = propertyParts.pop();\n        const sourceScope = [\n            scope\n        ].concat(propertyParts).join('.');\n        const parts = routes[property].split('.');\n        const targetName = parts.pop();\n        const targetScope = parts.join('.');\n        defaults.route(sourceScope, sourceName, targetScope, targetName);\n    });\n}\nfunction isIChartComponent(proto) {\n    return 'id' in proto && 'defaults' in proto;\n}\n\nclass Registry {\n    constructor(){\n        this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n        this.elements = new TypedRegistry(Element, 'elements');\n        this.plugins = new TypedRegistry(Object, 'plugins');\n        this.scales = new TypedRegistry(Scale, 'scales');\n        this._typedRegistries = [\n            this.controllers,\n            this.scales,\n            this.elements\n        ];\n    }\n add(...args) {\n        this._each('register', args);\n    }\n    remove(...args) {\n        this._each('unregister', args);\n    }\n addControllers(...args) {\n        this._each('register', args, this.controllers);\n    }\n addElements(...args) {\n        this._each('register', args, this.elements);\n    }\n addPlugins(...args) {\n        this._each('register', args, this.plugins);\n    }\n addScales(...args) {\n        this._each('register', args, this.scales);\n    }\n getController(id) {\n        return this._get(id, this.controllers, 'controller');\n    }\n getElement(id) {\n        return this._get(id, this.elements, 'element');\n    }\n getPlugin(id) {\n        return this._get(id, this.plugins, 'plugin');\n    }\n getScale(id) {\n        return this._get(id, this.scales, 'scale');\n    }\n removeControllers(...args) {\n        this._each('unregister', args, this.controllers);\n    }\n removeElements(...args) {\n        this._each('unregister', args, this.elements);\n    }\n removePlugins(...args) {\n        this._each('unregister', args, this.plugins);\n    }\n removeScales(...args) {\n        this._each('unregister', args, this.scales);\n    }\n _each(method, args, typedRegistry) {\n        [\n            ...args\n        ].forEach((arg)=>{\n            const reg = typedRegistry || this._getRegistryForType(arg);\n            if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {\n                this._exec(method, reg, arg);\n            } else {\n                each(arg, (item)=>{\n                    const itemReg = typedRegistry || this._getRegistryForType(item);\n                    this._exec(method, itemReg, item);\n                });\n            }\n        });\n    }\n _exec(method, registry, component) {\n        const camelMethod = _capitalize(method);\n        callback(component['before' + camelMethod], [], component);\n        registry[method](component);\n        callback(component['after' + camelMethod], [], component);\n    }\n _getRegistryForType(type) {\n        for(let i = 0; i < this._typedRegistries.length; i++){\n            const reg = this._typedRegistries[i];\n            if (reg.isForType(type)) {\n                return reg;\n            }\n        }\n        return this.plugins;\n    }\n _get(id, typedRegistry, type) {\n        const item = typedRegistry.get(id);\n        if (item === undefined) {\n            throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n        }\n        return item;\n    }\n}\nvar registry = /* #__PURE__ */ new Registry();\n\nclass PluginService {\n    constructor(){\n        this._init = [];\n    }\n notify(chart, hook, args, filter) {\n        if (hook === 'beforeInit') {\n            this._init = this._createDescriptors(chart, true);\n            this._notify(this._init, chart, 'install');\n        }\n        const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n        const result = this._notify(descriptors, chart, hook, args);\n        if (hook === 'afterDestroy') {\n            this._notify(descriptors, chart, 'stop');\n            this._notify(this._init, chart, 'uninstall');\n        }\n        return result;\n    }\n _notify(descriptors, chart, hook, args) {\n        args = args || {};\n        for (const descriptor of descriptors){\n            const plugin = descriptor.plugin;\n            const method = plugin[hook];\n            const params = [\n                chart,\n                args,\n                descriptor.options\n            ];\n            if (callback(method, params, plugin) === false && args.cancelable) {\n                return false;\n            }\n        }\n        return true;\n    }\n    invalidate() {\n        if (!isNullOrUndef(this._cache)) {\n            this._oldCache = this._cache;\n            this._cache = undefined;\n        }\n    }\n _descriptors(chart) {\n        if (this._cache) {\n            return this._cache;\n        }\n        const descriptors = this._cache = this._createDescriptors(chart);\n        this._notifyStateChanges(chart);\n        return descriptors;\n    }\n    _createDescriptors(chart, all) {\n        const config = chart && chart.config;\n        const options = valueOrDefault(config.options && config.options.plugins, {});\n        const plugins = allPlugins(config);\n        return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n    }\n _notifyStateChanges(chart) {\n        const previousDescriptors = this._oldCache || [];\n        const descriptors = this._cache;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.plugin.id === y.plugin.id));\n        this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n        this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n    }\n}\n function allPlugins(config) {\n    const localIds = {};\n    const plugins = [];\n    const keys = Object.keys(registry.plugins.items);\n    for(let i = 0; i < keys.length; i++){\n        plugins.push(registry.getPlugin(keys[i]));\n    }\n    const local = config.plugins || [];\n    for(let i = 0; i < local.length; i++){\n        const plugin = local[i];\n        if (plugins.indexOf(plugin) === -1) {\n            plugins.push(plugin);\n            localIds[plugin.id] = true;\n        }\n    }\n    return {\n        plugins,\n        localIds\n    };\n}\nfunction getOpts(options, all) {\n    if (!all && options === false) {\n        return null;\n    }\n    if (options === true) {\n        return {};\n    }\n    return options;\n}\nfunction createDescriptors(chart, { plugins , localIds  }, options, all) {\n    const result = [];\n    const context = chart.getContext();\n    for (const plugin of plugins){\n        const id = plugin.id;\n        const opts = getOpts(options[id], all);\n        if (opts === null) {\n            continue;\n        }\n        result.push({\n            plugin,\n            options: pluginOpts(chart.config, {\n                plugin,\n                local: localIds[id]\n            }, opts, context)\n        });\n    }\n    return result;\n}\nfunction pluginOpts(config, { plugin , local  }, opts, context) {\n    const keys = config.pluginScopeKeys(plugin);\n    const scopes = config.getOptionScopes(opts, keys);\n    if (local && plugin.defaults) {\n        scopes.push(plugin.defaults);\n    }\n    return config.createResolver(scopes, context, [\n        ''\n    ], {\n        scriptable: false,\n        indexable: false,\n        allKeys: true\n    });\n}\n\nfunction getIndexAxis(type, options) {\n    const datasetDefaults = defaults.datasets[type] || {};\n    const datasetOptions = (options.datasets || {})[type] || {};\n    return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n    let axis = id;\n    if (id === '_index_') {\n        axis = indexAxis;\n    } else if (id === '_value_') {\n        axis = indexAxis === 'x' ? 'y' : 'x';\n    }\n    return axis;\n}\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n    return axis === indexAxis ? '_index_' : '_value_';\n}\nfunction idMatchesAxis(id) {\n    if (id === 'x' || id === 'y' || id === 'r') {\n        return id;\n    }\n}\nfunction axisFromPosition(position) {\n    if (position === 'top' || position === 'bottom') {\n        return 'x';\n    }\n    if (position === 'left' || position === 'right') {\n        return 'y';\n    }\n}\nfunction determineAxis(id, ...scaleOptions) {\n    if (idMatchesAxis(id)) {\n        return id;\n    }\n    for (const opts of scaleOptions){\n        const axis = opts.axis || axisFromPosition(opts.position) || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n        if (axis) {\n            return axis;\n        }\n    }\n    throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\nfunction getAxisFromDataset(id, axis, dataset) {\n    if (dataset[axis + 'AxisID'] === id) {\n        return {\n            axis\n        };\n    }\n}\nfunction retrieveAxisFromDatasets(id, config) {\n    if (config.data && config.data.datasets) {\n        const boundDs = config.data.datasets.filter((d)=>d.xAxisID === id || d.yAxisID === id);\n        if (boundDs.length) {\n            return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n        }\n    }\n    return {};\n}\nfunction mergeScaleConfig(config, options) {\n    const chartDefaults = overrides[config.type] || {\n        scales: {}\n    };\n    const configScales = options.scales || {};\n    const chartIndexAxis = getIndexAxis(config.type, options);\n    const scales = Object.create(null);\n    Object.keys(configScales).forEach((id)=>{\n        const scaleConf = configScales[id];\n        if (!isObject(scaleConf)) {\n            return console.error(`Invalid scale configuration for scale: ${id}`);\n        }\n        if (scaleConf._proxy) {\n            return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n        }\n        const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n        const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n        const defaultScaleOptions = chartDefaults.scales || {};\n        scales[id] = mergeIf(Object.create(null), [\n            {\n                axis\n            },\n            scaleConf,\n            defaultScaleOptions[axis],\n            defaultScaleOptions[defaultId]\n        ]);\n    });\n    config.data.datasets.forEach((dataset)=>{\n        const type = dataset.type || config.type;\n        const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n        const datasetDefaults = overrides[type] || {};\n        const defaultScaleOptions = datasetDefaults.scales || {};\n        Object.keys(defaultScaleOptions).forEach((defaultID)=>{\n            const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n            const id = dataset[axis + 'AxisID'] || axis;\n            scales[id] = scales[id] || Object.create(null);\n            mergeIf(scales[id], [\n                {\n                    axis\n                },\n                configScales[id],\n                defaultScaleOptions[defaultID]\n            ]);\n        });\n    });\n    Object.keys(scales).forEach((key)=>{\n        const scale = scales[key];\n        mergeIf(scale, [\n            defaults.scales[scale.type],\n            defaults.scale\n        ]);\n    });\n    return scales;\n}\nfunction initOptions(config) {\n    const options = config.options || (config.options = {});\n    options.plugins = valueOrDefault(options.plugins, {});\n    options.scales = mergeScaleConfig(config, options);\n}\nfunction initData(data) {\n    data = data || {};\n    data.datasets = data.datasets || [];\n    data.labels = data.labels || [];\n    return data;\n}\nfunction initConfig(config) {\n    config = config || {};\n    config.data = initData(config.data);\n    initOptions(config);\n    return config;\n}\nconst keyCache = new Map();\nconst keysCached = new Set();\nfunction cachedKeys(cacheKey, generate) {\n    let keys = keyCache.get(cacheKey);\n    if (!keys) {\n        keys = generate();\n        keyCache.set(cacheKey, keys);\n        keysCached.add(keys);\n    }\n    return keys;\n}\nconst addIfFound = (set, obj, key)=>{\n    const opts = resolveObjectKey(obj, key);\n    if (opts !== undefined) {\n        set.add(opts);\n    }\n};\nclass Config {\n    constructor(config){\n        this._config = initConfig(config);\n        this._scopeCache = new Map();\n        this._resolverCache = new Map();\n    }\n    get platform() {\n        return this._config.platform;\n    }\n    get type() {\n        return this._config.type;\n    }\n    set type(type) {\n        this._config.type = type;\n    }\n    get data() {\n        return this._config.data;\n    }\n    set data(data) {\n        this._config.data = initData(data);\n    }\n    get options() {\n        return this._config.options;\n    }\n    set options(options) {\n        this._config.options = options;\n    }\n    get plugins() {\n        return this._config.plugins;\n    }\n    update() {\n        const config = this._config;\n        this.clearCache();\n        initOptions(config);\n    }\n    clearCache() {\n        this._scopeCache.clear();\n        this._resolverCache.clear();\n    }\n datasetScopeKeys(datasetType) {\n        return cachedKeys(datasetType, ()=>[\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetAnimationScopeKeys(datasetType, transition) {\n        return cachedKeys(`${datasetType}.transition.${transition}`, ()=>[\n                [\n                    `datasets.${datasetType}.transitions.${transition}`,\n                    `transitions.${transition}`\n                ],\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetElementScopeKeys(datasetType, elementType) {\n        return cachedKeys(`${datasetType}-${elementType}`, ()=>[\n                [\n                    `datasets.${datasetType}.elements.${elementType}`,\n                    `datasets.${datasetType}`,\n                    `elements.${elementType}`,\n                    ''\n                ]\n            ]);\n    }\n pluginScopeKeys(plugin) {\n        const id = plugin.id;\n        const type = this.type;\n        return cachedKeys(`${type}-plugin-${id}`, ()=>[\n                [\n                    `plugins.${id}`,\n                    ...plugin.additionalOptionScopes || []\n                ]\n            ]);\n    }\n _cachedScopes(mainScope, resetCache) {\n        const _scopeCache = this._scopeCache;\n        let cache = _scopeCache.get(mainScope);\n        if (!cache || resetCache) {\n            cache = new Map();\n            _scopeCache.set(mainScope, cache);\n        }\n        return cache;\n    }\n getOptionScopes(mainScope, keyLists, resetCache) {\n        const { options , type  } = this;\n        const cache = this._cachedScopes(mainScope, resetCache);\n        const cached = cache.get(keyLists);\n        if (cached) {\n            return cached;\n        }\n        const scopes = new Set();\n        keyLists.forEach((keys)=>{\n            if (mainScope) {\n                scopes.add(mainScope);\n                keys.forEach((key)=>addIfFound(scopes, mainScope, key));\n            }\n            keys.forEach((key)=>addIfFound(scopes, options, key));\n            keys.forEach((key)=>addIfFound(scopes, overrides[type] || {}, key));\n            keys.forEach((key)=>addIfFound(scopes, defaults, key));\n            keys.forEach((key)=>addIfFound(scopes, descriptors, key));\n        });\n        const array = Array.from(scopes);\n        if (array.length === 0) {\n            array.push(Object.create(null));\n        }\n        if (keysCached.has(keyLists)) {\n            cache.set(keyLists, array);\n        }\n        return array;\n    }\n chartOptionScopes() {\n        const { options , type  } = this;\n        return [\n            options,\n            overrides[type] || {},\n            defaults.datasets[type] || {},\n            {\n                type\n            },\n            defaults,\n            descriptors\n        ];\n    }\n resolveNamedOptions(scopes, names, context, prefixes = [\n        ''\n    ]) {\n        const result = {\n            $shared: true\n        };\n        const { resolver , subPrefixes  } = getResolver(this._resolverCache, scopes, prefixes);\n        let options = resolver;\n        if (needContext(resolver, names)) {\n            result.$shared = false;\n            context = isFunction(context) ? context() : context;\n            const subResolver = this.createResolver(scopes, context, subPrefixes);\n            options = _attachContext(resolver, context, subResolver);\n        }\n        for (const prop of names){\n            result[prop] = options[prop];\n        }\n        return result;\n    }\n createResolver(scopes, context, prefixes = [\n        ''\n    ], descriptorDefaults) {\n        const { resolver  } = getResolver(this._resolverCache, scopes, prefixes);\n        return isObject(context) ? _attachContext(resolver, context, undefined, descriptorDefaults) : resolver;\n    }\n}\nfunction getResolver(resolverCache, scopes, prefixes) {\n    let cache = resolverCache.get(scopes);\n    if (!cache) {\n        cache = new Map();\n        resolverCache.set(scopes, cache);\n    }\n    const cacheKey = prefixes.join();\n    let cached = cache.get(cacheKey);\n    if (!cached) {\n        const resolver = _createResolver(scopes, prefixes);\n        cached = {\n            resolver,\n            subPrefixes: prefixes.filter((p)=>!p.toLowerCase().includes('hover'))\n        };\n        cache.set(cacheKey, cached);\n    }\n    return cached;\n}\nconst hasFunction = (value)=>isObject(value) && Object.getOwnPropertyNames(value).some((key)=>isFunction(value[key]));\nfunction needContext(proxy, names) {\n    const { isScriptable , isIndexable  } = _descriptors(proxy);\n    for (const prop of names){\n        const scriptable = isScriptable(prop);\n        const indexable = isIndexable(prop);\n        const value = (indexable || scriptable) && proxy[prop];\n        if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar version = \"4.4.2\";\n\nconst KNOWN_POSITIONS = [\n    'top',\n    'bottom',\n    'left',\n    'right',\n    'chartArea'\n];\nfunction positionIsHorizontal(position, axis) {\n    return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\n}\nfunction compare2Level(l1, l2) {\n    return function(a, b) {\n        return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n    };\n}\nfunction onAnimationsComplete(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    chart.notifyPlugins('afterRender');\n    callback(animationOptions && animationOptions.onComplete, [\n        context\n    ], chart);\n}\nfunction onAnimationProgress(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    callback(animationOptions && animationOptions.onProgress, [\n        context\n    ], chart);\n}\n function getCanvas(item) {\n    if (_isDomSupported() && typeof item === 'string') {\n        item = document.getElementById(item);\n    } else if (item && item.length) {\n        item = item[0];\n    }\n    if (item && item.canvas) {\n        item = item.canvas;\n    }\n    return item;\n}\nconst instances = {};\nconst getChart = (key)=>{\n    const canvas = getCanvas(key);\n    return Object.values(instances).filter((c)=>c.canvas === canvas).pop();\n};\nfunction moveNumericKeys(obj, start, move) {\n    const keys = Object.keys(obj);\n    for (const key of keys){\n        const intKey = +key;\n        if (intKey >= start) {\n            const value = obj[key];\n            delete obj[key];\n            if (move > 0 || intKey > start) {\n                obj[intKey + move] = value;\n            }\n        }\n    }\n}\n function determineLastEvent(e, lastEvent, inChartArea, isClick) {\n    if (!inChartArea || e.type === 'mouseout') {\n        return null;\n    }\n    if (isClick) {\n        return lastEvent;\n    }\n    return e;\n}\nfunction getSizeForArea(scale, chartArea, field) {\n    return scale.options.clip ? scale[field] : chartArea[field];\n}\nfunction getDatasetArea(meta, chartArea) {\n    const { xScale , yScale  } = meta;\n    if (xScale && yScale) {\n        return {\n            left: getSizeForArea(xScale, chartArea, 'left'),\n            right: getSizeForArea(xScale, chartArea, 'right'),\n            top: getSizeForArea(yScale, chartArea, 'top'),\n            bottom: getSizeForArea(yScale, chartArea, 'bottom')\n        };\n    }\n    return chartArea;\n}\nclass Chart {\n    static defaults = defaults;\n    static instances = instances;\n    static overrides = overrides;\n    static registry = registry;\n    static version = version;\n    static getChart = getChart;\n    static register(...items) {\n        registry.add(...items);\n        invalidatePlugins();\n    }\n    static unregister(...items) {\n        registry.remove(...items);\n        invalidatePlugins();\n    }\n    constructor(item, userConfig){\n        const config = this.config = new Config(userConfig);\n        const initialCanvas = getCanvas(item);\n        const existingChart = getChart(initialCanvas);\n        if (existingChart) {\n            throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.');\n        }\n        const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n        this.platform.updateConfig(config);\n        const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n        const canvas = context && context.canvas;\n        const height = canvas && canvas.height;\n        const width = canvas && canvas.width;\n        this.id = uid();\n        this.ctx = context;\n        this.canvas = canvas;\n        this.width = width;\n        this.height = height;\n        this._options = options;\n        this._aspectRatio = this.aspectRatio;\n        this._layers = [];\n        this._metasets = [];\n        this._stacks = undefined;\n        this.boxes = [];\n        this.currentDevicePixelRatio = undefined;\n        this.chartArea = undefined;\n        this._active = [];\n        this._lastEvent = undefined;\n        this._listeners = {};\n         this._responsiveListeners = undefined;\n        this._sortedMetasets = [];\n        this.scales = {};\n        this._plugins = new PluginService();\n        this.$proxies = {};\n        this._hiddenIndices = {};\n        this.attached = false;\n        this._animationsDisabled = undefined;\n        this.$context = undefined;\n        this._doResize = debounce((mode)=>this.update(mode), options.resizeDelay || 0);\n        this._dataChanges = [];\n        instances[this.id] = this;\n        if (!context || !canvas) {\n            console.error(\"Failed to create chart: can't acquire context from the given item\");\n            return;\n        }\n        animator.listen(this, 'complete', onAnimationsComplete);\n        animator.listen(this, 'progress', onAnimationProgress);\n        this._initialize();\n        if (this.attached) {\n            this.update();\n        }\n    }\n    get aspectRatio() {\n        const { options: { aspectRatio , maintainAspectRatio  } , width , height , _aspectRatio  } = this;\n        if (!isNullOrUndef(aspectRatio)) {\n            return aspectRatio;\n        }\n        if (maintainAspectRatio && _aspectRatio) {\n            return _aspectRatio;\n        }\n        return height ? width / height : null;\n    }\n    get data() {\n        return this.config.data;\n    }\n    set data(data) {\n        this.config.data = data;\n    }\n    get options() {\n        return this._options;\n    }\n    set options(options) {\n        this.config.options = options;\n    }\n    get registry() {\n        return registry;\n    }\n _initialize() {\n        this.notifyPlugins('beforeInit');\n        if (this.options.responsive) {\n            this.resize();\n        } else {\n            retinaScale(this, this.options.devicePixelRatio);\n        }\n        this.bindEvents();\n        this.notifyPlugins('afterInit');\n        return this;\n    }\n    clear() {\n        clearCanvas(this.canvas, this.ctx);\n        return this;\n    }\n    stop() {\n        animator.stop(this);\n        return this;\n    }\n resize(width, height) {\n        if (!animator.running(this)) {\n            this._resize(width, height);\n        } else {\n            this._resizeBeforeDraw = {\n                width,\n                height\n            };\n        }\n    }\n    _resize(width, height) {\n        const options = this.options;\n        const canvas = this.canvas;\n        const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n        const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n        const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n        const mode = this.width ? 'resize' : 'attach';\n        this.width = newSize.width;\n        this.height = newSize.height;\n        this._aspectRatio = this.aspectRatio;\n        if (!retinaScale(this, newRatio, true)) {\n            return;\n        }\n        this.notifyPlugins('resize', {\n            size: newSize\n        });\n        callback(options.onResize, [\n            this,\n            newSize\n        ], this);\n        if (this.attached) {\n            if (this._doResize(mode)) {\n                this.render();\n            }\n        }\n    }\n    ensureScalesHaveIDs() {\n        const options = this.options;\n        const scalesOptions = options.scales || {};\n        each(scalesOptions, (axisOptions, axisID)=>{\n            axisOptions.id = axisID;\n        });\n    }\n buildOrUpdateScales() {\n        const options = this.options;\n        const scaleOpts = options.scales;\n        const scales = this.scales;\n        const updated = Object.keys(scales).reduce((obj, id)=>{\n            obj[id] = false;\n            return obj;\n        }, {});\n        let items = [];\n        if (scaleOpts) {\n            items = items.concat(Object.keys(scaleOpts).map((id)=>{\n                const scaleOptions = scaleOpts[id];\n                const axis = determineAxis(id, scaleOptions);\n                const isRadial = axis === 'r';\n                const isHorizontal = axis === 'x';\n                return {\n                    options: scaleOptions,\n                    dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n                    dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n                };\n            }));\n        }\n        each(items, (item)=>{\n            const scaleOptions = item.options;\n            const id = scaleOptions.id;\n            const axis = determineAxis(id, scaleOptions);\n            const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n            if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n                scaleOptions.position = item.dposition;\n            }\n            updated[id] = true;\n            let scale = null;\n            if (id in scales && scales[id].type === scaleType) {\n                scale = scales[id];\n            } else {\n                const scaleClass = registry.getScale(scaleType);\n                scale = new scaleClass({\n                    id,\n                    type: scaleType,\n                    ctx: this.ctx,\n                    chart: this\n                });\n                scales[scale.id] = scale;\n            }\n            scale.init(scaleOptions, options);\n        });\n        each(updated, (hasUpdated, id)=>{\n            if (!hasUpdated) {\n                delete scales[id];\n            }\n        });\n        each(scales, (scale)=>{\n            layouts.configure(this, scale, scale.options);\n            layouts.addBox(this, scale);\n        });\n    }\n _updateMetasets() {\n        const metasets = this._metasets;\n        const numData = this.data.datasets.length;\n        const numMeta = metasets.length;\n        metasets.sort((a, b)=>a.index - b.index);\n        if (numMeta > numData) {\n            for(let i = numData; i < numMeta; ++i){\n                this._destroyDatasetMeta(i);\n            }\n            metasets.splice(numData, numMeta - numData);\n        }\n        this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n    }\n _removeUnreferencedMetasets() {\n        const { _metasets: metasets , data: { datasets  }  } = this;\n        if (metasets.length > datasets.length) {\n            delete this._stacks;\n        }\n        metasets.forEach((meta, index)=>{\n            if (datasets.filter((x)=>x === meta._dataset).length === 0) {\n                this._destroyDatasetMeta(index);\n            }\n        });\n    }\n    buildOrUpdateControllers() {\n        const newControllers = [];\n        const datasets = this.data.datasets;\n        let i, ilen;\n        this._removeUnreferencedMetasets();\n        for(i = 0, ilen = datasets.length; i < ilen; i++){\n            const dataset = datasets[i];\n            let meta = this.getDatasetMeta(i);\n            const type = dataset.type || this.config.type;\n            if (meta.type && meta.type !== type) {\n                this._destroyDatasetMeta(i);\n                meta = this.getDatasetMeta(i);\n            }\n            meta.type = type;\n            meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n            meta.order = dataset.order || 0;\n            meta.index = i;\n            meta.label = '' + dataset.label;\n            meta.visible = this.isDatasetVisible(i);\n            if (meta.controller) {\n                meta.controller.updateIndex(i);\n                meta.controller.linkScales();\n            } else {\n                const ControllerClass = registry.getController(type);\n                const { datasetElementType , dataElementType  } = defaults.datasets[type];\n                Object.assign(ControllerClass, {\n                    dataElementType: registry.getElement(dataElementType),\n                    datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n                });\n                meta.controller = new ControllerClass(this, i);\n                newControllers.push(meta.controller);\n            }\n        }\n        this._updateMetasets();\n        return newControllers;\n    }\n _resetElements() {\n        each(this.data.datasets, (dataset, datasetIndex)=>{\n            this.getDatasetMeta(datasetIndex).controller.reset();\n        }, this);\n    }\n reset() {\n        this._resetElements();\n        this.notifyPlugins('reset');\n    }\n    update(mode) {\n        const config = this.config;\n        config.update();\n        const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        const animsDisabled = this._animationsDisabled = !options.animation;\n        this._updateScales();\n        this._checkEventBindings();\n        this._updateHiddenIndices();\n        this._plugins.invalidate();\n        if (this.notifyPlugins('beforeUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const newControllers = this.buildOrUpdateControllers();\n        this.notifyPlugins('beforeElementsUpdate');\n        let minPadding = 0;\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; i++){\n            const { controller  } = this.getDatasetMeta(i);\n            const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n            controller.buildOrUpdateElements(reset);\n            minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n        }\n        minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n        this._updateLayout(minPadding);\n        if (!animsDisabled) {\n            each(newControllers, (controller)=>{\n                controller.reset();\n            });\n        }\n        this._updateDatasets(mode);\n        this.notifyPlugins('afterUpdate', {\n            mode\n        });\n        this._layers.sort(compare2Level('z', '_idx'));\n        const { _active , _lastEvent  } = this;\n        if (_lastEvent) {\n            this._eventHandler(_lastEvent, true);\n        } else if (_active.length) {\n            this._updateHoverStyles(_active, _active, true);\n        }\n        this.render();\n    }\n _updateScales() {\n        each(this.scales, (scale)=>{\n            layouts.removeBox(this, scale);\n        });\n        this.ensureScalesHaveIDs();\n        this.buildOrUpdateScales();\n    }\n _checkEventBindings() {\n        const options = this.options;\n        const existingEvents = new Set(Object.keys(this._listeners));\n        const newEvents = new Set(options.events);\n        if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n            this.unbindEvents();\n            this.bindEvents();\n        }\n    }\n _updateHiddenIndices() {\n        const { _hiddenIndices  } = this;\n        const changes = this._getUniformDataChanges() || [];\n        for (const { method , start , count  } of changes){\n            const move = method === '_removeElements' ? -count : count;\n            moveNumericKeys(_hiddenIndices, start, move);\n        }\n    }\n _getUniformDataChanges() {\n        const _dataChanges = this._dataChanges;\n        if (!_dataChanges || !_dataChanges.length) {\n            return;\n        }\n        this._dataChanges = [];\n        const datasetCount = this.data.datasets.length;\n        const makeSet = (idx)=>new Set(_dataChanges.filter((c)=>c[0] === idx).map((c, i)=>i + ',' + c.splice(1).join(',')));\n        const changeSet = makeSet(0);\n        for(let i = 1; i < datasetCount; i++){\n            if (!setsEqual(changeSet, makeSet(i))) {\n                return;\n            }\n        }\n        return Array.from(changeSet).map((c)=>c.split(',')).map((a)=>({\n                method: a[1],\n                start: +a[2],\n                count: +a[3]\n            }));\n    }\n _updateLayout(minPadding) {\n        if (this.notifyPlugins('beforeLayout', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        layouts.update(this, this.width, this.height, minPadding);\n        const area = this.chartArea;\n        const noArea = area.width <= 0 || area.height <= 0;\n        this._layers = [];\n        each(this.boxes, (box)=>{\n            if (noArea && box.position === 'chartArea') {\n                return;\n            }\n            if (box.configure) {\n                box.configure();\n            }\n            this._layers.push(...box._layers());\n        }, this);\n        this._layers.forEach((item, index)=>{\n            item._idx = index;\n        });\n        this.notifyPlugins('afterLayout');\n    }\n _updateDatasets(mode) {\n        if (this.notifyPlugins('beforeDatasetsUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this.getDatasetMeta(i).controller.configure();\n        }\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this._updateDataset(i, isFunction(mode) ? mode({\n                datasetIndex: i\n            }) : mode);\n        }\n        this.notifyPlugins('afterDatasetsUpdate', {\n            mode\n        });\n    }\n _updateDataset(index, mode) {\n        const meta = this.getDatasetMeta(index);\n        const args = {\n            meta,\n            index,\n            mode,\n            cancelable: true\n        };\n        if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n            return;\n        }\n        meta.controller._update(mode);\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetUpdate', args);\n    }\n    render() {\n        if (this.notifyPlugins('beforeRender', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        if (animator.has(this)) {\n            if (this.attached && !animator.running(this)) {\n                animator.start(this);\n            }\n        } else {\n            this.draw();\n            onAnimationsComplete({\n                chart: this\n            });\n        }\n    }\n    draw() {\n        let i;\n        if (this._resizeBeforeDraw) {\n            const { width , height  } = this._resizeBeforeDraw;\n            this._resize(width, height);\n            this._resizeBeforeDraw = null;\n        }\n        this.clear();\n        if (this.width <= 0 || this.height <= 0) {\n            return;\n        }\n        if (this.notifyPlugins('beforeDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const layers = this._layers;\n        for(i = 0; i < layers.length && layers[i].z <= 0; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this._drawDatasets();\n        for(; i < layers.length; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this.notifyPlugins('afterDraw');\n    }\n _getSortedDatasetMetas(filterVisible) {\n        const metasets = this._sortedMetasets;\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metasets.length; i < ilen; ++i){\n            const meta = metasets[i];\n            if (!filterVisible || meta.visible) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n getSortedVisibleDatasetMetas() {\n        return this._getSortedDatasetMetas(true);\n    }\n _drawDatasets() {\n        if (this.notifyPlugins('beforeDatasetsDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const metasets = this.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            this._drawDataset(metasets[i]);\n        }\n        this.notifyPlugins('afterDatasetsDraw');\n    }\n _drawDataset(meta) {\n        const ctx = this.ctx;\n        const clip = meta._clip;\n        const useClip = !clip.disabled;\n        const area = getDatasetArea(meta, this.chartArea);\n        const args = {\n            meta,\n            index: meta.index,\n            cancelable: true\n        };\n        if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n            return;\n        }\n        if (useClip) {\n            clipArea(ctx, {\n                left: clip.left === false ? 0 : area.left - clip.left,\n                right: clip.right === false ? this.width : area.right + clip.right,\n                top: clip.top === false ? 0 : area.top - clip.top,\n                bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n            });\n        }\n        meta.controller.draw();\n        if (useClip) {\n            unclipArea(ctx);\n        }\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetDraw', args);\n    }\n isPointInArea(point) {\n        return _isPointInArea(point, this.chartArea, this._minPadding);\n    }\n    getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n        const method = Interaction.modes[mode];\n        if (typeof method === 'function') {\n            return method(this, e, options, useFinalPosition);\n        }\n        return [];\n    }\n    getDatasetMeta(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        const metasets = this._metasets;\n        let meta = metasets.filter((x)=>x && x._dataset === dataset).pop();\n        if (!meta) {\n            meta = {\n                type: null,\n                data: [],\n                dataset: null,\n                controller: null,\n                hidden: null,\n                xAxisID: null,\n                yAxisID: null,\n                order: dataset && dataset.order || 0,\n                index: datasetIndex,\n                _dataset: dataset,\n                _parsed: [],\n                _sorted: false\n            };\n            metasets.push(meta);\n        }\n        return meta;\n    }\n    getContext() {\n        return this.$context || (this.$context = createContext(null, {\n            chart: this,\n            type: 'chart'\n        }));\n    }\n    getVisibleDatasetCount() {\n        return this.getSortedVisibleDatasetMetas().length;\n    }\n    isDatasetVisible(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        if (!dataset) {\n            return false;\n        }\n        const meta = this.getDatasetMeta(datasetIndex);\n        return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n    }\n    setDatasetVisibility(datasetIndex, visible) {\n        const meta = this.getDatasetMeta(datasetIndex);\n        meta.hidden = !visible;\n    }\n    toggleDataVisibility(index) {\n        this._hiddenIndices[index] = !this._hiddenIndices[index];\n    }\n    getDataVisibility(index) {\n        return !this._hiddenIndices[index];\n    }\n _updateVisibility(datasetIndex, dataIndex, visible) {\n        const mode = visible ? 'show' : 'hide';\n        const meta = this.getDatasetMeta(datasetIndex);\n        const anims = meta.controller._resolveAnimations(undefined, mode);\n        if (defined(dataIndex)) {\n            meta.data[dataIndex].hidden = !visible;\n            this.update();\n        } else {\n            this.setDatasetVisibility(datasetIndex, visible);\n            anims.update(meta, {\n                visible\n            });\n            this.update((ctx)=>ctx.datasetIndex === datasetIndex ? mode : undefined);\n        }\n    }\n    hide(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, false);\n    }\n    show(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, true);\n    }\n _destroyDatasetMeta(datasetIndex) {\n        const meta = this._metasets[datasetIndex];\n        if (meta && meta.controller) {\n            meta.controller._destroy();\n        }\n        delete this._metasets[datasetIndex];\n    }\n    _stop() {\n        let i, ilen;\n        this.stop();\n        animator.remove(this);\n        for(i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this._destroyDatasetMeta(i);\n        }\n    }\n    destroy() {\n        this.notifyPlugins('beforeDestroy');\n        const { canvas , ctx  } = this;\n        this._stop();\n        this.config.clearCache();\n        if (canvas) {\n            this.unbindEvents();\n            clearCanvas(canvas, ctx);\n            this.platform.releaseContext(ctx);\n            this.canvas = null;\n            this.ctx = null;\n        }\n        delete instances[this.id];\n        this.notifyPlugins('afterDestroy');\n    }\n    toBase64Image(...args) {\n        return this.canvas.toDataURL(...args);\n    }\n bindEvents() {\n        this.bindUserEvents();\n        if (this.options.responsive) {\n            this.bindResponsiveEvents();\n        } else {\n            this.attached = true;\n        }\n    }\n bindUserEvents() {\n        const listeners = this._listeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const listener = (e, x, y)=>{\n            e.offsetX = x;\n            e.offsetY = y;\n            this._eventHandler(e);\n        };\n        each(this.options.events, (type)=>_add(type, listener));\n    }\n bindResponsiveEvents() {\n        if (!this._responsiveListeners) {\n            this._responsiveListeners = {};\n        }\n        const listeners = this._responsiveListeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const _remove = (type, listener)=>{\n            if (listeners[type]) {\n                platform.removeEventListener(this, type, listener);\n                delete listeners[type];\n            }\n        };\n        const listener = (width, height)=>{\n            if (this.canvas) {\n                this.resize(width, height);\n            }\n        };\n        let detached;\n        const attached = ()=>{\n            _remove('attach', attached);\n            this.attached = true;\n            this.resize();\n            _add('resize', listener);\n            _add('detach', detached);\n        };\n        detached = ()=>{\n            this.attached = false;\n            _remove('resize', listener);\n            this._stop();\n            this._resize(0, 0);\n            _add('attach', attached);\n        };\n        if (platform.isAttached(this.canvas)) {\n            attached();\n        } else {\n            detached();\n        }\n    }\n unbindEvents() {\n        each(this._listeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._listeners = {};\n        each(this._responsiveListeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._responsiveListeners = undefined;\n    }\n    updateHoverStyle(items, mode, enabled) {\n        const prefix = enabled ? 'set' : 'remove';\n        let meta, item, i, ilen;\n        if (mode === 'dataset') {\n            meta = this.getDatasetMeta(items[0].datasetIndex);\n            meta.controller['_' + prefix + 'DatasetHoverStyle']();\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            item = items[i];\n            const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n            if (controller) {\n                controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n            }\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements) {\n        const lastActive = this._active || [];\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('No dataset found at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !_elementsEqual(active, lastActive);\n        if (changed) {\n            this._active = active;\n            this._lastEvent = null;\n            this._updateHoverStyles(active, lastActive);\n        }\n    }\n notifyPlugins(hook, args, filter) {\n        return this._plugins.notify(this, hook, args, filter);\n    }\n isPluginEnabled(pluginId) {\n        return this._plugins._cache.filter((p)=>p.plugin.id === pluginId).length === 1;\n    }\n _updateHoverStyles(active, lastActive, replay) {\n        const hoverOptions = this.options.hover;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.datasetIndex === y.datasetIndex && x.index === y.index));\n        const deactivated = diff(lastActive, active);\n        const activated = replay ? active : diff(active, lastActive);\n        if (deactivated.length) {\n            this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n        }\n        if (activated.length && hoverOptions.mode) {\n            this.updateHoverStyle(activated, hoverOptions.mode, true);\n        }\n    }\n _eventHandler(e, replay) {\n        const args = {\n            event: e,\n            replay,\n            cancelable: true,\n            inChartArea: this.isPointInArea(e)\n        };\n        const eventFilter = (plugin)=>(plugin.options.events || this.options.events).includes(e.native.type);\n        if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n            return;\n        }\n        const changed = this._handleEvent(e, replay, args.inChartArea);\n        args.cancelable = false;\n        this.notifyPlugins('afterEvent', args, eventFilter);\n        if (changed || args.changed) {\n            this.render();\n        }\n        return this;\n    }\n _handleEvent(e, replay, inChartArea) {\n        const { _active: lastActive = [] , options  } = this;\n        const useFinalPosition = replay;\n        const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n        const isClick = _isClickEvent(e);\n        const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n        if (inChartArea) {\n            this._lastEvent = null;\n            callback(options.onHover, [\n                e,\n                active,\n                this\n            ], this);\n            if (isClick) {\n                callback(options.onClick, [\n                    e,\n                    active,\n                    this\n                ], this);\n            }\n        }\n        const changed = !_elementsEqual(active, lastActive);\n        if (changed || replay) {\n            this._active = active;\n            this._updateHoverStyles(active, lastActive, replay);\n        }\n        this._lastEvent = lastEvent;\n        return changed;\n    }\n _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive;\n        }\n        const hoverOptions = this.options.hover;\n        return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n    }\n}\nfunction invalidatePlugins() {\n    return each(Chart.instances, (chart)=>chart._plugins.invalidate());\n}\n\nfunction clipArc(ctx, element, endAngle) {\n    const { startAngle , pixelMargin , x , y , outerRadius , innerRadius  } = element;\n    let angleMargin = pixelMargin / outerRadius;\n    // Draw an inner border by clipping the arc and drawing a double-width border\n    // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n    ctx.beginPath();\n    ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n    if (innerRadius > pixelMargin) {\n        angleMargin = pixelMargin / innerRadius;\n        ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n    } else {\n        ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n    }\n    ctx.closePath();\n    ctx.clip();\n}\nfunction toRadiusCorners(value) {\n    return _readValueToProps(value, [\n        'outerStart',\n        'outerEnd',\n        'innerStart',\n        'innerEnd'\n    ]);\n}\n/**\n * Parse border radius from the provided options\n */ function parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n    const o = toRadiusCorners(arc.options.borderRadius);\n    const halfThickness = (outerRadius - innerRadius) / 2;\n    const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n    // Outer limits are complicated. We want to compute the available angular distance at\n    // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n    // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n    //\n    // If the borderRadius is large, that value can become negative.\n    // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n    // we know that the thickness term will dominate and compute the limits at that point\n    const computeOuterLimit = (val)=>{\n        const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n        return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n    };\n    return {\n        outerStart: computeOuterLimit(o.outerStart),\n        outerEnd: computeOuterLimit(o.outerEnd),\n        innerStart: _limitValue(o.innerStart, 0, innerLimit),\n        innerEnd: _limitValue(o.innerEnd, 0, innerLimit)\n    };\n}\n/**\n * Convert (r, 𝜃) to (x, y)\n */ function rThetaToXY(r, theta, x, y) {\n    return {\n        x: x + r * Math.cos(theta),\n        y: y + r * Math.sin(theta)\n    };\n}\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */ function pathArc(ctx, element, offset, spacing, end, circular) {\n    const { x , y , startAngle: start , pixelMargin , innerRadius: innerR  } = element;\n    const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n    const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n    let spacingOffset = 0;\n    const alpha = end - start;\n    if (spacing) {\n        // When spacing is present, it is the same for all items\n        // So we adjust the start and end angle of the arc such that\n        // the distance is the same as it would be without the spacing\n        const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n        const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n        const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n        const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\n        spacingOffset = (alpha - adjustedAngle) / 2;\n    }\n    const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n    const angleOffset = (alpha - beta) / 2;\n    const startAngle = start + angleOffset + spacingOffset;\n    const endAngle = end - angleOffset - spacingOffset;\n    const { outerStart , outerEnd , innerStart , innerEnd  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n    const outerStartAdjustedRadius = outerRadius - outerStart;\n    const outerEndAdjustedRadius = outerRadius - outerEnd;\n    const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n    const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n    const innerStartAdjustedRadius = innerRadius + innerStart;\n    const innerEndAdjustedRadius = innerRadius + innerEnd;\n    const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n    const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n    ctx.beginPath();\n    if (circular) {\n        // The first arc segments from point 1 to point a to point 2\n        const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n        ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n        ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n        // The corner segment from point 2 to point 3\n        if (outerEnd > 0) {\n            const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n        }\n        // The line from point 3 to point 4\n        const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n        ctx.lineTo(p4.x, p4.y);\n        // The corner segment from point 4 to point 5\n        if (innerEnd > 0) {\n            const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n        }\n        // The inner arc from point 5 to point b to point 6\n        const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;\n        ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);\n        ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);\n        // The corner segment from point 6 to point 7\n        if (innerStart > 0) {\n            const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n        }\n        // The line from point 7 to point 8\n        const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n        ctx.lineTo(p8.x, p8.y);\n        // The corner segment from point 8 to point 1\n        if (outerStart > 0) {\n            const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n        }\n    } else {\n        ctx.moveTo(x, y);\n        const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n        const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerStartX, outerStartY);\n        const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n        const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerEndX, outerEndY);\n    }\n    ctx.closePath();\n}\nfunction drawArc(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference  } = element;\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.fill();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % TAU || TAU);\n        }\n    }\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.fill();\n    return endAngle;\n}\nfunction drawBorder(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference , options  } = element;\n    const { borderWidth , borderJoinStyle , borderDash , borderDashOffset  } = options;\n    const inner = options.borderAlign === 'inner';\n    if (!borderWidth) {\n        return;\n    }\n    ctx.setLineDash(borderDash || []);\n    ctx.lineDashOffset = borderDashOffset;\n    if (inner) {\n        ctx.lineWidth = borderWidth * 2;\n        ctx.lineJoin = borderJoinStyle || 'round';\n    } else {\n        ctx.lineWidth = borderWidth;\n        ctx.lineJoin = borderJoinStyle || 'bevel';\n    }\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.stroke();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % TAU || TAU);\n        }\n    }\n    if (inner) {\n        clipArc(ctx, element, endAngle);\n    }\n    if (!fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        ctx.stroke();\n    }\n}\nclass ArcElement extends Element {\n    static id = 'arc';\n    static defaults = {\n        borderAlign: 'center',\n        borderColor: '#fff',\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: undefined,\n        borderRadius: 0,\n        borderWidth: 2,\n        offset: 0,\n        spacing: 0,\n        angle: undefined,\n        circular: true\n    };\n    static defaultRoutes = {\n        backgroundColor: 'backgroundColor'\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== 'borderDash'\n    };\n    circumference;\n    endAngle;\n    fullCircles;\n    innerRadius;\n    outerRadius;\n    pixelMargin;\n    startAngle;\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.circumference = undefined;\n        this.startAngle = undefined;\n        this.endAngle = undefined;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.pixelMargin = 0;\n        this.fullCircles = 0;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(chartX, chartY, useFinalPosition) {\n        const point = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        const { angle , distance  } = getAngleFromPoint(point, {\n            x: chartX,\n            y: chartY\n        });\n        const { startAngle , endAngle , innerRadius , outerRadius , circumference  } = this.getProps([\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius',\n            'circumference'\n        ], useFinalPosition);\n        const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n        const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n        const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\n        const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n        return betweenAngles && withinRadius;\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , startAngle , endAngle , innerRadius , outerRadius  } = this.getProps([\n            'x',\n            'y',\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius'\n        ], useFinalPosition);\n        const { offset , spacing  } = this.options;\n        const halfAngle = (startAngle + endAngle) / 2;\n        const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n        return {\n            x: x + Math.cos(halfAngle) * halfRadius,\n            y: y + Math.sin(halfAngle) * halfRadius\n        };\n    }\n    tooltipPosition(useFinalPosition) {\n        return this.getCenterPoint(useFinalPosition);\n    }\n    draw(ctx) {\n        const { options , circumference  } = this;\n        const offset = (options.offset || 0) / 4;\n        const spacing = (options.spacing || 0) / 2;\n        const circular = options.circular;\n        this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\n        this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n        if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n            return;\n        }\n        ctx.save();\n        const halfAngle = (this.startAngle + this.endAngle) / 2;\n        ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n        const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n        const radiusOffset = offset * fix;\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        drawArc(ctx, this, radiusOffset, spacing, circular);\n        drawBorder(ctx, this, radiusOffset, spacing, circular);\n        ctx.restore();\n    }\n}\n\nfunction setStyle(ctx, options, style = options) {\n    ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n    ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n    ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n    ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n    ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n    ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\nfunction lineTo(ctx, previous, target) {\n    ctx.lineTo(target.x, target.y);\n}\n function getLineMethod(options) {\n    if (options.stepped) {\n        return _steppedLineTo;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return _bezierCurveTo;\n    }\n    return lineTo;\n}\nfunction pathVars(points, segment, params = {}) {\n    const count = points.length;\n    const { start: paramsStart = 0 , end: paramsEnd = count - 1  } = params;\n    const { start: segmentStart , end: segmentEnd  } = segment;\n    const start = Math.max(paramsStart, segmentStart);\n    const end = Math.min(paramsEnd, segmentEnd);\n    const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n    return {\n        count,\n        start,\n        loop: segment.loop,\n        ilen: end < start && !outside ? count + end - start : end - start\n    };\n}\n function pathSegment(ctx, line, segment, params) {\n    const { points , options  } = line;\n    const { count , start , loop , ilen  } = pathVars(points, segment, params);\n    const lineMethod = getLineMethod(options);\n    let { move =true , reverse  } = params || {};\n    let i, point, prev;\n    for(i = 0; i <= ilen; ++i){\n        point = points[(start + (reverse ? ilen - i : i)) % count];\n        if (point.skip) {\n            continue;\n        } else if (move) {\n            ctx.moveTo(point.x, point.y);\n            move = false;\n        } else {\n            lineMethod(ctx, prev, point, reverse, options.stepped);\n        }\n        prev = point;\n    }\n    if (loop) {\n        point = points[(start + (reverse ? ilen : 0)) % count];\n        lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n    return !!loop;\n}\n function fastPathSegment(ctx, line, segment, params) {\n    const points = line.points;\n    const { count , start , ilen  } = pathVars(points, segment, params);\n    const { move =true , reverse  } = params || {};\n    let avgX = 0;\n    let countX = 0;\n    let i, point, prevX, minY, maxY, lastY;\n    const pointIndex = (index)=>(start + (reverse ? ilen - index : index)) % count;\n    const drawX = ()=>{\n        if (minY !== maxY) {\n            ctx.lineTo(avgX, maxY);\n            ctx.lineTo(avgX, minY);\n            ctx.lineTo(avgX, lastY);\n        }\n    };\n    if (move) {\n        point = points[pointIndex(0)];\n        ctx.moveTo(point.x, point.y);\n    }\n    for(i = 0; i <= ilen; ++i){\n        point = points[pointIndex(i)];\n        if (point.skip) {\n            continue;\n        }\n        const x = point.x;\n        const y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n            } else if (y > maxY) {\n                maxY = y;\n            }\n            avgX = (countX * avgX + x) / ++countX;\n        } else {\n            drawX();\n            ctx.lineTo(x, y);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n        }\n        lastY = y;\n    }\n    drawX();\n}\n function _getSegmentMethod(line) {\n    const opts = line.options;\n    const borderDash = opts.borderDash && opts.borderDash.length;\n    const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n    return useFastPath ? fastPathSegment : pathSegment;\n}\n function _getInterpolationMethod(options) {\n    if (options.stepped) {\n        return _steppedInterpolation;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return _bezierInterpolation;\n    }\n    return _pointInLine;\n}\nfunction strokePathWithCache(ctx, line, start, count) {\n    let path = line._path;\n    if (!path) {\n        path = line._path = new Path2D();\n        if (line.path(path, start, count)) {\n            path.closePath();\n        }\n    }\n    setStyle(ctx, line.options);\n    ctx.stroke(path);\n}\nfunction strokePathDirect(ctx, line, start, count) {\n    const { segments , options  } = line;\n    const segmentMethod = _getSegmentMethod(line);\n    for (const segment of segments){\n        setStyle(ctx, options, segment.style);\n        ctx.beginPath();\n        if (segmentMethod(ctx, line, segment, {\n            start,\n            end: start + count - 1\n        })) {\n            ctx.closePath();\n        }\n        ctx.stroke();\n    }\n}\nconst usePath2D = typeof Path2D === 'function';\nfunction draw(ctx, line, start, count) {\n    if (usePath2D && !line.options.segment) {\n        strokePathWithCache(ctx, line, start, count);\n    } else {\n        strokePathDirect(ctx, line, start, count);\n    }\n}\nclass LineElement extends Element {\n    static id = 'line';\n static defaults = {\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: 'miter',\n        borderWidth: 3,\n        capBezierPoints: true,\n        cubicInterpolationMode: 'default',\n        fill: false,\n        spanGaps: false,\n        stepped: false,\n        tension: 0\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== 'borderDash' && name !== 'fill'\n    };\n    constructor(cfg){\n        super();\n        this.animated = true;\n        this.options = undefined;\n        this._chart = undefined;\n        this._loop = undefined;\n        this._fullLoop = undefined;\n        this._path = undefined;\n        this._points = undefined;\n        this._segments = undefined;\n        this._decimated = false;\n        this._pointsUpdated = false;\n        this._datasetIndex = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    updateControlPoints(chartArea, indexAxis) {\n        const options = this.options;\n        if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n            const loop = options.spanGaps ? this._loop : this._fullLoop;\n            _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n            this._pointsUpdated = true;\n        }\n    }\n    set points(points) {\n        this._points = points;\n        delete this._segments;\n        delete this._path;\n        this._pointsUpdated = false;\n    }\n    get points() {\n        return this._points;\n    }\n    get segments() {\n        return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n    }\n first() {\n        const segments = this.segments;\n        const points = this.points;\n        return segments.length && points[segments[0].start];\n    }\n last() {\n        const segments = this.segments;\n        const points = this.points;\n        const count = segments.length;\n        return count && points[segments[count - 1].end];\n    }\n interpolate(point, property) {\n        const options = this.options;\n        const value = point[property];\n        const points = this.points;\n        const segments = _boundSegments(this, {\n            property,\n            start: value,\n            end: value\n        });\n        if (!segments.length) {\n            return;\n        }\n        const result = [];\n        const _interpolate = _getInterpolationMethod(options);\n        let i, ilen;\n        for(i = 0, ilen = segments.length; i < ilen; ++i){\n            const { start , end  } = segments[i];\n            const p1 = points[start];\n            const p2 = points[end];\n            if (p1 === p2) {\n                result.push(p1);\n                continue;\n            }\n            const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n            const interpolated = _interpolate(p1, p2, t, options.stepped);\n            interpolated[property] = point[property];\n            result.push(interpolated);\n        }\n        return result.length === 1 ? result[0] : result;\n    }\n pathSegment(ctx, segment, params) {\n        const segmentMethod = _getSegmentMethod(this);\n        return segmentMethod(ctx, this, segment, params);\n    }\n path(ctx, start, count) {\n        const segments = this.segments;\n        const segmentMethod = _getSegmentMethod(this);\n        let loop = this._loop;\n        start = start || 0;\n        count = count || this.points.length - start;\n        for (const segment of segments){\n            loop &= segmentMethod(ctx, this, segment, {\n                start,\n                end: start + count - 1\n            });\n        }\n        return !!loop;\n    }\n draw(ctx, chartArea, start, count) {\n        const options = this.options || {};\n        const points = this.points || [];\n        if (points.length && options.borderWidth) {\n            ctx.save();\n            draw(ctx, this, start, count);\n            ctx.restore();\n        }\n        if (this.animated) {\n            this._pointsUpdated = false;\n            this._path = undefined;\n        }\n    }\n}\n\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n    const options = el.options;\n    const { [axis]: value  } = el.getProps([\n        axis\n    ], useFinalPosition);\n    return Math.abs(pos - value) < options.radius + options.hitRadius;\n}\nclass PointElement extends Element {\n    static id = 'point';\n    parsed;\n    skip;\n    stop;\n    /**\n   * @type {any}\n   */ static defaults = {\n        borderWidth: 1,\n        hitRadius: 1,\n        hoverBorderWidth: 1,\n        hoverRadius: 4,\n        pointStyle: 'circle',\n        radius: 3,\n        rotation: 0\n    };\n    /**\n   * @type {any}\n   */ static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.parsed = undefined;\n        this.skip = undefined;\n        this.stop = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        const options = this.options;\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange$1(this, mouseX, 'x', useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange$1(this, mouseY, 'y', useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    size(options) {\n        options = options || this.options || {};\n        let radius = options.radius || 0;\n        radius = Math.max(radius, radius && options.hoverRadius || 0);\n        const borderWidth = radius && options.borderWidth || 0;\n        return (radius + borderWidth) * 2;\n    }\n    draw(ctx, area) {\n        const options = this.options;\n        if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n            return;\n        }\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.fillStyle = options.backgroundColor;\n        drawPoint(ctx, options, this.x, this.y);\n    }\n    getRange() {\n        const options = this.options || {};\n        // @ts-expect-error Fallbacks should never be hit in practice\n        return options.radius + options.hitRadius;\n    }\n}\n\nfunction getBarBounds(bar, useFinalPosition) {\n    const { x , y , base , width , height  } =  bar.getProps([\n        'x',\n        'y',\n        'base',\n        'width',\n        'height'\n    ], useFinalPosition);\n    let left, right, top, bottom, half;\n    if (bar.horizontal) {\n        half = height / 2;\n        left = Math.min(x, base);\n        right = Math.max(x, base);\n        top = y - half;\n        bottom = y + half;\n    } else {\n        half = width / 2;\n        left = x - half;\n        right = x + half;\n        top = Math.min(y, base);\n        bottom = Math.max(y, base);\n    }\n    return {\n        left,\n        top,\n        right,\n        bottom\n    };\n}\nfunction skipOrLimit(skip, value, min, max) {\n    return skip ? 0 : _limitValue(value, min, max);\n}\nfunction parseBorderWidth(bar, maxW, maxH) {\n    const value = bar.options.borderWidth;\n    const skip = bar.borderSkipped;\n    const o = toTRBL(value);\n    return {\n        t: skipOrLimit(skip.top, o.top, 0, maxH),\n        r: skipOrLimit(skip.right, o.right, 0, maxW),\n        b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n        l: skipOrLimit(skip.left, o.left, 0, maxW)\n    };\n}\nfunction parseBorderRadius(bar, maxW, maxH) {\n    const { enableBorderRadius  } = bar.getProps([\n        'enableBorderRadius'\n    ]);\n    const value = bar.options.borderRadius;\n    const o = toTRBLCorners(value);\n    const maxR = Math.min(maxW, maxH);\n    const skip = bar.borderSkipped;\n    const enableBorder = enableBorderRadius || isObject(value);\n    return {\n        topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n        topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n        bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n        bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n    };\n}\nfunction boundingRects(bar) {\n    const bounds = getBarBounds(bar);\n    const width = bounds.right - bounds.left;\n    const height = bounds.bottom - bounds.top;\n    const border = parseBorderWidth(bar, width / 2, height / 2);\n    const radius = parseBorderRadius(bar, width / 2, height / 2);\n    return {\n        outer: {\n            x: bounds.left,\n            y: bounds.top,\n            w: width,\n            h: height,\n            radius\n        },\n        inner: {\n            x: bounds.left + border.l,\n            y: bounds.top + border.t,\n            w: width - border.l - border.r,\n            h: height - border.t - border.b,\n            radius: {\n                topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n                topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n                bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n                bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n            }\n        }\n    };\n}\nfunction inRange(bar, x, y, useFinalPosition) {\n    const skipX = x === null;\n    const skipY = y === null;\n    const skipBoth = skipX && skipY;\n    const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n    return bounds && (skipX || _isBetween(x, bounds.left, bounds.right)) && (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\nfunction hasRadius(radius) {\n    return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n function addNormalRectPath(ctx, rect) {\n    ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\nfunction inflateRect(rect, amount, refRect = {}) {\n    const x = rect.x !== refRect.x ? -amount : 0;\n    const y = rect.y !== refRect.y ? -amount : 0;\n    const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n    const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n    return {\n        x: rect.x + x,\n        y: rect.y + y,\n        w: rect.w + w,\n        h: rect.h + h,\n        radius: rect.radius\n    };\n}\nclass BarElement extends Element {\n    static id = 'bar';\n static defaults = {\n        borderSkipped: 'start',\n        borderWidth: 0,\n        borderRadius: 0,\n        inflateAmount: 'auto',\n        pointStyle: undefined\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.horizontal = undefined;\n        this.base = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.inflateAmount = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    draw(ctx) {\n        const { inflateAmount , options: { borderColor , backgroundColor  }  } = this;\n        const { inner , outer  } = boundingRects(this);\n        const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n        ctx.save();\n        if (outer.w !== inner.w || outer.h !== inner.h) {\n            ctx.beginPath();\n            addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n            ctx.clip();\n            addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n            ctx.fillStyle = borderColor;\n            ctx.fill('evenodd');\n        }\n        ctx.beginPath();\n        addRectPath(ctx, inflateRect(inner, inflateAmount));\n        ctx.fillStyle = backgroundColor;\n        ctx.fill();\n        ctx.restore();\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        return inRange(this, mouseX, mouseY, useFinalPosition);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange(this, mouseX, null, useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange(this, null, mouseY, useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , base , horizontal  } =  this.getProps([\n            'x',\n            'y',\n            'base',\n            'horizontal'\n        ], useFinalPosition);\n        return {\n            x: horizontal ? (x + base) / 2 : x,\n            y: horizontal ? y : (y + base) / 2\n        };\n    }\n    getRange(axis) {\n        return axis === 'x' ? this.width / 2 : this.height / 2;\n    }\n}\n\nvar elements = /*#__PURE__*/Object.freeze({\n__proto__: null,\nArcElement: ArcElement,\nBarElement: BarElement,\nLineElement: LineElement,\nPointElement: PointElement\n});\n\nconst BORDER_COLORS = [\n    'rgb(54, 162, 235)',\n    'rgb(255, 99, 132)',\n    'rgb(255, 159, 64)',\n    'rgb(255, 205, 86)',\n    'rgb(75, 192, 192)',\n    'rgb(153, 102, 255)',\n    'rgb(201, 203, 207)' // grey\n];\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map((color)=>color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\nfunction getBorderColor(i) {\n    return BORDER_COLORS[i % BORDER_COLORS.length];\n}\nfunction getBackgroundColor(i) {\n    return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\nfunction colorizeDefaultDataset(dataset, i) {\n    dataset.borderColor = getBorderColor(i);\n    dataset.backgroundColor = getBackgroundColor(i);\n    return ++i;\n}\nfunction colorizeDoughnutDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBorderColor(i++));\n    return i;\n}\nfunction colorizePolarAreaDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBackgroundColor(i++));\n    return i;\n}\nfunction getColorizer(chart) {\n    let i = 0;\n    return (dataset, datasetIndex)=>{\n        const controller = chart.getDatasetMeta(datasetIndex).controller;\n        if (controller instanceof DoughnutController) {\n            i = colorizeDoughnutDataset(dataset, i);\n        } else if (controller instanceof PolarAreaController) {\n            i = colorizePolarAreaDataset(dataset, i);\n        } else if (controller) {\n            i = colorizeDefaultDataset(dataset, i);\n        }\n    };\n}\nfunction containsColorsDefinitions(descriptors) {\n    let k;\n    for(k in descriptors){\n        if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction containsColorsDefinition(descriptor) {\n    return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\nvar plugin_colors = {\n    id: 'colors',\n    defaults: {\n        enabled: true,\n        forceOverride: false\n    },\n    beforeLayout (chart, _args, options) {\n        if (!options.enabled) {\n            return;\n        }\n        const { data: { datasets  } , options: chartOptions  } = chart.config;\n        const { elements  } = chartOptions;\n        if (!options.forceOverride && (containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements))) {\n            return;\n        }\n        const colorizer = getColorizer(chart);\n        datasets.forEach(colorizer);\n    }\n};\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n const samples = options.samples || availableWidth;\n    if (samples >= count) {\n        return data.slice(start, start + count);\n    }\n    const decimated = [];\n    const bucketWidth = (count - 2) / (samples - 2);\n    let sampledIndex = 0;\n    const endIndex = start + count - 1;\n    let a = start;\n    let i, maxAreaPoint, maxArea, area, nextA;\n    decimated[sampledIndex++] = data[a];\n    for(i = 0; i < samples - 2; i++){\n        let avgX = 0;\n        let avgY = 0;\n        let j;\n        const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n        const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n        const avgRangeLength = avgRangeEnd - avgRangeStart;\n        for(j = avgRangeStart; j < avgRangeEnd; j++){\n            avgX += data[j].x;\n            avgY += data[j].y;\n        }\n        avgX /= avgRangeLength;\n        avgY /= avgRangeLength;\n        const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n        const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n        const { x: pointAx , y: pointAy  } = data[a];\n        maxArea = area = -1;\n        for(j = rangeOffs; j < rangeTo; j++){\n            area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n            if (area > maxArea) {\n                maxArea = area;\n                maxAreaPoint = data[j];\n                nextA = j;\n            }\n        }\n        decimated[sampledIndex++] = maxAreaPoint;\n        a = nextA;\n    }\n    decimated[sampledIndex++] = data[endIndex];\n    return decimated;\n}\nfunction minMaxDecimation(data, start, count, availableWidth) {\n    let avgX = 0;\n    let countX = 0;\n    let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n    const decimated = [];\n    const endIndex = start + count - 1;\n    const xMin = data[start].x;\n    const xMax = data[endIndex].x;\n    const dx = xMax - xMin;\n    for(i = start; i < start + count; ++i){\n        point = data[i];\n        x = (point.x - xMin) / dx * availableWidth;\n        y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n                minIndex = i;\n            } else if (y > maxY) {\n                maxY = y;\n                maxIndex = i;\n            }\n            avgX = (countX * avgX + point.x) / ++countX;\n        } else {\n            const lastIndex = i - 1;\n            if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n                const intermediateIndex1 = Math.min(minIndex, maxIndex);\n                const intermediateIndex2 = Math.max(minIndex, maxIndex);\n                if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex1],\n                        x: avgX\n                    });\n                }\n                if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex2],\n                        x: avgX\n                    });\n                }\n            }\n            if (i > 0 && lastIndex !== startIndex) {\n                decimated.push(data[lastIndex]);\n            }\n            decimated.push(point);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n            minIndex = maxIndex = startIndex = i;\n        }\n    }\n    return decimated;\n}\nfunction cleanDecimatedDataset(dataset) {\n    if (dataset._decimated) {\n        const data = dataset._data;\n        delete dataset._decimated;\n        delete dataset._data;\n        Object.defineProperty(dataset, 'data', {\n            configurable: true,\n            enumerable: true,\n            writable: true,\n            value: data\n        });\n    }\n}\nfunction cleanDecimatedData(chart) {\n    chart.data.datasets.forEach((dataset)=>{\n        cleanDecimatedDataset(dataset);\n    });\n}\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n    const pointCount = points.length;\n    let start = 0;\n    let count;\n    const { iScale  } = meta;\n    const { min , max , minDefined , maxDefined  } = iScale.getUserBounds();\n    if (minDefined) {\n        start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n    }\n    if (maxDefined) {\n        count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n    } else {\n        count = pointCount - start;\n    }\n    return {\n        start,\n        count\n    };\n}\nvar plugin_decimation = {\n    id: 'decimation',\n    defaults: {\n        algorithm: 'min-max',\n        enabled: false\n    },\n    beforeElementsUpdate: (chart, args, options)=>{\n        if (!options.enabled) {\n            cleanDecimatedData(chart);\n            return;\n        }\n        const availableWidth = chart.width;\n        chart.data.datasets.forEach((dataset, datasetIndex)=>{\n            const { _data , indexAxis  } = dataset;\n            const meta = chart.getDatasetMeta(datasetIndex);\n            const data = _data || dataset.data;\n            if (resolve([\n                indexAxis,\n                chart.options.indexAxis\n            ]) === 'y') {\n                return;\n            }\n            if (!meta.controller.supportsDecimation) {\n                return;\n            }\n            const xAxis = chart.scales[meta.xAxisID];\n            if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n                return;\n            }\n            if (chart.options.parsing) {\n                return;\n            }\n            let { start , count  } = getStartAndCountOfVisiblePointsSimplified(meta, data);\n            const threshold = options.threshold || 4 * availableWidth;\n            if (count <= threshold) {\n                cleanDecimatedDataset(dataset);\n                return;\n            }\n            if (isNullOrUndef(_data)) {\n                dataset._data = data;\n                delete dataset.data;\n                Object.defineProperty(dataset, 'data', {\n                    configurable: true,\n                    enumerable: true,\n                    get: function() {\n                        return this._decimated;\n                    },\n                    set: function(d) {\n                        this._data = d;\n                    }\n                });\n            }\n            let decimated;\n            switch(options.algorithm){\n                case 'lttb':\n                    decimated = lttbDecimation(data, start, count, availableWidth, options);\n                    break;\n                case 'min-max':\n                    decimated = minMaxDecimation(data, start, count, availableWidth);\n                    break;\n                default:\n                    throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n            }\n            dataset._decimated = decimated;\n        });\n    },\n    destroy (chart) {\n        cleanDecimatedData(chart);\n    }\n};\n\nfunction _segments(line, target, property) {\n    const segments = line.segments;\n    const points = line.points;\n    const tpoints = target.points;\n    const parts = [];\n    for (const segment of segments){\n        let { start , end  } = segment;\n        end = _findSegmentEnd(start, end, points);\n        const bounds = _getBounds(property, points[start], points[end], segment.loop);\n        if (!target.segments) {\n            parts.push({\n                source: segment,\n                target: bounds,\n                start: points[start],\n                end: points[end]\n            });\n            continue;\n        }\n        const targetSegments = _boundSegments(target, bounds);\n        for (const tgt of targetSegments){\n            const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n            const fillSources = _boundSegment(segment, points, subBounds);\n            for (const fillSource of fillSources){\n                parts.push({\n                    source: fillSource,\n                    target: tgt,\n                    start: {\n                        [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n                    },\n                    end: {\n                        [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n                    }\n                });\n            }\n        }\n    }\n    return parts;\n}\nfunction _getBounds(property, first, last, loop) {\n    if (loop) {\n        return;\n    }\n    let start = first[property];\n    let end = last[property];\n    if (property === 'angle') {\n        start = _normalizeAngle(start);\n        end = _normalizeAngle(end);\n    }\n    return {\n        property,\n        start,\n        end\n    };\n}\nfunction _pointsFromSegments(boundary, line) {\n    const { x =null , y =null  } = boundary || {};\n    const linePoints = line.points;\n    const points = [];\n    line.segments.forEach(({ start , end  })=>{\n        end = _findSegmentEnd(start, end, linePoints);\n        const first = linePoints[start];\n        const last = linePoints[end];\n        if (y !== null) {\n            points.push({\n                x: first.x,\n                y\n            });\n            points.push({\n                x: last.x,\n                y\n            });\n        } else if (x !== null) {\n            points.push({\n                x,\n                y: first.y\n            });\n            points.push({\n                x,\n                y: last.y\n            });\n        }\n    });\n    return points;\n}\nfunction _findSegmentEnd(start, end, points) {\n    for(; end > start; end--){\n        const point = points[end];\n        if (!isNaN(point.x) && !isNaN(point.y)) {\n            break;\n        }\n    }\n    return end;\n}\nfunction _getEdge(a, b, prop, fn) {\n    if (a && b) {\n        return fn(a[prop], b[prop]);\n    }\n    return a ? a[prop] : b ? b[prop] : 0;\n}\n\nfunction _createBoundaryLine(boundary, line) {\n    let points = [];\n    let _loop = false;\n    if (isArray(boundary)) {\n        _loop = true;\n        points = boundary;\n    } else {\n        points = _pointsFromSegments(boundary, line);\n    }\n    return points.length ? new LineElement({\n        points,\n        options: {\n            tension: 0\n        },\n        _loop,\n        _fullLoop: _loop\n    }) : null;\n}\nfunction _shouldApplyFill(source) {\n    return source && source.fill !== false;\n}\n\nfunction _resolveTarget(sources, index, propagate) {\n    const source = sources[index];\n    let fill = source.fill;\n    const visited = [\n        index\n    ];\n    let target;\n    if (!propagate) {\n        return fill;\n    }\n    while(fill !== false && visited.indexOf(fill) === -1){\n        if (!isNumberFinite(fill)) {\n            return fill;\n        }\n        target = sources[fill];\n        if (!target) {\n            return false;\n        }\n        if (target.visible) {\n            return fill;\n        }\n        visited.push(fill);\n        fill = target.fill;\n    }\n    return false;\n}\n function _decodeFill(line, index, count) {\n     const fill = parseFillOption(line);\n    if (isObject(fill)) {\n        return isNaN(fill.value) ? false : fill;\n    }\n    let target = parseFloat(fill);\n    if (isNumberFinite(target) && Math.floor(target) === target) {\n        return decodeTargetIndex(fill[0], index, target, count);\n    }\n    return [\n        'origin',\n        'start',\n        'end',\n        'stack',\n        'shape'\n    ].indexOf(fill) >= 0 && fill;\n}\nfunction decodeTargetIndex(firstCh, index, target, count) {\n    if (firstCh === '-' || firstCh === '+') {\n        target = index + target;\n    }\n    if (target === index || target < 0 || target >= count) {\n        return false;\n    }\n    return target;\n}\n function _getTargetPixel(fill, scale) {\n    let pixel = null;\n    if (fill === 'start') {\n        pixel = scale.bottom;\n    } else if (fill === 'end') {\n        pixel = scale.top;\n    } else if (isObject(fill)) {\n        pixel = scale.getPixelForValue(fill.value);\n    } else if (scale.getBasePixel) {\n        pixel = scale.getBasePixel();\n    }\n    return pixel;\n}\n function _getTargetValue(fill, scale, startValue) {\n    let value;\n    if (fill === 'start') {\n        value = startValue;\n    } else if (fill === 'end') {\n        value = scale.options.reverse ? scale.min : scale.max;\n    } else if (isObject(fill)) {\n        value = fill.value;\n    } else {\n        value = scale.getBaseValue();\n    }\n    return value;\n}\n function parseFillOption(line) {\n    const options = line.options;\n    const fillOption = options.fill;\n    let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n    if (fill === undefined) {\n        fill = !!options.backgroundColor;\n    }\n    if (fill === false || fill === null) {\n        return false;\n    }\n    if (fill === true) {\n        return 'origin';\n    }\n    return fill;\n}\n\nfunction _buildStackLine(source) {\n    const { scale , index , line  } = source;\n    const points = [];\n    const segments = line.segments;\n    const sourcePoints = line.points;\n    const linesBelow = getLinesBelow(scale, index);\n    linesBelow.push(_createBoundaryLine({\n        x: null,\n        y: scale.bottom\n    }, line));\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        for(let j = segment.start; j <= segment.end; j++){\n            addPointsBelow(points, sourcePoints[j], linesBelow);\n        }\n    }\n    return new LineElement({\n        points,\n        options: {}\n    });\n}\n function getLinesBelow(scale, index) {\n    const below = [];\n    const metas = scale.getMatchingVisibleMetas('line');\n    for(let i = 0; i < metas.length; i++){\n        const meta = metas[i];\n        if (meta.index === index) {\n            break;\n        }\n        if (!meta.hidden) {\n            below.unshift(meta.dataset);\n        }\n    }\n    return below;\n}\n function addPointsBelow(points, sourcePoint, linesBelow) {\n    const postponed = [];\n    for(let j = 0; j < linesBelow.length; j++){\n        const line = linesBelow[j];\n        const { first , last , point  } = findPoint(line, sourcePoint, 'x');\n        if (!point || first && last) {\n            continue;\n        }\n        if (first) {\n            postponed.unshift(point);\n        } else {\n            points.push(point);\n            if (!last) {\n                break;\n            }\n        }\n    }\n    points.push(...postponed);\n}\n function findPoint(line, sourcePoint, property) {\n    const point = line.interpolate(sourcePoint, property);\n    if (!point) {\n        return {};\n    }\n    const pointValue = point[property];\n    const segments = line.segments;\n    const linePoints = line.points;\n    let first = false;\n    let last = false;\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        const firstValue = linePoints[segment.start][property];\n        const lastValue = linePoints[segment.end][property];\n        if (_isBetween(pointValue, firstValue, lastValue)) {\n            first = pointValue === firstValue;\n            last = pointValue === lastValue;\n            break;\n        }\n    }\n    return {\n        first,\n        last,\n        point\n    };\n}\n\nclass simpleArc {\n    constructor(opts){\n        this.x = opts.x;\n        this.y = opts.y;\n        this.radius = opts.radius;\n    }\n    pathSegment(ctx, bounds, opts) {\n        const { x , y , radius  } = this;\n        bounds = bounds || {\n            start: 0,\n            end: TAU\n        };\n        ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n        return !opts.bounds;\n    }\n    interpolate(point) {\n        const { x , y , radius  } = this;\n        const angle = point.angle;\n        return {\n            x: x + Math.cos(angle) * radius,\n            y: y + Math.sin(angle) * radius,\n            angle\n        };\n    }\n}\n\nfunction _getTarget(source) {\n    const { chart , fill , line  } = source;\n    if (isNumberFinite(fill)) {\n        return getLineByIndex(chart, fill);\n    }\n    if (fill === 'stack') {\n        return _buildStackLine(source);\n    }\n    if (fill === 'shape') {\n        return true;\n    }\n    const boundary = computeBoundary(source);\n    if (boundary instanceof simpleArc) {\n        return boundary;\n    }\n    return _createBoundaryLine(boundary, line);\n}\n function getLineByIndex(chart, index) {\n    const meta = chart.getDatasetMeta(index);\n    const visible = meta && chart.isDatasetVisible(index);\n    return visible ? meta.dataset : null;\n}\nfunction computeBoundary(source) {\n    const scale = source.scale || {};\n    if (scale.getPointPositionForValue) {\n        return computeCircularBoundary(source);\n    }\n    return computeLinearBoundary(source);\n}\nfunction computeLinearBoundary(source) {\n    const { scale ={} , fill  } = source;\n    const pixel = _getTargetPixel(fill, scale);\n    if (isNumberFinite(pixel)) {\n        const horizontal = scale.isHorizontal();\n        return {\n            x: horizontal ? pixel : null,\n            y: horizontal ? null : pixel\n        };\n    }\n    return null;\n}\nfunction computeCircularBoundary(source) {\n    const { scale , fill  } = source;\n    const options = scale.options;\n    const length = scale.getLabels().length;\n    const start = options.reverse ? scale.max : scale.min;\n    const value = _getTargetValue(fill, scale, start);\n    const target = [];\n    if (options.grid.circular) {\n        const center = scale.getPointPositionForValue(0, start);\n        return new simpleArc({\n            x: center.x,\n            y: center.y,\n            radius: scale.getDistanceFromCenterForValue(value)\n        });\n    }\n    for(let i = 0; i < length; ++i){\n        target.push(scale.getPointPositionForValue(i, value));\n    }\n    return target;\n}\n\nfunction _drawfill(ctx, source, area) {\n    const target = _getTarget(source);\n    const { line , scale , axis  } = source;\n    const lineOpts = line.options;\n    const fillOption = lineOpts.fill;\n    const color = lineOpts.backgroundColor;\n    const { above =color , below =color  } = fillOption || {};\n    if (target && line.points.length) {\n        clipArea(ctx, area);\n        doFill(ctx, {\n            line,\n            target,\n            above,\n            below,\n            area,\n            scale,\n            axis\n        });\n        unclipArea(ctx);\n    }\n}\nfunction doFill(ctx, cfg) {\n    const { line , target , above , below , area , scale  } = cfg;\n    const property = line._loop ? 'angle' : cfg.axis;\n    ctx.save();\n    if (property === 'x' && below !== above) {\n        clipVertical(ctx, target, area.top);\n        fill(ctx, {\n            line,\n            target,\n            color: above,\n            scale,\n            property\n        });\n        ctx.restore();\n        ctx.save();\n        clipVertical(ctx, target, area.bottom);\n    }\n    fill(ctx, {\n        line,\n        target,\n        color: below,\n        scale,\n        property\n    });\n    ctx.restore();\n}\nfunction clipVertical(ctx, target, clipY) {\n    const { segments , points  } = target;\n    let first = true;\n    let lineLoop = false;\n    ctx.beginPath();\n    for (const segment of segments){\n        const { start , end  } = segment;\n        const firstPoint = points[start];\n        const lastPoint = points[_findSegmentEnd(start, end, points)];\n        if (first) {\n            ctx.moveTo(firstPoint.x, firstPoint.y);\n            first = false;\n        } else {\n            ctx.lineTo(firstPoint.x, clipY);\n            ctx.lineTo(firstPoint.x, firstPoint.y);\n        }\n        lineLoop = !!target.pathSegment(ctx, segment, {\n            move: lineLoop\n        });\n        if (lineLoop) {\n            ctx.closePath();\n        } else {\n            ctx.lineTo(lastPoint.x, clipY);\n        }\n    }\n    ctx.lineTo(target.first().x, clipY);\n    ctx.closePath();\n    ctx.clip();\n}\nfunction fill(ctx, cfg) {\n    const { line , target , property , color , scale  } = cfg;\n    const segments = _segments(line, target, property);\n    for (const { source: src , target: tgt , start , end  } of segments){\n        const { style: { backgroundColor =color  } = {}  } = src;\n        const notShape = target !== true;\n        ctx.save();\n        ctx.fillStyle = backgroundColor;\n        clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n        ctx.beginPath();\n        const lineLoop = !!line.pathSegment(ctx, src);\n        let loop;\n        if (notShape) {\n            if (lineLoop) {\n                ctx.closePath();\n            } else {\n                interpolatedLineTo(ctx, target, end, property);\n            }\n            const targetLoop = !!target.pathSegment(ctx, tgt, {\n                move: lineLoop,\n                reverse: true\n            });\n            loop = lineLoop && targetLoop;\n            if (!loop) {\n                interpolatedLineTo(ctx, target, start, property);\n            }\n        }\n        ctx.closePath();\n        ctx.fill(loop ? 'evenodd' : 'nonzero');\n        ctx.restore();\n    }\n}\nfunction clipBounds(ctx, scale, bounds) {\n    const { top , bottom  } = scale.chart.chartArea;\n    const { property , start , end  } = bounds || {};\n    if (property === 'x') {\n        ctx.beginPath();\n        ctx.rect(start, top, end - start, bottom - top);\n        ctx.clip();\n    }\n}\nfunction interpolatedLineTo(ctx, target, point, property) {\n    const interpolatedPoint = target.interpolate(point, property);\n    if (interpolatedPoint) {\n        ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n    }\n}\n\nvar index = {\n    id: 'filler',\n    afterDatasetsUpdate (chart, _args, options) {\n        const count = (chart.data.datasets || []).length;\n        const sources = [];\n        let meta, i, line, source;\n        for(i = 0; i < count; ++i){\n            meta = chart.getDatasetMeta(i);\n            line = meta.dataset;\n            source = null;\n            if (line && line.options && line instanceof LineElement) {\n                source = {\n                    visible: chart.isDatasetVisible(i),\n                    index: i,\n                    fill: _decodeFill(line, i, count),\n                    chart,\n                    axis: meta.controller.options.indexAxis,\n                    scale: meta.vScale,\n                    line\n                };\n            }\n            meta.$filler = source;\n            sources.push(source);\n        }\n        for(i = 0; i < count; ++i){\n            source = sources[i];\n            if (!source || source.fill === false) {\n                continue;\n            }\n            source.fill = _resolveTarget(sources, i, options.propagate);\n        }\n    },\n    beforeDraw (chart, _args, options) {\n        const draw = options.drawTime === 'beforeDraw';\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        const area = chart.chartArea;\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (!source) {\n                continue;\n            }\n            source.line.updateControlPoints(area, source.axis);\n            if (draw && source.fill) {\n                _drawfill(chart.ctx, source, area);\n            }\n        }\n    },\n    beforeDatasetsDraw (chart, _args, options) {\n        if (options.drawTime !== 'beforeDatasetsDraw') {\n            return;\n        }\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (_shouldApplyFill(source)) {\n                _drawfill(chart.ctx, source, chart.chartArea);\n            }\n        }\n    },\n    beforeDatasetDraw (chart, args, options) {\n        const source = args.meta.$filler;\n        if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n            return;\n        }\n        _drawfill(chart.ctx, source, chart.chartArea);\n    },\n    defaults: {\n        propagate: true,\n        drawTime: 'beforeDatasetDraw'\n    }\n};\n\nconst getBoxSize = (labelOpts, fontSize)=>{\n    let { boxHeight =fontSize , boxWidth =fontSize  } = labelOpts;\n    if (labelOpts.usePointStyle) {\n        boxHeight = Math.min(boxHeight, fontSize);\n        boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n    }\n    return {\n        boxWidth,\n        boxHeight,\n        itemHeight: Math.max(fontSize, boxHeight)\n    };\n};\nconst itemsEqual = (a, b)=>a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\nclass Legend extends Element {\n constructor(config){\n        super();\n        this._added = false;\n        this.legendHitBoxes = [];\n this._hoveredItem = null;\n        this.doughnutMode = false;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this.legendItems = undefined;\n        this.columnSizes = undefined;\n        this.lineWidths = undefined;\n        this.maxHeight = undefined;\n        this.maxWidth = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this._margins = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight, margins) {\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins;\n        this.setDimensions();\n        this.buildLabels();\n        this.fit();\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = this._margins.left;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = this._margins.top;\n            this.bottom = this.height;\n        }\n    }\n    buildLabels() {\n        const labelOpts = this.options.labels || {};\n        let legendItems = callback(labelOpts.generateLabels, [\n            this.chart\n        ], this) || [];\n        if (labelOpts.filter) {\n            legendItems = legendItems.filter((item)=>labelOpts.filter(item, this.chart.data));\n        }\n        if (labelOpts.sort) {\n            legendItems = legendItems.sort((a, b)=>labelOpts.sort(a, b, this.chart.data));\n        }\n        if (this.options.reverse) {\n            legendItems.reverse();\n        }\n        this.legendItems = legendItems;\n    }\n    fit() {\n        const { options , ctx  } = this;\n        if (!options.display) {\n            this.width = this.height = 0;\n            return;\n        }\n        const labelOpts = options.labels;\n        const labelFont = toFont(labelOpts.font);\n        const fontSize = labelFont.size;\n        const titleHeight = this._computeTitleHeight();\n        const { boxWidth , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        let width, height;\n        ctx.font = labelFont.string;\n        if (this.isHorizontal()) {\n            width = this.maxWidth;\n            height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n        } else {\n            height = this.maxHeight;\n            width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n        }\n        this.width = Math.min(width, options.maxWidth || this.maxWidth);\n        this.height = Math.min(height, options.maxHeight || this.maxHeight);\n    }\n _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n        const { ctx , maxWidth , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const lineWidths = this.lineWidths = [\n            0\n        ];\n        const lineHeight = itemHeight + padding;\n        let totalHeight = titleHeight;\n        ctx.textAlign = 'left';\n        ctx.textBaseline = 'middle';\n        let row = -1;\n        let top = -lineHeight;\n        this.legendItems.forEach((legendItem, i)=>{\n            const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n            if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n                totalHeight += lineHeight;\n                lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n                top += lineHeight;\n                row++;\n            }\n            hitboxes[i] = {\n                left: 0,\n                top,\n                row,\n                width: itemWidth,\n                height: itemHeight\n            };\n            lineWidths[lineWidths.length - 1] += itemWidth + padding;\n        });\n        return totalHeight;\n    }\n    _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n        const { ctx , maxHeight , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const columnSizes = this.columnSizes = [];\n        const heightLimit = maxHeight - titleHeight;\n        let totalWidth = padding;\n        let currentColWidth = 0;\n        let currentColHeight = 0;\n        let left = 0;\n        let col = 0;\n        this.legendItems.forEach((legendItem, i)=>{\n            const { itemWidth , itemHeight  } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n            if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n                totalWidth += currentColWidth + padding;\n                columnSizes.push({\n                    width: currentColWidth,\n                    height: currentColHeight\n                });\n                left += currentColWidth + padding;\n                col++;\n                currentColWidth = currentColHeight = 0;\n            }\n            hitboxes[i] = {\n                left,\n                top: currentColHeight,\n                col,\n                width: itemWidth,\n                height: itemHeight\n            };\n            currentColWidth = Math.max(currentColWidth, itemWidth);\n            currentColHeight += itemHeight + padding;\n        });\n        totalWidth += currentColWidth;\n        columnSizes.push({\n            width: currentColWidth,\n            height: currentColHeight\n        });\n        return totalWidth;\n    }\n    adjustHitBoxes() {\n        if (!this.options.display) {\n            return;\n        }\n        const titleHeight = this._computeTitleHeight();\n        const { legendHitBoxes: hitboxes , options: { align , labels: { padding  } , rtl  }  } = this;\n        const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n        if (this.isHorizontal()) {\n            let row = 0;\n            let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n            for (const hitbox of hitboxes){\n                if (row !== hitbox.row) {\n                    row = hitbox.row;\n                    left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n                }\n                hitbox.top += this.top + titleHeight + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n                left += hitbox.width + padding;\n            }\n        } else {\n            let col = 0;\n            let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n            for (const hitbox of hitboxes){\n                if (hitbox.col !== col) {\n                    col = hitbox.col;\n                    top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n                }\n                hitbox.top = top;\n                hitbox.left += this.left + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n                top += hitbox.height + padding;\n            }\n        }\n    }\n    isHorizontal() {\n        return this.options.position === 'top' || this.options.position === 'bottom';\n    }\n    draw() {\n        if (this.options.display) {\n            const ctx = this.ctx;\n            clipArea(ctx, this);\n            this._draw();\n            unclipArea(ctx);\n        }\n    }\n _draw() {\n        const { options: opts , columnSizes , lineWidths , ctx  } = this;\n        const { align , labels: labelOpts  } = opts;\n        const defaultColor = defaults.color;\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n        const labelFont = toFont(labelOpts.font);\n        const { padding  } = labelOpts;\n        const fontSize = labelFont.size;\n        const halfFontSize = fontSize / 2;\n        let cursor;\n        this.drawTitle();\n        ctx.textAlign = rtlHelper.textAlign('left');\n        ctx.textBaseline = 'middle';\n        ctx.lineWidth = 0.5;\n        ctx.font = labelFont.string;\n        const { boxWidth , boxHeight , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        const drawLegendBox = function(x, y, legendItem) {\n            if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n                return;\n            }\n            ctx.save();\n            const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n            ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n            ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n            ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n            ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n            ctx.lineWidth = lineWidth;\n            ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n            ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n            if (labelOpts.usePointStyle) {\n                const drawOptions = {\n                    radius: boxHeight * Math.SQRT2 / 2,\n                    pointStyle: legendItem.pointStyle,\n                    rotation: legendItem.rotation,\n                    borderWidth: lineWidth\n                };\n                const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n                const centerY = y + halfFontSize;\n                drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n            } else {\n                const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n                const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n                const borderRadius = toTRBLCorners(legendItem.borderRadius);\n                ctx.beginPath();\n                if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                    addRoundedRectPath(ctx, {\n                        x: xBoxLeft,\n                        y: yBoxTop,\n                        w: boxWidth,\n                        h: boxHeight,\n                        radius: borderRadius\n                    });\n                } else {\n                    ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n                }\n                ctx.fill();\n                if (lineWidth !== 0) {\n                    ctx.stroke();\n                }\n            }\n            ctx.restore();\n        };\n        const fillText = function(x, y, legendItem) {\n            renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n                strikethrough: legendItem.hidden,\n                textAlign: rtlHelper.textAlign(legendItem.textAlign)\n            });\n        };\n        const isHorizontal = this.isHorizontal();\n        const titleHeight = this._computeTitleHeight();\n        if (isHorizontal) {\n            cursor = {\n                x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n                y: this.top + padding + titleHeight,\n                line: 0\n            };\n        } else {\n            cursor = {\n                x: this.left + padding,\n                y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n                line: 0\n            };\n        }\n        overrideTextDirection(this.ctx, opts.textDirection);\n        const lineHeight = itemHeight + padding;\n        this.legendItems.forEach((legendItem, i)=>{\n            ctx.strokeStyle = legendItem.fontColor;\n            ctx.fillStyle = legendItem.fontColor;\n            const textWidth = ctx.measureText(legendItem.text).width;\n            const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n            const width = boxWidth + halfFontSize + textWidth;\n            let x = cursor.x;\n            let y = cursor.y;\n            rtlHelper.setWidth(this.width);\n            if (isHorizontal) {\n                if (i > 0 && x + width + padding > this.right) {\n                    y = cursor.y += lineHeight;\n                    cursor.line++;\n                    x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n                }\n            } else if (i > 0 && y + lineHeight > this.bottom) {\n                x = cursor.x = x + columnSizes[cursor.line].width + padding;\n                cursor.line++;\n                y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n            }\n            const realX = rtlHelper.x(x);\n            drawLegendBox(realX, y, legendItem);\n            x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n            fillText(rtlHelper.x(x), y, legendItem);\n            if (isHorizontal) {\n                cursor.x += width + padding;\n            } else if (typeof legendItem.text !== 'string') {\n                const fontLineHeight = labelFont.lineHeight;\n                cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\n            } else {\n                cursor.y += lineHeight;\n            }\n        });\n        restoreTextDirection(this.ctx, opts.textDirection);\n    }\n drawTitle() {\n        const opts = this.options;\n        const titleOpts = opts.title;\n        const titleFont = toFont(titleOpts.font);\n        const titlePadding = toPadding(titleOpts.padding);\n        if (!titleOpts.display) {\n            return;\n        }\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n        const ctx = this.ctx;\n        const position = titleOpts.position;\n        const halfFontSize = titleFont.size / 2;\n        const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n        let y;\n        let left = this.left;\n        let maxWidth = this.width;\n        if (this.isHorizontal()) {\n            maxWidth = Math.max(...this.lineWidths);\n            y = this.top + topPaddingPlusHalfFontSize;\n            left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n        } else {\n            const maxHeight = this.columnSizes.reduce((acc, size)=>Math.max(acc, size.height), 0);\n            y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n        }\n        const x = _alignStartEnd(position, left, left + maxWidth);\n        ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n        ctx.textBaseline = 'middle';\n        ctx.strokeStyle = titleOpts.color;\n        ctx.fillStyle = titleOpts.color;\n        ctx.font = titleFont.string;\n        renderText(ctx, titleOpts.text, x, y, titleFont);\n    }\n _computeTitleHeight() {\n        const titleOpts = this.options.title;\n        const titleFont = toFont(titleOpts.font);\n        const titlePadding = toPadding(titleOpts.padding);\n        return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n    }\n _getLegendItemAt(x, y) {\n        let i, hitBox, lh;\n        if (_isBetween(x, this.left, this.right) && _isBetween(y, this.top, this.bottom)) {\n            lh = this.legendHitBoxes;\n            for(i = 0; i < lh.length; ++i){\n                hitBox = lh[i];\n                if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n                    return this.legendItems[i];\n                }\n            }\n        }\n        return null;\n    }\n handleEvent(e) {\n        const opts = this.options;\n        if (!isListened(e.type, opts)) {\n            return;\n        }\n        const hoveredItem = this._getLegendItemAt(e.x, e.y);\n        if (e.type === 'mousemove' || e.type === 'mouseout') {\n            const previous = this._hoveredItem;\n            const sameItem = itemsEqual(previous, hoveredItem);\n            if (previous && !sameItem) {\n                callback(opts.onLeave, [\n                    e,\n                    previous,\n                    this\n                ], this);\n            }\n            this._hoveredItem = hoveredItem;\n            if (hoveredItem && !sameItem) {\n                callback(opts.onHover, [\n                    e,\n                    hoveredItem,\n                    this\n                ], this);\n            }\n        } else if (hoveredItem) {\n            callback(opts.onClick, [\n                e,\n                hoveredItem,\n                this\n            ], this);\n        }\n    }\n}\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n    const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n    const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n    return {\n        itemWidth,\n        itemHeight\n    };\n}\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n    let legendItemText = legendItem.text;\n    if (legendItemText && typeof legendItemText !== 'string') {\n        legendItemText = legendItemText.reduce((a, b)=>a.length > b.length ? a : b);\n    }\n    return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;\n}\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n    let itemHeight = _itemHeight;\n    if (typeof legendItem.text !== 'string') {\n        itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n    }\n    return itemHeight;\n}\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n    const labelHeight = legendItem.text ? legendItem.text.length : 0;\n    return fontLineHeight * labelHeight;\n}\nfunction isListened(type, opts) {\n    if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n        return true;\n    }\n    if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n        return true;\n    }\n    return false;\n}\nvar plugin_legend = {\n    id: 'legend',\n _element: Legend,\n    start (chart, _args, options) {\n        const legend = chart.legend = new Legend({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, legend, options);\n        layouts.addBox(chart, legend);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, chart.legend);\n        delete chart.legend;\n    },\n    beforeUpdate (chart, _args, options) {\n        const legend = chart.legend;\n        layouts.configure(chart, legend, options);\n        legend.options = options;\n    },\n    afterUpdate (chart) {\n        const legend = chart.legend;\n        legend.buildLabels();\n        legend.adjustHitBoxes();\n    },\n    afterEvent (chart, args) {\n        if (!args.replay) {\n            chart.legend.handleEvent(args.event);\n        }\n    },\n    defaults: {\n        display: true,\n        position: 'top',\n        align: 'center',\n        fullSize: true,\n        reverse: false,\n        weight: 1000,\n        onClick (e, legendItem, legend) {\n            const index = legendItem.datasetIndex;\n            const ci = legend.chart;\n            if (ci.isDatasetVisible(index)) {\n                ci.hide(index);\n                legendItem.hidden = true;\n            } else {\n                ci.show(index);\n                legendItem.hidden = false;\n            }\n        },\n        onHover: null,\n        onLeave: null,\n        labels: {\n            color: (ctx)=>ctx.chart.options.color,\n            boxWidth: 40,\n            padding: 10,\n            generateLabels (chart) {\n                const datasets = chart.data.datasets;\n                const { labels: { usePointStyle , pointStyle , textAlign , color , useBorderRadius , borderRadius  }  } = chart.legend.options;\n                return chart._getSortedDatasetMetas().map((meta)=>{\n                    const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n                    const borderWidth = toPadding(style.borderWidth);\n                    return {\n                        text: datasets[meta.index].label,\n                        fillStyle: style.backgroundColor,\n                        fontColor: color,\n                        hidden: !meta.visible,\n                        lineCap: style.borderCapStyle,\n                        lineDash: style.borderDash,\n                        lineDashOffset: style.borderDashOffset,\n                        lineJoin: style.borderJoinStyle,\n                        lineWidth: (borderWidth.width + borderWidth.height) / 4,\n                        strokeStyle: style.borderColor,\n                        pointStyle: pointStyle || style.pointStyle,\n                        rotation: style.rotation,\n                        textAlign: textAlign || style.textAlign,\n                        borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n                        datasetIndex: meta.index\n                    };\n                }, this);\n            }\n        },\n        title: {\n            color: (ctx)=>ctx.chart.options.color,\n            display: false,\n            position: 'center',\n            text: ''\n        }\n    },\n    descriptors: {\n        _scriptable: (name)=>!name.startsWith('on'),\n        labels: {\n            _scriptable: (name)=>![\n                    'generateLabels',\n                    'filter',\n                    'sort'\n                ].includes(name)\n        }\n    }\n};\n\nclass Title extends Element {\n constructor(config){\n        super();\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this._padding = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight) {\n        const opts = this.options;\n        this.left = 0;\n        this.top = 0;\n        if (!opts.display) {\n            this.width = this.height = this.right = this.bottom = 0;\n            return;\n        }\n        this.width = this.right = maxWidth;\n        this.height = this.bottom = maxHeight;\n        const lineCount = isArray(opts.text) ? opts.text.length : 1;\n        this._padding = toPadding(opts.padding);\n        const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n        if (this.isHorizontal()) {\n            this.height = textSize;\n        } else {\n            this.width = textSize;\n        }\n    }\n    isHorizontal() {\n        const pos = this.options.position;\n        return pos === 'top' || pos === 'bottom';\n    }\n    _drawArgs(offset) {\n        const { top , left , bottom , right , options  } = this;\n        const align = options.align;\n        let rotation = 0;\n        let maxWidth, titleX, titleY;\n        if (this.isHorizontal()) {\n            titleX = _alignStartEnd(align, left, right);\n            titleY = top + offset;\n            maxWidth = right - left;\n        } else {\n            if (options.position === 'left') {\n                titleX = left + offset;\n                titleY = _alignStartEnd(align, bottom, top);\n                rotation = PI * -0.5;\n            } else {\n                titleX = right - offset;\n                titleY = _alignStartEnd(align, top, bottom);\n                rotation = PI * 0.5;\n            }\n            maxWidth = bottom - top;\n        }\n        return {\n            titleX,\n            titleY,\n            maxWidth,\n            rotation\n        };\n    }\n    draw() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        if (!opts.display) {\n            return;\n        }\n        const fontOpts = toFont(opts.font);\n        const lineHeight = fontOpts.lineHeight;\n        const offset = lineHeight / 2 + this._padding.top;\n        const { titleX , titleY , maxWidth , rotation  } = this._drawArgs(offset);\n        renderText(ctx, opts.text, 0, 0, fontOpts, {\n            color: opts.color,\n            maxWidth,\n            rotation,\n            textAlign: _toLeftRightCenter(opts.align),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n}\nfunction createTitle(chart, titleOpts) {\n    const title = new Title({\n        ctx: chart.ctx,\n        options: titleOpts,\n        chart\n    });\n    layouts.configure(chart, title, titleOpts);\n    layouts.addBox(chart, title);\n    chart.titleBlock = title;\n}\nvar plugin_title = {\n    id: 'title',\n _element: Title,\n    start (chart, _args, options) {\n        createTitle(chart, options);\n    },\n    stop (chart) {\n        const titleBlock = chart.titleBlock;\n        layouts.removeBox(chart, titleBlock);\n        delete chart.titleBlock;\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = chart.titleBlock;\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'bold'\n        },\n        fullSize: true,\n        padding: 10,\n        position: 'top',\n        text: '',\n        weight: 2000\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst map = new WeakMap();\nvar plugin_subtitle = {\n    id: 'subtitle',\n    start (chart, _args, options) {\n        const title = new Title({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, title, options);\n        layouts.addBox(chart, title);\n        map.set(chart, title);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, map.get(chart));\n        map.delete(chart);\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = map.get(chart);\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'normal'\n        },\n        fullSize: true,\n        padding: 0,\n        position: 'top',\n        text: '',\n        weight: 1500\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst positioners = {\n average (items) {\n        if (!items.length) {\n            return false;\n        }\n        let i, len;\n        let xSet = new Set();\n        let y = 0;\n        let count = 0;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const pos = el.tooltipPosition();\n                xSet.add(pos.x);\n                y += pos.y;\n                ++count;\n            }\n        }\n        const xAverage = [\n            ...xSet\n        ].reduce((a, b)=>a + b) / xSet.size;\n        return {\n            x: xAverage,\n            y: y / count\n        };\n    },\n nearest (items, eventPosition) {\n        if (!items.length) {\n            return false;\n        }\n        let x = eventPosition.x;\n        let y = eventPosition.y;\n        let minDistance = Number.POSITIVE_INFINITY;\n        let i, len, nearestElement;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const center = el.getCenterPoint();\n                const d = distanceBetweenPoints(eventPosition, center);\n                if (d < minDistance) {\n                    minDistance = d;\n                    nearestElement = el;\n                }\n            }\n        }\n        if (nearestElement) {\n            const tp = nearestElement.tooltipPosition();\n            x = tp.x;\n            y = tp.y;\n        }\n        return {\n            x,\n            y\n        };\n    }\n};\nfunction pushOrConcat(base, toPush) {\n    if (toPush) {\n        if (isArray(toPush)) {\n            Array.prototype.push.apply(base, toPush);\n        } else {\n            base.push(toPush);\n        }\n    }\n    return base;\n}\n function splitNewlines(str) {\n    if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n        return str.split('\\n');\n    }\n    return str;\n}\n function createTooltipItem(chart, item) {\n    const { element , datasetIndex , index  } = item;\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n    const { label , value  } = controller.getLabelAndValue(index);\n    return {\n        chart,\n        label,\n        parsed: controller.getParsed(index),\n        raw: chart.data.datasets[datasetIndex].data[index],\n        formattedValue: value,\n        dataset: controller.getDataset(),\n        dataIndex: index,\n        datasetIndex,\n        element\n    };\n}\n function getTooltipSize(tooltip, options) {\n    const ctx = tooltip.chart.ctx;\n    const { body , footer , title  } = tooltip;\n    const { boxWidth , boxHeight  } = options;\n    const bodyFont = toFont(options.bodyFont);\n    const titleFont = toFont(options.titleFont);\n    const footerFont = toFont(options.footerFont);\n    const titleLineCount = title.length;\n    const footerLineCount = footer.length;\n    const bodyLineItemCount = body.length;\n    const padding = toPadding(options.padding);\n    let height = padding.height;\n    let width = 0;\n    let combinedBodyLength = body.reduce((count, bodyItem)=>count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n    combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n    if (titleLineCount) {\n        height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n    }\n    if (combinedBodyLength) {\n        const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n        height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n    }\n    if (footerLineCount) {\n        height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n    }\n    let widthPadding = 0;\n    const maxLineWidth = function(line) {\n        width = Math.max(width, ctx.measureText(line).width + widthPadding);\n    };\n    ctx.save();\n    ctx.font = titleFont.string;\n    each(tooltip.title, maxLineWidth);\n    ctx.font = bodyFont.string;\n    each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n    widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\n    each(body, (bodyItem)=>{\n        each(bodyItem.before, maxLineWidth);\n        each(bodyItem.lines, maxLineWidth);\n        each(bodyItem.after, maxLineWidth);\n    });\n    widthPadding = 0;\n    ctx.font = footerFont.string;\n    each(tooltip.footer, maxLineWidth);\n    ctx.restore();\n    width += padding.width;\n    return {\n        width,\n        height\n    };\n}\nfunction determineYAlign(chart, size) {\n    const { y , height  } = size;\n    if (y < height / 2) {\n        return 'top';\n    } else if (y > chart.height - height / 2) {\n        return 'bottom';\n    }\n    return 'center';\n}\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n    const { x , width  } = size;\n    const caret = options.caretSize + options.caretPadding;\n    if (xAlign === 'left' && x + width + caret > chart.width) {\n        return true;\n    }\n    if (xAlign === 'right' && x - width - caret < 0) {\n        return true;\n    }\n}\nfunction determineXAlign(chart, options, size, yAlign) {\n    const { x , width  } = size;\n    const { width: chartWidth , chartArea: { left , right  }  } = chart;\n    let xAlign = 'center';\n    if (yAlign === 'center') {\n        xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n    } else if (x <= width / 2) {\n        xAlign = 'left';\n    } else if (x >= chartWidth - width / 2) {\n        xAlign = 'right';\n    }\n    if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n        xAlign = 'center';\n    }\n    return xAlign;\n}\n function determineAlignment(chart, options, size) {\n    const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n    return {\n        xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n        yAlign\n    };\n}\nfunction alignX(size, xAlign) {\n    let { x , width  } = size;\n    if (xAlign === 'right') {\n        x -= width;\n    } else if (xAlign === 'center') {\n        x -= width / 2;\n    }\n    return x;\n}\nfunction alignY(size, yAlign, paddingAndSize) {\n    let { y , height  } = size;\n    if (yAlign === 'top') {\n        y += paddingAndSize;\n    } else if (yAlign === 'bottom') {\n        y -= height + paddingAndSize;\n    } else {\n        y -= height / 2;\n    }\n    return y;\n}\n function getBackgroundPoint(options, size, alignment, chart) {\n    const { caretSize , caretPadding , cornerRadius  } = options;\n    const { xAlign , yAlign  } = alignment;\n    const paddingAndSize = caretSize + caretPadding;\n    const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\n    let x = alignX(size, xAlign);\n    const y = alignY(size, yAlign, paddingAndSize);\n    if (yAlign === 'center') {\n        if (xAlign === 'left') {\n            x += paddingAndSize;\n        } else if (xAlign === 'right') {\n            x -= paddingAndSize;\n        }\n    } else if (xAlign === 'left') {\n        x -= Math.max(topLeft, bottomLeft) + caretSize;\n    } else if (xAlign === 'right') {\n        x += Math.max(topRight, bottomRight) + caretSize;\n    }\n    return {\n        x: _limitValue(x, 0, chart.width - size.width),\n        y: _limitValue(y, 0, chart.height - size.height)\n    };\n}\nfunction getAlignedX(tooltip, align, options) {\n    const padding = toPadding(options.padding);\n    return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n}\n function getBeforeAfterBodyLines(callback) {\n    return pushOrConcat([], splitNewlines(callback));\n}\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n    return createContext(parent, {\n        tooltip,\n        tooltipItems,\n        type: 'tooltip'\n    });\n}\nfunction overrideCallbacks(callbacks, context) {\n    const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n    return override ? callbacks.override(override) : callbacks;\n}\nconst defaultCallbacks = {\n    beforeTitle: noop,\n    title (tooltipItems) {\n        if (tooltipItems.length > 0) {\n            const item = tooltipItems[0];\n            const labels = item.chart.data.labels;\n            const labelCount = labels ? labels.length : 0;\n            if (this && this.options && this.options.mode === 'dataset') {\n                return item.dataset.label || '';\n            } else if (item.label) {\n                return item.label;\n            } else if (labelCount > 0 && item.dataIndex < labelCount) {\n                return labels[item.dataIndex];\n            }\n        }\n        return '';\n    },\n    afterTitle: noop,\n    beforeBody: noop,\n    beforeLabel: noop,\n    label (tooltipItem) {\n        if (this && this.options && this.options.mode === 'dataset') {\n            return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n        }\n        let label = tooltipItem.dataset.label || '';\n        if (label) {\n            label += ': ';\n        }\n        const value = tooltipItem.formattedValue;\n        if (!isNullOrUndef(value)) {\n            label += value;\n        }\n        return label;\n    },\n    labelColor (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            borderColor: options.borderColor,\n            backgroundColor: options.backgroundColor,\n            borderWidth: options.borderWidth,\n            borderDash: options.borderDash,\n            borderDashOffset: options.borderDashOffset,\n            borderRadius: 0\n        };\n    },\n    labelTextColor () {\n        return this.options.bodyColor;\n    },\n    labelPointStyle (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            pointStyle: options.pointStyle,\n            rotation: options.rotation\n        };\n    },\n    afterLabel: noop,\n    afterBody: noop,\n    beforeFooter: noop,\n    footer: noop,\n    afterFooter: noop\n};\n function invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n    const result = callbacks[name].call(ctx, arg);\n    if (typeof result === 'undefined') {\n        return defaultCallbacks[name].call(ctx, arg);\n    }\n    return result;\n}\nclass Tooltip extends Element {\n static positioners = positioners;\n    constructor(config){\n        super();\n        this.opacity = 0;\n        this._active = [];\n        this._eventPosition = undefined;\n        this._size = undefined;\n        this._cachedAnimations = undefined;\n        this._tooltipItems = [];\n        this.$animations = undefined;\n        this.$context = undefined;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.dataPoints = undefined;\n        this.title = undefined;\n        this.beforeBody = undefined;\n        this.body = undefined;\n        this.afterBody = undefined;\n        this.footer = undefined;\n        this.xAlign = undefined;\n        this.yAlign = undefined;\n        this.x = undefined;\n        this.y = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this.caretX = undefined;\n        this.caretY = undefined;\n        this.labelColors = undefined;\n        this.labelPointStyles = undefined;\n        this.labelTextColors = undefined;\n    }\n    initialize(options) {\n        this.options = options;\n        this._cachedAnimations = undefined;\n        this.$context = undefined;\n    }\n _resolveAnimations() {\n        const cached = this._cachedAnimations;\n        if (cached) {\n            return cached;\n        }\n        const chart = this.chart;\n        const options = this.options.setContext(this.getContext());\n        const opts = options.enabled && chart.options.animation && options.animations;\n        const animations = new Animations(this.chart, opts);\n        if (opts._cacheable) {\n            this._cachedAnimations = Object.freeze(animations);\n        }\n        return animations;\n    }\n getContext() {\n        return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n    }\n    getTitle(context, options) {\n        const { callbacks  } = options;\n        const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n        const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n        const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n        lines = pushOrConcat(lines, splitNewlines(title));\n        lines = pushOrConcat(lines, splitNewlines(afterTitle));\n        return lines;\n    }\n    getBeforeBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));\n    }\n    getBody(tooltipItems, options) {\n        const { callbacks  } = options;\n        const bodyItems = [];\n        each(tooltipItems, (context)=>{\n            const bodyItem = {\n                before: [],\n                lines: [],\n                after: []\n            };\n            const scoped = overrideCallbacks(callbacks, context);\n            pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n            pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n            pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n            bodyItems.push(bodyItem);\n        });\n        return bodyItems;\n    }\n    getAfterBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));\n    }\n    getFooter(tooltipItems, options) {\n        const { callbacks  } = options;\n        const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n        const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n        const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n        lines = pushOrConcat(lines, splitNewlines(footer));\n        lines = pushOrConcat(lines, splitNewlines(afterFooter));\n        return lines;\n    }\n _createItems(options) {\n        const active = this._active;\n        const data = this.chart.data;\n        const labelColors = [];\n        const labelPointStyles = [];\n        const labelTextColors = [];\n        let tooltipItems = [];\n        let i, len;\n        for(i = 0, len = active.length; i < len; ++i){\n            tooltipItems.push(createTooltipItem(this.chart, active[i]));\n        }\n        if (options.filter) {\n            tooltipItems = tooltipItems.filter((element, index, array)=>options.filter(element, index, array, data));\n        }\n        if (options.itemSort) {\n            tooltipItems = tooltipItems.sort((a, b)=>options.itemSort(a, b, data));\n        }\n        each(tooltipItems, (context)=>{\n            const scoped = overrideCallbacks(options.callbacks, context);\n            labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n            labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n            labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n        });\n        this.labelColors = labelColors;\n        this.labelPointStyles = labelPointStyles;\n        this.labelTextColors = labelTextColors;\n        this.dataPoints = tooltipItems;\n        return tooltipItems;\n    }\n    update(changed, replay) {\n        const options = this.options.setContext(this.getContext());\n        const active = this._active;\n        let properties;\n        let tooltipItems = [];\n        if (!active.length) {\n            if (this.opacity !== 0) {\n                properties = {\n                    opacity: 0\n                };\n            }\n        } else {\n            const position = positioners[options.position].call(this, active, this._eventPosition);\n            tooltipItems = this._createItems(options);\n            this.title = this.getTitle(tooltipItems, options);\n            this.beforeBody = this.getBeforeBody(tooltipItems, options);\n            this.body = this.getBody(tooltipItems, options);\n            this.afterBody = this.getAfterBody(tooltipItems, options);\n            this.footer = this.getFooter(tooltipItems, options);\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, size);\n            const alignment = determineAlignment(this.chart, options, positionAndSize);\n            const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n            this.xAlign = alignment.xAlign;\n            this.yAlign = alignment.yAlign;\n            properties = {\n                opacity: 1,\n                x: backgroundPoint.x,\n                y: backgroundPoint.y,\n                width: size.width,\n                height: size.height,\n                caretX: position.x,\n                caretY: position.y\n            };\n        }\n        this._tooltipItems = tooltipItems;\n        this.$context = undefined;\n        if (properties) {\n            this._resolveAnimations().update(this, properties);\n        }\n        if (changed && options.external) {\n            options.external.call(this, {\n                chart: this.chart,\n                tooltip: this,\n                replay\n            });\n        }\n    }\n    drawCaret(tooltipPoint, ctx, size, options) {\n        const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n        ctx.lineTo(caretPosition.x1, caretPosition.y1);\n        ctx.lineTo(caretPosition.x2, caretPosition.y2);\n        ctx.lineTo(caretPosition.x3, caretPosition.y3);\n    }\n    getCaretPosition(tooltipPoint, size, options) {\n        const { xAlign , yAlign  } = this;\n        const { caretSize , cornerRadius  } = options;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\n        const { x: ptX , y: ptY  } = tooltipPoint;\n        const { width , height  } = size;\n        let x1, x2, x3, y1, y2, y3;\n        if (yAlign === 'center') {\n            y2 = ptY + height / 2;\n            if (xAlign === 'left') {\n                x1 = ptX;\n                x2 = x1 - caretSize;\n                y1 = y2 + caretSize;\n                y3 = y2 - caretSize;\n            } else {\n                x1 = ptX + width;\n                x2 = x1 + caretSize;\n                y1 = y2 - caretSize;\n                y3 = y2 + caretSize;\n            }\n            x3 = x1;\n        } else {\n            if (xAlign === 'left') {\n                x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\n            } else if (xAlign === 'right') {\n                x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n            } else {\n                x2 = this.caretX;\n            }\n            if (yAlign === 'top') {\n                y1 = ptY;\n                y2 = y1 - caretSize;\n                x1 = x2 - caretSize;\n                x3 = x2 + caretSize;\n            } else {\n                y1 = ptY + height;\n                y2 = y1 + caretSize;\n                x1 = x2 + caretSize;\n                x3 = x2 - caretSize;\n            }\n            y3 = y1;\n        }\n        return {\n            x1,\n            x2,\n            x3,\n            y1,\n            y2,\n            y3\n        };\n    }\n    drawTitle(pt, ctx, options) {\n        const title = this.title;\n        const length = title.length;\n        let titleFont, titleSpacing, i;\n        if (length) {\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.titleAlign, options);\n            ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n            ctx.textBaseline = 'middle';\n            titleFont = toFont(options.titleFont);\n            titleSpacing = options.titleSpacing;\n            ctx.fillStyle = options.titleColor;\n            ctx.font = titleFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n                pt.y += titleFont.lineHeight + titleSpacing;\n                if (i + 1 === length) {\n                    pt.y += options.titleMarginBottom - titleSpacing;\n                }\n            }\n        }\n    }\n _drawColorBox(ctx, pt, i, rtlHelper, options) {\n        const labelColor = this.labelColors[i];\n        const labelPointStyle = this.labelPointStyles[i];\n        const { boxHeight , boxWidth  } = options;\n        const bodyFont = toFont(options.bodyFont);\n        const colorX = getAlignedX(this, 'left', options);\n        const rtlColorX = rtlHelper.x(colorX);\n        const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n        const colorY = pt.y + yOffSet;\n        if (options.usePointStyle) {\n            const drawOptions = {\n                radius: Math.min(boxWidth, boxHeight) / 2,\n                pointStyle: labelPointStyle.pointStyle,\n                rotation: labelPointStyle.rotation,\n                borderWidth: 1\n            };\n            const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n            const centerY = colorY + boxHeight / 2;\n            ctx.strokeStyle = options.multiKeyBackground;\n            ctx.fillStyle = options.multiKeyBackground;\n            drawPoint(ctx, drawOptions, centerX, centerY);\n            ctx.strokeStyle = labelColor.borderColor;\n            ctx.fillStyle = labelColor.backgroundColor;\n            drawPoint(ctx, drawOptions, centerX, centerY);\n        } else {\n            ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;\n            ctx.strokeStyle = labelColor.borderColor;\n            ctx.setLineDash(labelColor.borderDash || []);\n            ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n            const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n            const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n            const borderRadius = toTRBLCorners(labelColor.borderRadius);\n            if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                ctx.beginPath();\n                ctx.fillStyle = options.multiKeyBackground;\n                addRoundedRectPath(ctx, {\n                    x: outerX,\n                    y: colorY,\n                    w: boxWidth,\n                    h: boxHeight,\n                    radius: borderRadius\n                });\n                ctx.fill();\n                ctx.stroke();\n                ctx.fillStyle = labelColor.backgroundColor;\n                ctx.beginPath();\n                addRoundedRectPath(ctx, {\n                    x: innerX,\n                    y: colorY + 1,\n                    w: boxWidth - 2,\n                    h: boxHeight - 2,\n                    radius: borderRadius\n                });\n                ctx.fill();\n            } else {\n                ctx.fillStyle = options.multiKeyBackground;\n                ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.fillStyle = labelColor.backgroundColor;\n                ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n            }\n        }\n        ctx.fillStyle = this.labelTextColors[i];\n    }\n    drawBody(pt, ctx, options) {\n        const { body  } = this;\n        const { bodySpacing , bodyAlign , displayColors , boxHeight , boxWidth , boxPadding  } = options;\n        const bodyFont = toFont(options.bodyFont);\n        let bodyLineHeight = bodyFont.lineHeight;\n        let xLinePadding = 0;\n        const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n        const fillLineOfText = function(line) {\n            ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n            pt.y += bodyLineHeight + bodySpacing;\n        };\n        const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n        let bodyItem, textColor, lines, i, j, ilen, jlen;\n        ctx.textAlign = bodyAlign;\n        ctx.textBaseline = 'middle';\n        ctx.font = bodyFont.string;\n        pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n        ctx.fillStyle = options.bodyColor;\n        each(this.beforeBody, fillLineOfText);\n        xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\n        for(i = 0, ilen = body.length; i < ilen; ++i){\n            bodyItem = body[i];\n            textColor = this.labelTextColors[i];\n            ctx.fillStyle = textColor;\n            each(bodyItem.before, fillLineOfText);\n            lines = bodyItem.lines;\n            if (displayColors && lines.length) {\n                this._drawColorBox(ctx, pt, i, rtlHelper, options);\n                bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n            }\n            for(j = 0, jlen = lines.length; j < jlen; ++j){\n                fillLineOfText(lines[j]);\n                bodyLineHeight = bodyFont.lineHeight;\n            }\n            each(bodyItem.after, fillLineOfText);\n        }\n        xLinePadding = 0;\n        bodyLineHeight = bodyFont.lineHeight;\n        each(this.afterBody, fillLineOfText);\n        pt.y -= bodySpacing;\n    }\n    drawFooter(pt, ctx, options) {\n        const footer = this.footer;\n        const length = footer.length;\n        let footerFont, i;\n        if (length) {\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.footerAlign, options);\n            pt.y += options.footerMarginTop;\n            ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n            ctx.textBaseline = 'middle';\n            footerFont = toFont(options.footerFont);\n            ctx.fillStyle = options.footerColor;\n            ctx.font = footerFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n                pt.y += footerFont.lineHeight + options.footerSpacing;\n            }\n        }\n    }\n    drawBackground(pt, ctx, tooltipSize, options) {\n        const { xAlign , yAlign  } = this;\n        const { x , y  } = pt;\n        const { width , height  } = tooltipSize;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(options.cornerRadius);\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.beginPath();\n        ctx.moveTo(x + topLeft, y);\n        if (yAlign === 'top') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width - topRight, y);\n        ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n        if (yAlign === 'center' && xAlign === 'right') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width, y + height - bottomRight);\n        ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n        if (yAlign === 'bottom') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + bottomLeft, y + height);\n        ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n        if (yAlign === 'center' && xAlign === 'left') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x, y + topLeft);\n        ctx.quadraticCurveTo(x, y, x + topLeft, y);\n        ctx.closePath();\n        ctx.fill();\n        if (options.borderWidth > 0) {\n            ctx.stroke();\n        }\n    }\n _updateAnimationTarget(options) {\n        const chart = this.chart;\n        const anims = this.$animations;\n        const animX = anims && anims.x;\n        const animY = anims && anims.y;\n        if (animX || animY) {\n            const position = positioners[options.position].call(this, this._active, this._eventPosition);\n            if (!position) {\n                return;\n            }\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, this._size);\n            const alignment = determineAlignment(chart, options, positionAndSize);\n            const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n            if (animX._to !== point.x || animY._to !== point.y) {\n                this.xAlign = alignment.xAlign;\n                this.yAlign = alignment.yAlign;\n                this.width = size.width;\n                this.height = size.height;\n                this.caretX = position.x;\n                this.caretY = position.y;\n                this._resolveAnimations().update(this, point);\n            }\n        }\n    }\n _willRender() {\n        return !!this.opacity;\n    }\n    draw(ctx) {\n        const options = this.options.setContext(this.getContext());\n        let opacity = this.opacity;\n        if (!opacity) {\n            return;\n        }\n        this._updateAnimationTarget(options);\n        const tooltipSize = {\n            width: this.width,\n            height: this.height\n        };\n        const pt = {\n            x: this.x,\n            y: this.y\n        };\n        opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n        const padding = toPadding(options.padding);\n        const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n        if (options.enabled && hasTooltipContent) {\n            ctx.save();\n            ctx.globalAlpha = opacity;\n            this.drawBackground(pt, ctx, tooltipSize, options);\n            overrideTextDirection(ctx, options.textDirection);\n            pt.y += padding.top;\n            this.drawTitle(pt, ctx, options);\n            this.drawBody(pt, ctx, options);\n            this.drawFooter(pt, ctx, options);\n            restoreTextDirection(ctx, options.textDirection);\n            ctx.restore();\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements, eventPosition) {\n        const lastActive = this._active;\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.chart.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('Cannot find a dataset at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !_elementsEqual(lastActive, active);\n        const positionChanged = this._positionChanged(active, eventPosition);\n        if (changed || positionChanged) {\n            this._active = active;\n            this._eventPosition = eventPosition;\n            this._ignoreReplayEvents = true;\n            this.update(true);\n        }\n    }\n handleEvent(e, replay, inChartArea = true) {\n        if (replay && this._ignoreReplayEvents) {\n            return false;\n        }\n        this._ignoreReplayEvents = false;\n        const options = this.options;\n        const lastActive = this._active || [];\n        const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n        const positionChanged = this._positionChanged(active, e);\n        const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n        if (changed) {\n            this._active = active;\n            if (options.enabled || options.external) {\n                this._eventPosition = {\n                    x: e.x,\n                    y: e.y\n                };\n                this.update(true, replay);\n            }\n        }\n        return changed;\n    }\n _getActiveElements(e, lastActive, replay, inChartArea) {\n        const options = this.options;\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive.filter((i)=>this.chart.data.datasets[i.datasetIndex] && this.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== undefined);\n        }\n        const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n        if (options.reverse) {\n            active.reverse();\n        }\n        return active;\n    }\n _positionChanged(active, e) {\n        const { caretX , caretY , options  } = this;\n        const position = positioners[options.position].call(this, active, e);\n        return position !== false && (caretX !== position.x || caretY !== position.y);\n    }\n}\nvar plugin_tooltip = {\n    id: 'tooltip',\n    _element: Tooltip,\n    positioners,\n    afterInit (chart, _args, options) {\n        if (options) {\n            chart.tooltip = new Tooltip({\n                chart,\n                options\n            });\n        }\n    },\n    beforeUpdate (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    reset (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    afterDraw (chart) {\n        const tooltip = chart.tooltip;\n        if (tooltip && tooltip._willRender()) {\n            const args = {\n                tooltip\n            };\n            if (chart.notifyPlugins('beforeTooltipDraw', {\n                ...args,\n                cancelable: true\n            }) === false) {\n                return;\n            }\n            tooltip.draw(chart.ctx);\n            chart.notifyPlugins('afterTooltipDraw', args);\n        }\n    },\n    afterEvent (chart, args) {\n        if (chart.tooltip) {\n            const useFinalPosition = args.replay;\n            if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n                args.changed = true;\n            }\n        }\n    },\n    defaults: {\n        enabled: true,\n        external: null,\n        position: 'average',\n        backgroundColor: 'rgba(0,0,0,0.8)',\n        titleColor: '#fff',\n        titleFont: {\n            weight: 'bold'\n        },\n        titleSpacing: 2,\n        titleMarginBottom: 6,\n        titleAlign: 'left',\n        bodyColor: '#fff',\n        bodySpacing: 2,\n        bodyFont: {},\n        bodyAlign: 'left',\n        footerColor: '#fff',\n        footerSpacing: 2,\n        footerMarginTop: 6,\n        footerFont: {\n            weight: 'bold'\n        },\n        footerAlign: 'left',\n        padding: 6,\n        caretPadding: 2,\n        caretSize: 5,\n        cornerRadius: 6,\n        boxHeight: (ctx, opts)=>opts.bodyFont.size,\n        boxWidth: (ctx, opts)=>opts.bodyFont.size,\n        multiKeyBackground: '#fff',\n        displayColors: true,\n        boxPadding: 0,\n        borderColor: 'rgba(0,0,0,0)',\n        borderWidth: 0,\n        animation: {\n            duration: 400,\n            easing: 'easeOutQuart'\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'width',\n                    'height',\n                    'caretX',\n                    'caretY'\n                ]\n            },\n            opacity: {\n                easing: 'linear',\n                duration: 200\n            }\n        },\n        callbacks: defaultCallbacks\n    },\n    defaultRoutes: {\n        bodyFont: 'font',\n        footerFont: 'font',\n        titleFont: 'font'\n    },\n    descriptors: {\n        _scriptable: (name)=>name !== 'filter' && name !== 'itemSort' && name !== 'external',\n        _indexable: false,\n        callbacks: {\n            _scriptable: false,\n            _indexable: false\n        },\n        animation: {\n            _fallback: false\n        },\n        animations: {\n            _fallback: 'animation'\n        }\n    },\n    additionalOptionScopes: [\n        'interaction'\n    ]\n};\n\nvar plugins = /*#__PURE__*/Object.freeze({\n__proto__: null,\nColors: plugin_colors,\nDecimation: plugin_decimation,\nFiller: index,\nLegend: plugin_legend,\nSubTitle: plugin_subtitle,\nTitle: plugin_title,\nTooltip: plugin_tooltip\n});\n\nconst addIfString = (labels, raw, index, addedLabels)=>{\n    if (typeof raw === 'string') {\n        index = labels.push(raw) - 1;\n        addedLabels.unshift({\n            index,\n            label: raw\n        });\n    } else if (isNaN(raw)) {\n        index = null;\n    }\n    return index;\n};\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n    const first = labels.indexOf(raw);\n    if (first === -1) {\n        return addIfString(labels, raw, index, addedLabels);\n    }\n    const last = labels.lastIndexOf(raw);\n    return first !== last ? index : first;\n}\nconst validIndex = (index, max)=>index === null ? null : _limitValue(Math.round(index), 0, max);\nfunction _getLabelForValue(value) {\n    const labels = this.getLabels();\n    if (value >= 0 && value < labels.length) {\n        return labels[value];\n    }\n    return value;\n}\nclass CategoryScale extends Scale {\n    static id = 'category';\n static defaults = {\n        ticks: {\n            callback: _getLabelForValue\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this._startValue = undefined;\n        this._valueRange = 0;\n        this._addedLabels = [];\n    }\n    init(scaleOptions) {\n        const added = this._addedLabels;\n        if (added.length) {\n            const labels = this.getLabels();\n            for (const { index , label  } of added){\n                if (labels[index] === label) {\n                    labels.splice(index, 1);\n                }\n            }\n            this._addedLabels = [];\n        }\n        super.init(scaleOptions);\n    }\n    parse(raw, index) {\n        if (isNullOrUndef(raw)) {\n            return null;\n        }\n        const labels = this.getLabels();\n        index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n        return validIndex(index, labels.length - 1);\n    }\n    determineDataLimits() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this.getMinMax(true);\n        if (this.options.bounds === 'ticks') {\n            if (!minDefined) {\n                min = 0;\n            }\n            if (!maxDefined) {\n                max = this.getLabels().length - 1;\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const min = this.min;\n        const max = this.max;\n        const offset = this.options.offset;\n        const ticks = [];\n        let labels = this.getLabels();\n        labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n        this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n        this._startValue = this.min - (offset ? 0.5 : 0);\n        for(let value = min; value <= max; value++){\n            ticks.push({\n                value\n            });\n        }\n        return ticks;\n    }\n    getLabelForValue(value) {\n        return _getLabelForValue.call(this, value);\n    }\n configure() {\n        super.configure();\n        if (!this.isHorizontal()) {\n            this._reversePixels = !this._reversePixels;\n        }\n    }\n    getPixelForValue(value) {\n        if (typeof value !== 'number') {\n            value = this.parse(value);\n        }\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n    getValueForPixel(pixel) {\n        return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n    }\n    getBasePixel() {\n        return this.bottom;\n    }\n}\n\nfunction generateTicks$1(generationOptions, dataRange) {\n    const ticks = [];\n    const MIN_SPACING = 1e-14;\n    const { bounds , step , min , max , precision , count , maxTicks , maxDigits , includeBounds  } = generationOptions;\n    const unit = step || 1;\n    const maxSpaces = maxTicks - 1;\n    const { min: rmin , max: rmax  } = dataRange;\n    const minDefined = !isNullOrUndef(min);\n    const maxDefined = !isNullOrUndef(max);\n    const countDefined = !isNullOrUndef(count);\n    const minSpacing = (rmax - rmin) / (maxDigits + 1);\n    let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n    let factor, niceMin, niceMax, numSpaces;\n    if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n        return [\n            {\n                value: rmin\n            },\n            {\n                value: rmax\n            }\n        ];\n    }\n    numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n    if (numSpaces > maxSpaces) {\n        spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n    }\n    if (!isNullOrUndef(precision)) {\n        factor = Math.pow(10, precision);\n        spacing = Math.ceil(spacing * factor) / factor;\n    }\n    if (bounds === 'ticks') {\n        niceMin = Math.floor(rmin / spacing) * spacing;\n        niceMax = Math.ceil(rmax / spacing) * spacing;\n    } else {\n        niceMin = rmin;\n        niceMax = rmax;\n    }\n    if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n        numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n        spacing = (max - min) / numSpaces;\n        niceMin = min;\n        niceMax = max;\n    } else if (countDefined) {\n        niceMin = minDefined ? min : niceMin;\n        niceMax = maxDefined ? max : niceMax;\n        numSpaces = count - 1;\n        spacing = (niceMax - niceMin) / numSpaces;\n    } else {\n        numSpaces = (niceMax - niceMin) / spacing;\n        if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n            numSpaces = Math.round(numSpaces);\n        } else {\n            numSpaces = Math.ceil(numSpaces);\n        }\n    }\n    const decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));\n    factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n    niceMin = Math.round(niceMin * factor) / factor;\n    niceMax = Math.round(niceMax * factor) / factor;\n    let j = 0;\n    if (minDefined) {\n        if (includeBounds && niceMin !== min) {\n            ticks.push({\n                value: min\n            });\n            if (niceMin < min) {\n                j++;\n            }\n            if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n                j++;\n            }\n        } else if (niceMin < min) {\n            j++;\n        }\n    }\n    for(; j < numSpaces; ++j){\n        const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n        if (maxDefined && tickValue > max) {\n            break;\n        }\n        ticks.push({\n            value: tickValue\n        });\n    }\n    if (maxDefined && includeBounds && niceMax !== max) {\n        if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n            ticks[ticks.length - 1].value = max;\n        } else {\n            ticks.push({\n                value: max\n            });\n        }\n    } else if (!maxDefined || niceMax === max) {\n        ticks.push({\n            value: niceMax\n        });\n    }\n    return ticks;\n}\nfunction relativeLabelSize(value, minSpacing, { horizontal , minRotation  }) {\n    const rad = toRadians(minRotation);\n    const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n    const length = 0.75 * minSpacing * ('' + value).length;\n    return Math.min(minSpacing / ratio, length);\n}\nclass LinearScaleBase extends Scale {\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n         this._endValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        if (isNullOrUndef(raw)) {\n            return null;\n        }\n        if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n            return null;\n        }\n        return +raw;\n    }\n    handleTickRangeOptions() {\n        const { beginAtZero  } = this.options;\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (beginAtZero) {\n            const minSign = sign(min);\n            const maxSign = sign(max);\n            if (minSign < 0 && maxSign < 0) {\n                setMax(0);\n            } else if (minSign > 0 && maxSign > 0) {\n                setMin(0);\n            }\n        }\n        if (min === max) {\n            let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n            setMax(max + offset);\n            if (!beginAtZero) {\n                setMin(min - offset);\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    getTickLimit() {\n        const tickOpts = this.options.ticks;\n        let { maxTicksLimit , stepSize  } = tickOpts;\n        let maxTicks;\n        if (stepSize) {\n            maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n            if (maxTicks > 1000) {\n                console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n                maxTicks = 1000;\n            }\n        } else {\n            maxTicks = this.computeTickLimit();\n            maxTicksLimit = maxTicksLimit || 11;\n        }\n        if (maxTicksLimit) {\n            maxTicks = Math.min(maxTicksLimit, maxTicks);\n        }\n        return maxTicks;\n    }\n computeTickLimit() {\n        return Number.POSITIVE_INFINITY;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        let maxTicks = this.getTickLimit();\n        maxTicks = Math.max(2, maxTicks);\n        const numericGeneratorOptions = {\n            maxTicks,\n            bounds: opts.bounds,\n            min: opts.min,\n            max: opts.max,\n            precision: tickOpts.precision,\n            step: tickOpts.stepSize,\n            count: tickOpts.count,\n            maxDigits: this._maxDigits(),\n            horizontal: this.isHorizontal(),\n            minRotation: tickOpts.minRotation || 0,\n            includeBounds: tickOpts.includeBounds !== false\n        };\n        const dataRange = this._range || this;\n        const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n        if (opts.bounds === 'ticks') {\n            _setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n configure() {\n        const ticks = this.ticks;\n        let start = this.min;\n        let end = this.max;\n        super.configure();\n        if (this.options.offset && ticks.length) {\n            const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n            start -= offset;\n            end += offset;\n        }\n        this._startValue = start;\n        this._endValue = end;\n        this._valueRange = end - start;\n    }\n    getLabelForValue(value) {\n        return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n}\n\nclass LinearScale extends LinearScaleBase {\n    static id = 'linear';\n static defaults = {\n        ticks: {\n            callback: Ticks.formatters.numeric\n        }\n    };\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = isNumberFinite(min) ? min : 0;\n        this.max = isNumberFinite(max) ? max : 1;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        const horizontal = this.isHorizontal();\n        const length = horizontal ? this.width : this.height;\n        const minRotation = toRadians(this.options.ticks.minRotation);\n        const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n        const tickFont = this._resolveTickFontOptions(0);\n        return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n    }\n    getPixelForValue(value) {\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n    }\n}\n\nconst log10Floor = (v)=>Math.floor(log10(v));\nconst changeExponent = (v, m)=>Math.pow(10, log10Floor(v) + m);\nfunction isMajor(tickVal) {\n    const remain = tickVal / Math.pow(10, log10Floor(tickVal));\n    return remain === 1;\n}\nfunction steps(min, max, rangeExp) {\n    const rangeStep = Math.pow(10, rangeExp);\n    const start = Math.floor(min / rangeStep);\n    const end = Math.ceil(max / rangeStep);\n    return end - start;\n}\nfunction startExp(min, max) {\n    const range = max - min;\n    let rangeExp = log10Floor(range);\n    while(steps(min, max, rangeExp) > 10){\n        rangeExp++;\n    }\n    while(steps(min, max, rangeExp) < 10){\n        rangeExp--;\n    }\n    return Math.min(rangeExp, log10Floor(min));\n}\n function generateTicks(generationOptions, { min , max  }) {\n    min = finiteOrDefault(generationOptions.min, min);\n    const ticks = [];\n    const minExp = log10Floor(min);\n    let exp = startExp(min, max);\n    let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n    const stepSize = Math.pow(10, exp);\n    const base = minExp > exp ? Math.pow(10, minExp) : 0;\n    const start = Math.round((min - base) * precision) / precision;\n    const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n    let significand = Math.floor((start - offset) / Math.pow(10, exp));\n    let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n    while(value < max){\n        ticks.push({\n            value,\n            major: isMajor(value),\n            significand\n        });\n        if (significand >= 10) {\n            significand = significand < 15 ? 15 : 20;\n        } else {\n            significand++;\n        }\n        if (significand >= 20) {\n            exp++;\n            significand = 2;\n            precision = exp >= 0 ? 1 : precision;\n        }\n        value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n    }\n    const lastTick = finiteOrDefault(generationOptions.max, value);\n    ticks.push({\n        value: lastTick,\n        major: isMajor(lastTick),\n        significand\n    });\n    return ticks;\n}\nclass LogarithmicScale extends Scale {\n    static id = 'logarithmic';\n static defaults = {\n        ticks: {\n            callback: Ticks.formatters.logarithmic,\n            major: {\n                enabled: true\n            }\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        const value = LinearScaleBase.prototype.parse.apply(this, [\n            raw,\n            index\n        ]);\n        if (value === 0) {\n            this._zero = true;\n            return undefined;\n        }\n        return isNumberFinite(value) && value > 0 ? value : null;\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = isNumberFinite(min) ? Math.max(0, min) : null;\n        this.max = isNumberFinite(max) ? Math.max(0, max) : null;\n        if (this.options.beginAtZero) {\n            this._zero = true;\n        }\n        if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {\n            this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n        }\n        this.handleTickRangeOptions();\n    }\n    handleTickRangeOptions() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let min = this.min;\n        let max = this.max;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (min === max) {\n            if (min <= 0) {\n                setMin(1);\n                setMax(10);\n            } else {\n                setMin(changeExponent(min, -1));\n                setMax(changeExponent(max, +1));\n            }\n        }\n        if (min <= 0) {\n            setMin(changeExponent(max, -1));\n        }\n        if (max <= 0) {\n            setMax(changeExponent(min, +1));\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const generationOptions = {\n            min: this._userMin,\n            max: this._userMax\n        };\n        const ticks = generateTicks(generationOptions, this);\n        if (opts.bounds === 'ticks') {\n            _setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n getLabelForValue(value) {\n        return value === undefined ? '0' : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n configure() {\n        const start = this.min;\n        super.configure();\n        this._startValue = log10(start);\n        this._valueRange = log10(this.max) - log10(start);\n    }\n    getPixelForValue(value) {\n        if (value === undefined || value === 0) {\n            value = this.min;\n        }\n        if (value === null || isNaN(value)) {\n            return NaN;\n        }\n        return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        const decimal = this.getDecimalForPixel(pixel);\n        return Math.pow(10, this._startValue + decimal * this._valueRange);\n    }\n}\n\nfunction getTickBackdropHeight(opts) {\n    const tickOpts = opts.ticks;\n    if (tickOpts.display && opts.display) {\n        const padding = toPadding(tickOpts.backdropPadding);\n        return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n    }\n    return 0;\n}\nfunction measureLabelSize(ctx, font, label) {\n    label = isArray(label) ? label : [\n        label\n    ];\n    return {\n        w: _longestText(ctx, font.string, label),\n        h: label.length * font.lineHeight\n    };\n}\nfunction determineLimits(angle, pos, size, min, max) {\n    if (angle === min || angle === max) {\n        return {\n            start: pos - size / 2,\n            end: pos + size / 2\n        };\n    } else if (angle < min || angle > max) {\n        return {\n            start: pos - size,\n            end: pos\n        };\n    }\n    return {\n        start: pos,\n        end: pos + size\n    };\n}\n function fitWithPointLabels(scale) {\n    const orig = {\n        l: scale.left + scale._padding.left,\n        r: scale.right - scale._padding.right,\n        t: scale.top + scale._padding.top,\n        b: scale.bottom - scale._padding.bottom\n    };\n    const limits = Object.assign({}, orig);\n    const labelSizes = [];\n    const padding = [];\n    const valueCount = scale._pointLabels.length;\n    const pointLabelOpts = scale.options.pointLabels;\n    const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n    for(let i = 0; i < valueCount; i++){\n        const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n        padding[i] = opts.padding;\n        const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n        const plFont = toFont(opts.font);\n        const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n        labelSizes[i] = textSize;\n        const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n        const angle = Math.round(toDegrees(angleRadians));\n        const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n        const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n        updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n    }\n    scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\n    scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n    const sin = Math.abs(Math.sin(angle));\n    const cos = Math.abs(Math.cos(angle));\n    let x = 0;\n    let y = 0;\n    if (hLimits.start < orig.l) {\n        x = (orig.l - hLimits.start) / sin;\n        limits.l = Math.min(limits.l, orig.l - x);\n    } else if (hLimits.end > orig.r) {\n        x = (hLimits.end - orig.r) / sin;\n        limits.r = Math.max(limits.r, orig.r + x);\n    }\n    if (vLimits.start < orig.t) {\n        y = (orig.t - vLimits.start) / cos;\n        limits.t = Math.min(limits.t, orig.t - y);\n    } else if (vLimits.end > orig.b) {\n        y = (vLimits.end - orig.b) / cos;\n        limits.b = Math.max(limits.b, orig.b + y);\n    }\n}\nfunction createPointLabelItem(scale, index, itemOpts) {\n    const outerDistance = scale.drawingArea;\n    const { extra , additionalAngle , padding , size  } = itemOpts;\n    const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n    const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n    const y = yForAngle(pointLabelPosition.y, size.h, angle);\n    const textAlign = getTextAlignForAngle(angle);\n    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n    return {\n        visible: true,\n        x: pointLabelPosition.x,\n        y,\n        textAlign,\n        left,\n        top: y,\n        right: left + size.w,\n        bottom: y + size.h\n    };\n}\nfunction isNotOverlapped(item, area) {\n    if (!area) {\n        return true;\n    }\n    const { left , top , right , bottom  } = item;\n    const apexesInArea = _isPointInArea({\n        x: left,\n        y: top\n    }, area) || _isPointInArea({\n        x: left,\n        y: bottom\n    }, area) || _isPointInArea({\n        x: right,\n        y: top\n    }, area) || _isPointInArea({\n        x: right,\n        y: bottom\n    }, area);\n    return !apexesInArea;\n}\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n    const items = [];\n    const valueCount = scale._pointLabels.length;\n    const opts = scale.options;\n    const { centerPointLabels , display  } = opts.pointLabels;\n    const itemOpts = {\n        extra: getTickBackdropHeight(opts) / 2,\n        additionalAngle: centerPointLabels ? PI / valueCount : 0\n    };\n    let area;\n    for(let i = 0; i < valueCount; i++){\n        itemOpts.padding = padding[i];\n        itemOpts.size = labelSizes[i];\n        const item = createPointLabelItem(scale, i, itemOpts);\n        items.push(item);\n        if (display === 'auto') {\n            item.visible = isNotOverlapped(item, area);\n            if (item.visible) {\n                area = item;\n            }\n        }\n    }\n    return items;\n}\nfunction getTextAlignForAngle(angle) {\n    if (angle === 0 || angle === 180) {\n        return 'center';\n    } else if (angle < 180) {\n        return 'left';\n    }\n    return 'right';\n}\nfunction leftForTextAlign(x, w, align) {\n    if (align === 'right') {\n        x -= w;\n    } else if (align === 'center') {\n        x -= w / 2;\n    }\n    return x;\n}\nfunction yForAngle(y, h, angle) {\n    if (angle === 90 || angle === 270) {\n        y -= h / 2;\n    } else if (angle > 270 || angle < 90) {\n        y -= h;\n    }\n    return y;\n}\nfunction drawPointLabelBox(ctx, opts, item) {\n    const { left , top , right , bottom  } = item;\n    const { backdropColor  } = opts;\n    if (!isNullOrUndef(backdropColor)) {\n        const borderRadius = toTRBLCorners(opts.borderRadius);\n        const padding = toPadding(opts.backdropPadding);\n        ctx.fillStyle = backdropColor;\n        const backdropLeft = left - padding.left;\n        const backdropTop = top - padding.top;\n        const backdropWidth = right - left + padding.width;\n        const backdropHeight = bottom - top + padding.height;\n        if (Object.values(borderRadius).some((v)=>v !== 0)) {\n            ctx.beginPath();\n            addRoundedRectPath(ctx, {\n                x: backdropLeft,\n                y: backdropTop,\n                w: backdropWidth,\n                h: backdropHeight,\n                radius: borderRadius\n            });\n            ctx.fill();\n        } else {\n            ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n        }\n    }\n}\nfunction drawPointLabels(scale, labelCount) {\n    const { ctx , options: { pointLabels  }  } = scale;\n    for(let i = labelCount - 1; i >= 0; i--){\n        const item = scale._pointLabelItems[i];\n        if (!item.visible) {\n            continue;\n        }\n        const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n        drawPointLabelBox(ctx, optsAtIndex, item);\n        const plFont = toFont(optsAtIndex.font);\n        const { x , y , textAlign  } = item;\n        renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n            color: optsAtIndex.color,\n            textAlign: textAlign,\n            textBaseline: 'middle'\n        });\n    }\n}\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n    const { ctx  } = scale;\n    if (circular) {\n        ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n    } else {\n        let pointPosition = scale.getPointPosition(0, radius);\n        ctx.moveTo(pointPosition.x, pointPosition.y);\n        for(let i = 1; i < labelCount; i++){\n            pointPosition = scale.getPointPosition(i, radius);\n            ctx.lineTo(pointPosition.x, pointPosition.y);\n        }\n    }\n}\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n    const ctx = scale.ctx;\n    const circular = gridLineOpts.circular;\n    const { color , lineWidth  } = gridLineOpts;\n    if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\n        return;\n    }\n    ctx.save();\n    ctx.strokeStyle = color;\n    ctx.lineWidth = lineWidth;\n    ctx.setLineDash(borderOpts.dash);\n    ctx.lineDashOffset = borderOpts.dashOffset;\n    ctx.beginPath();\n    pathRadiusLine(scale, radius, circular, labelCount);\n    ctx.closePath();\n    ctx.stroke();\n    ctx.restore();\n}\nfunction createPointLabelContext(parent, index, label) {\n    return createContext(parent, {\n        label,\n        index,\n        type: 'pointLabel'\n    });\n}\nclass RadialLinearScale extends LinearScaleBase {\n    static id = 'radialLinear';\n static defaults = {\n        display: true,\n        animate: true,\n        position: 'chartArea',\n        angleLines: {\n            display: true,\n            lineWidth: 1,\n            borderDash: [],\n            borderDashOffset: 0.0\n        },\n        grid: {\n            circular: false\n        },\n        startAngle: 0,\n        ticks: {\n            showLabelBackdrop: true,\n            callback: Ticks.formatters.numeric\n        },\n        pointLabels: {\n            backdropColor: undefined,\n            backdropPadding: 2,\n            display: true,\n            font: {\n                size: 10\n            },\n            callback (label) {\n                return label;\n            },\n            padding: 5,\n            centerPointLabels: false\n        }\n    };\n    static defaultRoutes = {\n        'angleLines.color': 'borderColor',\n        'pointLabels.color': 'color',\n        'ticks.color': 'color'\n    };\n    static descriptors = {\n        angleLines: {\n            _fallback: 'grid'\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.xCenter = undefined;\n         this.yCenter = undefined;\n         this.drawingArea = undefined;\n         this._pointLabels = [];\n        this._pointLabelItems = [];\n    }\n    setDimensions() {\n        const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n        const w = this.width = this.maxWidth - padding.width;\n        const h = this.height = this.maxHeight - padding.height;\n        this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n        this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n        this.drawingArea = Math.floor(Math.min(w, h) / 2);\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(false);\n        this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n        this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n    }\n    generateTickLabels(ticks) {\n        LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n        this._pointLabels = this.getLabels().map((value, index)=>{\n            const label = callback(this.options.pointLabels.callback, [\n                value,\n                index\n            ], this);\n            return label || label === 0 ? label : '';\n        }).filter((v, i)=>this.chart.getDataVisibility(i));\n    }\n    fit() {\n        const opts = this.options;\n        if (opts.display && opts.pointLabels.display) {\n            fitWithPointLabels(this);\n        } else {\n            this.setCenterPoint(0, 0, 0, 0);\n        }\n    }\n    setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n        this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n        this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n        this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n    }\n    getIndexAngle(index) {\n        const angleMultiplier = TAU / (this._pointLabels.length || 1);\n        const startAngle = this.options.startAngle || 0;\n        return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n    }\n    getDistanceFromCenterForValue(value) {\n        if (isNullOrUndef(value)) {\n            return NaN;\n        }\n        const scalingFactor = this.drawingArea / (this.max - this.min);\n        if (this.options.reverse) {\n            return (this.max - value) * scalingFactor;\n        }\n        return (value - this.min) * scalingFactor;\n    }\n    getValueForDistanceFromCenter(distance) {\n        if (isNullOrUndef(distance)) {\n            return NaN;\n        }\n        const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n        return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n    }\n    getPointLabelContext(index) {\n        const pointLabels = this._pointLabels || [];\n        if (index >= 0 && index < pointLabels.length) {\n            const pointLabel = pointLabels[index];\n            return createPointLabelContext(this.getContext(), index, pointLabel);\n        }\n    }\n    getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n        const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n        return {\n            x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n            y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n            angle\n        };\n    }\n    getPointPositionForValue(index, value) {\n        return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n    }\n    getBasePosition(index) {\n        return this.getPointPositionForValue(index || 0, this.getBaseValue());\n    }\n    getPointLabelPosition(index) {\n        const { left , top , right , bottom  } = this._pointLabelItems[index];\n        return {\n            left,\n            top,\n            right,\n            bottom\n        };\n    }\n drawBackground() {\n        const { backgroundColor , grid: { circular  }  } = this.options;\n        if (backgroundColor) {\n            const ctx = this.ctx;\n            ctx.save();\n            ctx.beginPath();\n            pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n            ctx.closePath();\n            ctx.fillStyle = backgroundColor;\n            ctx.fill();\n            ctx.restore();\n        }\n    }\n drawGrid() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const { angleLines , grid , border  } = opts;\n        const labelCount = this._pointLabels.length;\n        let i, offset, position;\n        if (opts.pointLabels.display) {\n            drawPointLabels(this, labelCount);\n        }\n        if (grid.display) {\n            this.ticks.forEach((tick, index)=>{\n                if (index !== 0 || index === 0 && this.min < 0) {\n                    offset = this.getDistanceFromCenterForValue(tick.value);\n                    const context = this.getContext(index);\n                    const optsAtIndex = grid.setContext(context);\n                    const optsAtIndexBorder = border.setContext(context);\n                    drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n                }\n            });\n        }\n        if (angleLines.display) {\n            ctx.save();\n            for(i = labelCount - 1; i >= 0; i--){\n                const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n                const { color , lineWidth  } = optsAtIndex;\n                if (!lineWidth || !color) {\n                    continue;\n                }\n                ctx.lineWidth = lineWidth;\n                ctx.strokeStyle = color;\n                ctx.setLineDash(optsAtIndex.borderDash);\n                ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n                offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\n                position = this.getPointPosition(i, offset);\n                ctx.beginPath();\n                ctx.moveTo(this.xCenter, this.yCenter);\n                ctx.lineTo(position.x, position.y);\n                ctx.stroke();\n            }\n            ctx.restore();\n        }\n    }\n drawBorder() {}\n drawLabels() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        if (!tickOpts.display) {\n            return;\n        }\n        const startAngle = this.getIndexAngle(0);\n        let offset, width;\n        ctx.save();\n        ctx.translate(this.xCenter, this.yCenter);\n        ctx.rotate(startAngle);\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        this.ticks.forEach((tick, index)=>{\n            if (index === 0 && this.min >= 0 && !opts.reverse) {\n                return;\n            }\n            const optsAtIndex = tickOpts.setContext(this.getContext(index));\n            const tickFont = toFont(optsAtIndex.font);\n            offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n            if (optsAtIndex.showLabelBackdrop) {\n                ctx.font = tickFont.string;\n                width = ctx.measureText(tick.label).width;\n                ctx.fillStyle = optsAtIndex.backdropColor;\n                const padding = toPadding(optsAtIndex.backdropPadding);\n                ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n            }\n            renderText(ctx, tick.label, 0, -offset, tickFont, {\n                color: optsAtIndex.color,\n                strokeColor: optsAtIndex.textStrokeColor,\n                strokeWidth: optsAtIndex.textStrokeWidth\n            });\n        });\n        ctx.restore();\n    }\n drawTitle() {}\n}\n\nconst INTERVALS = {\n    millisecond: {\n        common: true,\n        size: 1,\n        steps: 1000\n    },\n    second: {\n        common: true,\n        size: 1000,\n        steps: 60\n    },\n    minute: {\n        common: true,\n        size: 60000,\n        steps: 60\n    },\n    hour: {\n        common: true,\n        size: 3600000,\n        steps: 24\n    },\n    day: {\n        common: true,\n        size: 86400000,\n        steps: 30\n    },\n    week: {\n        common: false,\n        size: 604800000,\n        steps: 4\n    },\n    month: {\n        common: true,\n        size: 2.628e9,\n        steps: 12\n    },\n    quarter: {\n        common: false,\n        size: 7.884e9,\n        steps: 4\n    },\n    year: {\n        common: true,\n        size: 3.154e10\n    }\n};\n const UNITS =  /* #__PURE__ */ Object.keys(INTERVALS);\n function sorter(a, b) {\n    return a - b;\n}\n function parse(scale, input) {\n    if (isNullOrUndef(input)) {\n        return null;\n    }\n    const adapter = scale._adapter;\n    const { parser , round , isoWeekday  } = scale._parseOpts;\n    let value = input;\n    if (typeof parser === 'function') {\n        value = parser(value);\n    }\n    if (!isNumberFinite(value)) {\n        value = typeof parser === 'string' ? adapter.parse(value,  parser) : adapter.parse(value);\n    }\n    if (value === null) {\n        return null;\n    }\n    if (round) {\n        value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\n    }\n    return +value;\n}\n function determineUnitForAutoTicks(minUnit, min, max, capacity) {\n    const ilen = UNITS.length;\n    for(let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i){\n        const interval = INTERVALS[UNITS[i]];\n        const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n        if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n            return UNITS[i];\n        }\n    }\n    return UNITS[ilen - 1];\n}\n function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n    for(let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--){\n        const unit = UNITS[i];\n        if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n            return unit;\n        }\n    }\n    return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n function determineMajorUnit(unit) {\n    for(let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i){\n        if (INTERVALS[UNITS[i]].common) {\n            return UNITS[i];\n        }\n    }\n}\n function addTick(ticks, time, timestamps) {\n    if (!timestamps) {\n        ticks[time] = true;\n    } else if (timestamps.length) {\n        const { lo , hi  } = _lookup(timestamps, time);\n        const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n        ticks[timestamp] = true;\n    }\n}\n function setMajorTicks(scale, ticks, map, majorUnit) {\n    const adapter = scale._adapter;\n    const first = +adapter.startOf(ticks[0].value, majorUnit);\n    const last = ticks[ticks.length - 1].value;\n    let major, index;\n    for(major = first; major <= last; major = +adapter.add(major, 1, majorUnit)){\n        index = map[major];\n        if (index >= 0) {\n            ticks[index].major = true;\n        }\n    }\n    return ticks;\n}\n function ticksFromTimestamps(scale, values, majorUnit) {\n    const ticks = [];\n     const map = {};\n    const ilen = values.length;\n    let i, value;\n    for(i = 0; i < ilen; ++i){\n        value = values[i];\n        map[value] = i;\n        ticks.push({\n            value,\n            major: false\n        });\n    }\n    return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\nclass TimeScale extends Scale {\n    static id = 'time';\n static defaults = {\n bounds: 'data',\n        adapters: {},\n        time: {\n            parser: false,\n            unit: false,\n            round: false,\n            isoWeekday: false,\n            minUnit: 'millisecond',\n            displayFormats: {}\n        },\n        ticks: {\n source: 'auto',\n            callback: false,\n            major: {\n                enabled: false\n            }\n        }\n    };\n constructor(props){\n        super(props);\n         this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n         this._unit = 'day';\n         this._majorUnit = undefined;\n        this._offsets = {};\n        this._normalized = false;\n        this._parseOpts = undefined;\n    }\n    init(scaleOpts, opts = {}) {\n        const time = scaleOpts.time || (scaleOpts.time = {});\n         const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n        adapter.init(opts);\n        mergeIf(time.displayFormats, adapter.formats());\n        this._parseOpts = {\n            parser: time.parser,\n            round: time.round,\n            isoWeekday: time.isoWeekday\n        };\n        super.init(scaleOpts);\n        this._normalized = opts.normalized;\n    }\n parse(raw, index) {\n        if (raw === undefined) {\n            return null;\n        }\n        return parse(this, raw);\n    }\n    beforeLayout() {\n        super.beforeLayout();\n        this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n    }\n    determineDataLimits() {\n        const options = this.options;\n        const adapter = this._adapter;\n        const unit = options.time.unit || 'day';\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n function _applyBounds(bounds) {\n            if (!minDefined && !isNaN(bounds.min)) {\n                min = Math.min(min, bounds.min);\n            }\n            if (!maxDefined && !isNaN(bounds.max)) {\n                max = Math.max(max, bounds.max);\n            }\n        }\n        if (!minDefined || !maxDefined) {\n            _applyBounds(this._getLabelBounds());\n            if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n                _applyBounds(this.getMinMax(false));\n            }\n        }\n        min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n        max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n        this.min = Math.min(min, max - 1);\n        this.max = Math.max(min + 1, max);\n    }\n _getLabelBounds() {\n        const arr = this.getLabelTimestamps();\n        let min = Number.POSITIVE_INFINITY;\n        let max = Number.NEGATIVE_INFINITY;\n        if (arr.length) {\n            min = arr[0];\n            max = arr[arr.length - 1];\n        }\n        return {\n            min,\n            max\n        };\n    }\n buildTicks() {\n        const options = this.options;\n        const timeOpts = options.time;\n        const tickOpts = options.ticks;\n        const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n        if (options.bounds === 'ticks' && timestamps.length) {\n            this.min = this._userMin || timestamps[0];\n            this.max = this._userMax || timestamps[timestamps.length - 1];\n        }\n        const min = this.min;\n        const max = this.max;\n        const ticks = _filterBetween(timestamps, min, max);\n        this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n        this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);\n        this.initOffsets(timestamps);\n        if (options.reverse) {\n            ticks.reverse();\n        }\n        return ticksFromTimestamps(this, ticks, this._majorUnit);\n    }\n    afterAutoSkip() {\n        if (this.options.offsetAfterAutoskip) {\n            this.initOffsets(this.ticks.map((tick)=>+tick.value));\n        }\n    }\n initOffsets(timestamps = []) {\n        let start = 0;\n        let end = 0;\n        let first, last;\n        if (this.options.offset && timestamps.length) {\n            first = this.getDecimalForValue(timestamps[0]);\n            if (timestamps.length === 1) {\n                start = 1 - first;\n            } else {\n                start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n            }\n            last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n            if (timestamps.length === 1) {\n                end = last;\n            } else {\n                end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n            }\n        }\n        const limit = timestamps.length < 3 ? 0.5 : 0.25;\n        start = _limitValue(start, 0, limit);\n        end = _limitValue(end, 0, limit);\n        this._offsets = {\n            start,\n            end,\n            factor: 1 / (start + 1 + end)\n        };\n    }\n _generate() {\n        const adapter = this._adapter;\n        const min = this.min;\n        const max = this.max;\n        const options = this.options;\n        const timeOpts = options.time;\n        const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n        const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n        const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n        const hasWeekday = isNumber(weekday) || weekday === true;\n        const ticks = {};\n        let first = min;\n        let time, count;\n        if (hasWeekday) {\n            first = +adapter.startOf(first, 'isoWeek', weekday);\n        }\n        first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n        if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n            throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n        }\n        const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n        for(time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++){\n            addTick(ticks, time, timestamps);\n        }\n        if (time === max || options.bounds === 'ticks' || count === 1) {\n            addTick(ticks, time, timestamps);\n        }\n        return Object.keys(ticks).sort(sorter).map((x)=>+x);\n    }\n getLabelForValue(value) {\n        const adapter = this._adapter;\n        const timeOpts = this.options.time;\n        if (timeOpts.tooltipFormat) {\n            return adapter.format(value, timeOpts.tooltipFormat);\n        }\n        return adapter.format(value, timeOpts.displayFormats.datetime);\n    }\n format(value, format) {\n        const options = this.options;\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const fmt = format || formats[unit];\n        return this._adapter.format(value, fmt);\n    }\n _tickFormatFunction(time, index, ticks, format) {\n        const options = this.options;\n        const formatter = options.ticks.callback;\n        if (formatter) {\n            return callback(formatter, [\n                time,\n                index,\n                ticks\n            ], this);\n        }\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const majorUnit = this._majorUnit;\n        const minorFormat = unit && formats[unit];\n        const majorFormat = majorUnit && formats[majorUnit];\n        const tick = ticks[index];\n        const major = majorUnit && majorFormat && tick && tick.major;\n        return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n    }\n generateTickLabels(ticks) {\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            tick.label = this._tickFormatFunction(tick.value, i, ticks);\n        }\n    }\n getDecimalForValue(value) {\n        return value === null ? NaN : (value - this.min) / (this.max - this.min);\n    }\n getPixelForValue(value) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForValue(value);\n        return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return this.min + pos * (this.max - this.min);\n    }\n _getLabelSize(label) {\n        const ticksOpts = this.options.ticks;\n        const tickLabelWidth = this.ctx.measureText(label).width;\n        const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n        const cosRotation = Math.cos(angle);\n        const sinRotation = Math.sin(angle);\n        const tickFontSize = this._resolveTickFontOptions(0).size;\n        return {\n            w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n            h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n        };\n    }\n _getLabelCapacity(exampleTime) {\n        const timeOpts = this.options.time;\n        const displayFormats = timeOpts.displayFormats;\n        const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n        const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [\n            exampleTime\n        ], this._majorUnit), format);\n        const size = this._getLabelSize(exampleLabel);\n        const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n        return capacity > 0 ? capacity : 1;\n    }\n getDataTimestamps() {\n        let timestamps = this._cache.data || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const metas = this.getMatchingVisibleMetas();\n        if (this._normalized && metas.length) {\n            return this._cache.data = metas[0].controller.getAllParsedValues(this);\n        }\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n        }\n        return this._cache.data = this.normalize(timestamps);\n    }\n getLabelTimestamps() {\n        const timestamps = this._cache.labels || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const labels = this.getLabels();\n        for(i = 0, ilen = labels.length; i < ilen; ++i){\n            timestamps.push(parse(this, labels[i]));\n        }\n        return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\n    }\n normalize(values) {\n        return _arrayUnique(values.sort(sorter));\n    }\n}\n\nfunction interpolate(table, val, reverse) {\n    let lo = 0;\n    let hi = table.length - 1;\n    let prevSource, nextSource, prevTarget, nextTarget;\n    if (reverse) {\n        if (val >= table[lo].pos && val <= table[hi].pos) {\n            ({ lo , hi  } = _lookupByKey(table, 'pos', val));\n        }\n        ({ pos: prevSource , time: prevTarget  } = table[lo]);\n        ({ pos: nextSource , time: nextTarget  } = table[hi]);\n    } else {\n        if (val >= table[lo].time && val <= table[hi].time) {\n            ({ lo , hi  } = _lookupByKey(table, 'time', val));\n        }\n        ({ time: prevSource , pos: prevTarget  } = table[lo]);\n        ({ time: nextSource , pos: nextTarget  } = table[hi]);\n    }\n    const span = nextSource - prevSource;\n    return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\nclass TimeSeriesScale extends TimeScale {\n    static id = 'timeseries';\n static defaults = TimeScale.defaults;\n constructor(props){\n        super(props);\n         this._table = [];\n         this._minPos = undefined;\n         this._tableRange = undefined;\n    }\n initOffsets() {\n        const timestamps = this._getTimestampsForTable();\n        const table = this._table = this.buildLookupTable(timestamps);\n        this._minPos = interpolate(table, this.min);\n        this._tableRange = interpolate(table, this.max) - this._minPos;\n        super.initOffsets(timestamps);\n    }\n buildLookupTable(timestamps) {\n        const { min , max  } = this;\n        const items = [];\n        const table = [];\n        let i, ilen, prev, curr, next;\n        for(i = 0, ilen = timestamps.length; i < ilen; ++i){\n            curr = timestamps[i];\n            if (curr >= min && curr <= max) {\n                items.push(curr);\n            }\n        }\n        if (items.length < 2) {\n            return [\n                {\n                    time: min,\n                    pos: 0\n                },\n                {\n                    time: max,\n                    pos: 1\n                }\n            ];\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            next = items[i + 1];\n            prev = items[i - 1];\n            curr = items[i];\n            if (Math.round((next + prev) / 2) !== curr) {\n                table.push({\n                    time: curr,\n                    pos: i / (ilen - 1)\n                });\n            }\n        }\n        return table;\n    }\n _generate() {\n        const min = this.min;\n        const max = this.max;\n        let timestamps = super.getDataTimestamps();\n        if (!timestamps.includes(min) || !timestamps.length) {\n            timestamps.splice(0, 0, min);\n        }\n        if (!timestamps.includes(max) || timestamps.length === 1) {\n            timestamps.push(max);\n        }\n        return timestamps.sort((a, b)=>a - b);\n    }\n _getTimestampsForTable() {\n        let timestamps = this._cache.all || [];\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const data = this.getDataTimestamps();\n        const label = this.getLabelTimestamps();\n        if (data.length && label.length) {\n            timestamps = this.normalize(data.concat(label));\n        } else {\n            timestamps = data.length ? data : label;\n        }\n        timestamps = this._cache.all = timestamps;\n        return timestamps;\n    }\n getDecimalForValue(value) {\n        return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n    }\n}\n\nvar scales = /*#__PURE__*/Object.freeze({\n__proto__: null,\nCategoryScale: CategoryScale,\nLinearScale: LinearScale,\nLogarithmicScale: LogarithmicScale,\nRadialLinearScale: RadialLinearScale,\nTimeScale: TimeScale,\nTimeSeriesScale: TimeSeriesScale\n});\n\nconst registerables = [\n    controllers,\n    elements,\n    plugins,\n    scales\n];\n\nexport { Animation, Animations, ArcElement, BarController, BarElement, BasePlatform, BasicPlatform, BubbleController, CategoryScale, Chart, plugin_colors as Colors, DatasetController, plugin_decimation as Decimation, DomPlatform, DoughnutController, Element, index as Filler, Interaction, plugin_legend as Legend, LineController, LineElement, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, Scale, ScatterController, plugin_subtitle as SubTitle, Ticks, TimeScale, TimeSeriesScale, plugin_title as Title, plugin_tooltip as Tooltip, adapters as _adapters, _detectPlatform, animator, controllers, defaults, elements, layouts, plugins, registerables, registry, scales };\n//# sourceMappingURL=chart.js.map\n"],"names":["Animator","constructor","this","_request","_charts","Map","_running","_lastDate","undefined","_notify","chart","anims","date","type","callbacks","listeners","numSteps","duration","forEach","fn","initial","currentStep","Math","min","start","_refresh","r","call","window","_update","Date","now","remaining","running","items","length","item","i","draw","_active","_total","tick","pop","_getAnims","charts","get","complete","progress","set","listen","event","cb","push","add","has","reduce","acc","cur","max","_duration","stop","cancel","remove","delete","animator","transparent","interpolators","boolean","from","to","factor","color","c0","c","c1","valid","mix","hexString","number","Animation","cfg","target","prop","currentValue","_fn","_easing","e","easing","linear","_start","floor","delay","_loop","loop","_target","_prop","_from","_to","_promises","active","update","elapsed","remain","wait","promises","Promise","res","rej","resolved","method","Animations","config","_chart","_properties","configure","animationOptions","Object","keys","d","animation","animatedProps","getOwnPropertyNames","key","option","properties","_animateOptions","values","newOptions","options","$shared","assign","$animations","resolveTargetOptions","animations","_createAnimations","anim","all","awaitAll","then","props","charAt","value","size","scaleClip","scale","allowedOverflow","opts","reverse","end","getSortedDatasetIndices","filterVisible","metasets","_getSortedDatasetMetas","ilen","index","applyStack","stack","dsIndex","singleMode","mode","datasetIndex","otherValue","s","isStacked","meta","stacked","getOrCreateStack","stacks","stackKey","indexValue","subStack","getLastIndexInStack","vScale","positive","getMatchingVisibleMetas","updateStacks","controller","parsed","_cachedMeta","_stacks","iScale","iAxis","axis","vAxis","indexScale","valueScale","id","getStackKey","_top","_bottom","_visualValues","getFirstScaleId","scales","filter","shift","clearStacks","_parsed","isDirectUpdateMode","cloneIfNotShared","cached","shared","DatasetController","static","_ctx","ctx","_cachedDataOpts","getMeta","_type","_parsing","_data","_objectData","_sharedOptions","_drawStart","_drawCount","enableOptionSharing","supportsDecimation","$context","_syncList","datasetElementType","dataElementType","initialize","linkScales","_stacked","addElements","fill","isPluginEnabled","console","warn","updateIndex","dataset","getDataset","chooseId","x","y","xid","xAxisID","v","yid","yAxisID","rid","rAxisID","indexAxis","iid","iAxisID","vid","vAxisID","xScale","getScaleForId","yScale","rScale","data","datasets","getDatasetMeta","scaleID","_getOtherScale","reset","_destroy","u","_dataCheck","adata","Array","convertObjectDataToArray","isExtensible","l","buildOrUpdateElements","resetNewElements","stackChanged","oldStacked","_resyncElements","scopeKeys","datasetScopeKeys","scopes","getOptionScopes","createResolver","getContext","parsing","parse","count","sorted","_sorted","prev","parseArrayData","parseObjectData","parsePrimitiveData","isNotInOrderComparedToPrev","labels","getLabels","singleScale","xAxisKey","yAxisKey","getParsed","getDataElement","updateRangeFromParsed","range","parsedValue","NaN","getMinMax","canStack","otherScale","hidden","createStack","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","otherMin","otherMax","minDefined","maxDefined","getUserBounds","_skip","getAllParsedValues","getMaxOverflow","getLabelAndValue","label","getLabelForValue","_clip","t","b","top","right","bottom","left","disabled","toClip","clip","defaultClip","elements","area","chartArea","drawActiveElementsOnTop","element","getStyle","resolveDatasetElementOptions","resolveDataElementOptions","context","parent","dataIndex","raw","createDataContext","createDatasetContext","_resolveElementOptions","elementType","cache","cacheKey","sharing","datasetElementScopeKeys","prefixes","names","resolveNamedOptions","freeze","_resolveAnimations","transition","datasetAnimationScopeKeys","_cacheable","getSharedOptions","includeOptions","sharedOptions","_animationsDisabled","_getSharedOptions","firstOpts","previouslySharedOptions","updateSharedOptions","updateElement","_setStyle","removeHoverStyle","setHoverStyle","_removeDatasetHoverStyle","_setDatasetHoverStyle","arg1","arg2","numMeta","numData","_insertElements","_removeElements","move","arr","updateElements","removed","splice","_sync","args","_dataChanges","_onDataPush","arguments","_onDataPop","_onDataShift","_onDataSplice","newCount","_onDataUnshift","RadarController","showLine","line","aspectRatio","bind","points","borderWidth","_fullLoop","point","pointPosition","getPointPositionForValue","xCenter","yCenter","angle","skip","isNaN","binarySearch","metaset","intersect","lookupMethod","_reversePixels","el","getRange","lo","hi","evaluateInteractionItems","position","handler","getSortedVisibleDatasetMetas","j","getIntersectItems","useFinalPosition","includeInvisible","isPointInArea","inRange","getNearestCartesianItems","distanceMetric","useX","indexOf","useY","pt1","pt2","deltaX","abs","deltaY","sqrt","pow","getDistanceMetricForAxis","minDistance","center","getCenterPoint","distance","getNearestItems","startAngle","endAngle","getProps","getNearestRadialItems","getAxisItems","rangeMethod","intersectsItem","Interaction","modes","nearest","STATIC_POSITIONS","filterByPosition","array","pos","filterDynamicPositionByAxis","box","sortByWeight","sort","a","v0","v1","weight","setLayoutDims","layouts","params","wrap","stackWeight","includes","_stack","placed","buildStacks","vBoxMaxWidth","hBoxMaxHeight","layout","fullSize","horizontal","width","availableWidth","height","availableHeight","getCombinedMax","maxPadding","updateMaxPadding","boxPadding","updateDims","getPadding","newWidth","outerWidth","newHeight","outerHeight","widthChanged","w","heightChanged","h","same","other","getMargins","marginForPositions","positions","margin","fitBoxes","boxes","refitBoxes","refit","changed","setBoxDims","placeBoxes","userPadding","padding","addBox","_layers","z","removeBox","layoutItem","minPadding","layoutBoxes","isHorizontal","wrapBoxes","centerHorizontal","centerVertical","leftAndTop","concat","rightAndBottom","vertical","buildLayoutBoxes","verticalBoxes","horizontalBoxes","beforeLayout","visibleVerticalBoxCount","total","display","updatePos","change","handleMaxPadding","BasePlatform","acquireContext","canvas","releaseContext","addEventListener","listener","removeEventListener","getDevicePixelRatio","getMaximumSize","isAttached","updateConfig","BasicPlatform","EXPANDO_KEY","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","isNullOrEmpty","eventListenerOptions","passive","removeListener","nodeListContains","nodeList","node","contains","createAttachObserver","observer","MutationObserver","entries","trigger","entry","addedNodes","removedNodes","observe","document","childList","subtree","createDetachObserver","drpListeningCharts","oldDevicePixelRatio","onWindowResize","dpr","devicePixelRatio","resize","currentDevicePixelRatio","createResizeObserver","container","clientWidth","ResizeObserver","contentRect","listenDevicePixelRatioChanges","releaseObserver","disconnect","unlistenDevicePixelRatioChanges","createProxyAndListen","proxy","native","fromNativeEvent","addListener","DomPlatform","style","renderHeight","getAttribute","renderWidth","boxSizing","displayWidth","displayHeight","initCanvas","removeAttribute","setAttribute","proxies","$proxies","attach","detach","isConnected","Element","tooltipPosition","hasValue","final","ret","autoSkip","ticks","tickOpts","determinedMaxTicks","offset","tickLength","_tickSize","maxScale","_length","maxChart","_maxLength","determineMaxTicks","ticksLimit","maxTicksLimit","majorIndices","major","enabled","result","getMajorIndices","numMajorIndices","first","last","newTicks","spacing","next","ceil","skipMajors","evenMajorSpacing","len","diff","getEvenSpacing","factors","calculateSpacing","avgMajorSpacing","round","majorStart","majorEnd","offsetFromEdge","edge","getTicksLimit","ticksLength","sample","numItems","increment","getPixelForGridLine","offsetGridLines","validIndex","_startPixel","_endPixel","epsilon","lineValue","getPixelForTick","getTickMarkLength","drawTicks","getTitleHeight","fallback","font","text","lineHeight","titleAlign","align","reverseAlign","Scale","super","_margins","maxWidth","maxHeight","paddingTop","paddingBottom","paddingLeft","paddingRight","labelRotation","_range","_gridLineItems","_labelItems","_labelSizes","_longestTextCache","_userMax","_userMin","_suggestedMax","_suggestedMin","_ticksLength","_borderValue","_cache","_dataLimitsCached","init","setContext","suggestedMin","suggestedMax","metas","getTicks","xLabels","yLabels","getLabelItems","_computeLabelItems","beforeUpdate","margins","beginAtZero","grace","sampleSize","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","beforeBuildTicks","buildTicks","afterBuildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","source","afterAutoSkip","beforeFit","fit","afterFit","afterUpdate","startPixel","endPixel","reversePixels","_alignToPixels","alignToPixels","_callHooks","name","notifyPlugins","beforeTickToLabelConversion","generateTickLabels","callback","afterTickToLabelConversion","numTicks","minRotation","maxRotation","tickWidth","maxLabelDiagonal","_isVisible","labelSizes","_getLabelSizes","maxLabelWidth","widest","maxLabelHeight","highest","grid","title","asin","minSize","titleOpts","gridOpts","titleHeight","tickPadding","angleRadians","cos","sin","labelHeight","mirror","labelWidth","_calculatePadding","_handleMargins","isRotated","labelsBelowTicks","offsetLeft","offsetRight","isFullSize","_computeLabelSizes","caches","widths","heights","jlen","tickFont","fontString","nestedLabel","widestLabelSize","highestLabelSize","_resolveTickFontOptions","string","gc","gcLen","garbageCollect","valueAt","idx","getPixelForValue","getValueForPixel","pixel","getPixelForDecimal","decimal","getDecimalForPixel","getBasePixel","getBaseValue","createTickContext","optionTicks","rot","autoSkipPadding","_computeGridLineItems","border","tl","borderOpts","axisWidth","axisHalfWidth","alignBorderValue","borderValue","alignedLineValue","tx1","ty1","tx2","ty2","x1","y1","x2","y2","positionAxisID","limit","step","optsAtIndex","optsAtIndexBorder","lineWidth","lineColor","borderDash","dash","borderDashOffset","dashOffset","tickColor","tickBorderDash","tickBorderDashOffset","crossAlign","tickAndPadding","hTickAndPadding","rotation","textAlign","lineCount","textOffset","textBaseline","_getXAxisLabelAlignment","_getYAxisLabelAlignment","labelOffset","halfCount","strokeColor","textStrokeColor","strokeWidth","textStrokeWidth","backdrop","tickTextAlign","showLabelBackdrop","labelPadding","backdropPadding","backdropColor","translation","_computeLabelArea","drawBackground","backgroundColor","save","fillStyle","fillRect","restore","getLineWidthForValue","findIndex","drawGrid","drawLine","p1","p2","strokeStyle","setLineDash","lineDashOffset","beginPath","moveTo","lineTo","stroke","drawOnChartArea","drawBorder","lastLineWidth","drawLabels","renderTextOptions","drawTitle","titleX","titleY","H","titleArgs","tz","gz","bz","prototype","axisID","_maxDigits","fontSize","TypedRegistry","scope","override","create","isForType","isPrototypeOf","register","proto","getPrototypeOf","parentScope","isIChartComponent","Error","itemDefaults","defaults","defaultRoutes","routes","property","propertyParts","split","sourceName","sourceScope","join","parts","targetName","targetScope","route","routeDefaults","descriptors","describe","registerDefaults","overrides","unregister","Registry","controllers","plugins","_typedRegistries","_each","addControllers","addPlugins","addScales","getController","_get","getElement","getPlugin","getScale","removeControllers","removeElements","removePlugins","removeScales","typedRegistry","arg","reg","_getRegistryForType","_exec","itemReg","registry","component","camelMethod","PluginService","_init","notify","hook","_createDescriptors","_descriptors","descriptor","plugin","cancelable","invalidate","_oldCache","_notifyStateChanges","localIds","local","allPlugins","getOpts","pluginOpts","createDescriptors","previousDescriptors","some","pluginScopeKeys","scriptable","indexable","allKeys","getIndexAxis","datasetDefaults","idMatchesAxis","determineAxis","scaleOptions","toLowerCase","getAxisFromDataset","mergeScaleConfig","chartDefaults","configScales","chartIndexAxis","scaleConf","error","_proxy","boundDs","retrieveAxisFromDatasets","defaultId","getDefaultScaleIDFromAxis","defaultScaleOptions","defaultID","getAxisFromDefaultScaleID","initOptions","initData","keyCache","keysCached","Set","cachedKeys","generate","addIfFound","obj","Config","_config","initConfig","_scopeCache","_resolverCache","platform","clearCache","clear","datasetType","additionalOptionScopes","_cachedScopes","mainScope","resetCache","keyLists","chartOptionScopes","resolver","subPrefixes","getResolver","isScriptable","isIndexable","hasFunction","needContext","subResolver","descriptorDefaults","resolverCache","p","KNOWN_POSITIONS","positionIsHorizontal","compare2Level","l1","l2","onAnimationsComplete","onComplete","onAnimationProgress","onProgress","getCanvas","getElementById","instances","getChart","moveNumericKeys","intKey","getSizeForArea","field","Chart","invalidatePlugins","userConfig","initialCanvas","existingChart","OffscreenCanvas","_detectPlatform","_options","_aspectRatio","_metasets","_lastEvent","_listeners","_responsiveListeners","_sortedMetasets","_plugins","_hiddenIndices","attached","_doResize","resizeDelay","_initialize","maintainAspectRatio","responsive","bindEvents","_resizeBeforeDraw","_resize","newSize","newRatio","onResize","render","ensureScalesHaveIDs","scalesOptions","axisOptions","buildOrUpdateScales","scaleOpts","updated","map","isRadial","dposition","dtype","scaleType","hasUpdated","_updateMetasets","_destroyDatasetMeta","slice","_removeUnreferencedMetasets","_dataset","buildOrUpdateControllers","newControllers","order","visible","isDatasetVisible","ControllerClass","_resetElements","animsDisabled","_updateScales","_checkEventBindings","_updateHiddenIndices","_minPadding","autoPadding","_updateLayout","_updateDatasets","_eventHandler","_updateHoverStyles","existingEvents","newEvents","events","unbindEvents","changes","_getUniformDataChanges","datasetCount","makeSet","changeSet","noArea","_idx","_updateDataset","layers","_drawDatasets","_drawDataset","useClip","getDatasetArea","getElementsAtEventForMode","getVisibleDatasetCount","setDatasetVisibility","toggleDataVisibility","getDataVisibility","_updateVisibility","hide","show","_stop","destroy","toBase64Image","toDataURL","bindUserEvents","bindResponsiveEvents","_add","offsetX","offsetY","_remove","detached","updateHoverStyle","prefix","getActiveElements","setActiveElements","activeElements","lastActive","pluginId","replay","hoverOptions","hover","deactivated","activated","inChartArea","eventFilter","_handleEvent","_getActiveElements","isClick","lastEvent","determineLastEvent","onHover","onClick","setStyle","lineCap","borderCapStyle","lineJoin","borderJoinStyle","borderColor","previous","pathVars","segment","paramsStart","paramsEnd","segmentStart","segmentEnd","outside","pathSegment","lineMethod","stepped","tension","cubicInterpolationMode","getLineMethod","fastPathSegment","prevX","minY","maxY","lastY","avgX","countX","pointIndex","drawX","truncX","_getSegmentMethod","_decimated","usePath2D","Path2D","path","_path","closePath","strokePathWithCache","segments","segmentMethod","strokePathDirect","LineElement","capBezierPoints","spanGaps","_scriptable","_indexable","animated","_points","_segments","_pointsUpdated","_datasetIndex","updateControlPoints","interpolate","_interpolate","_getInterpolationMethod","interpolated","inRange$1","radius","hitRadius","PointElement","hoverBorderWidth","hoverRadius","pointStyle","mouseX","mouseY","inXRange","inYRange","_getBounds","_findSegmentEnd","_getEdge","_createBoundaryLine","boundary","linePoints","_pointsFromSegments","_shouldApplyFill","_resolveTarget","sources","propagate","visited","_decodeFill","fillOption","parseFillOption","parseFloat","firstCh","decodeTargetIndex","addPointsBelow","sourcePoint","linesBelow","postponed","findPoint","unshift","pointValue","firstValue","lastValue","simpleArc","bounds","T","arc","_getTarget","getLineByIndex","sourcePoints","below","getLinesBelow","_buildStackLine","startValue","_getTargetValue","circular","getDistanceFromCenterForValue","computeCircularBoundary","_getTargetPixel","computeLinearBoundary","computeBoundary","_drawfill","lineOpts","above","clipVertical","doFill","clipY","lineLoop","firstPoint","lastPoint","tpoints","targetSegments","tgt","subBounds","fillSources","fillSource","src","notShape","clipBounds","interpolatedLineTo","targetLoop","rect","interpolatedPoint","afterDatasetsUpdate","_args","$filler","beforeDraw","drawTime","beforeDatasetsDraw","beforeDatasetDraw","getBoxSize","labelOpts","boxHeight","boxWidth","usePointStyle","pointStyleWidth","itemHeight","Legend","_added","legendHitBoxes","_hoveredItem","doughnutMode","legendItems","columnSizes","lineWidths","buildLabels","generateLabels","labelFont","_computeTitleHeight","_fitRows","_fitCols","hitboxes","totalHeight","row","legendItem","itemWidth","measureText","_itemHeight","heightLimit","totalWidth","currentColWidth","currentColHeight","col","legendItemText","calculateItemWidth","fontLineHeight","calculateLegendItemHeight","calculateItemHeight","calculateItemSize","adjustHitBoxes","rtl","rtlHelper","hitbox","leftForLtr","_draw","defaultColor","halfFontSize","cursor","textDirection","fontColor","textWidth","setWidth","lineDash","drawOptions","SQRT2","centerX","xPlus","centerY","yBoxTop","xBoxLeft","borderRadius","drawLegendBox","strikethrough","fillText","titleFont","titlePadding","topPaddingPlusHalfFontSize","_getLegendItemAt","hitBox","lh","handleEvent","onLeave","isListened","hoveredItem","sameItem","plugin_legend","_element","legend","afterEvent","ci","useBorderRadius","startsWith","WeakMap","positioners","average","xSet","eventPosition","nearestElement","tp","pushOrConcat","base","toPush","apply","splitNewlines","str","String","createTooltipItem","formattedValue","getTooltipSize","tooltip","body","footer","bodyFont","footerFont","titleLineCount","footerLineCount","bodyLineItemCount","combinedBodyLength","bodyItem","before","lines","after","beforeBody","afterBody","titleSpacing","titleMarginBottom","displayColors","bodySpacing","footerMarginTop","footerSpacing","widthPadding","maxLineWidth","determineXAlign","yAlign","chartWidth","xAlign","caret","caretSize","caretPadding","doesNotFitWithAlign","determineAlignment","determineYAlign","getBackgroundPoint","alignment","cornerRadius","paddingAndSize","topLeft","topRight","bottomLeft","bottomRight","alignX","alignY","getAlignedX","getBeforeAfterBodyLines","overrideCallbacks","defaultCallbacks","beforeTitle","tooltipItems","labelCount","afterTitle","beforeLabel","tooltipItem","labelColor","labelTextColor","bodyColor","labelPointStyle","afterLabel","beforeFooter","afterFooter","invokeCallbackWithFallback","Tooltip","opacity","_eventPosition","_size","_cachedAnimations","_tooltipItems","dataPoints","caretX","caretY","labelColors","labelPointStyles","labelTextColors","getTitle","getBeforeBody","getBody","bodyItems","scoped","getAfterBody","getFooter","_createItems","itemSort","positionAndSize","backgroundPoint","external","drawCaret","tooltipPoint","caretPosition","getCaretPosition","x3","y3","ptX","ptY","pt","titleColor","_drawColorBox","colorX","rtlColorX","yOffSet","colorY","multiKeyBackground","outerX","innerX","strokeRect","drawBody","bodyAlign","bodyLineHeight","xLinePadding","fillLineOfText","bodyAlignForCalculation","textColor","drawFooter","footerAlign","footerColor","tooltipSize","quadraticCurveTo","_updateAnimationTarget","animX","animY","_willRender","hasTooltipContent","globalAlpha","positionChanged","_positionChanged","_ignoreReplayEvents","plugin_tooltip","afterInit","afterDraw","numbers","_fallback","relativeLabelSize","minSpacing","rad","ratio","LinearScaleBase","_startValue","_endValue","_valueRange","isFinite","handleTickRangeOptions","setMin","setMax","minSign","maxSign","getTickLimit","maxTicks","stepSize","computeTickLimit","generationOptions","dataRange","precision","maxDigits","includeBounds","unit","maxSpaces","rmin","rmax","countDefined","niceMin","niceMax","numSpaces","decimalPlaces","tickValue","generateTicks$1","locale","format","formatters","numeric","logarithmic","getTickBackdropHeight","determineLimits","fitWithPointLabels","orig","_padding","limits","valueCount","_pointLabels","pointLabelOpts","pointLabels","additionalAngle","centerPointLabels","P","getPointLabelContext","getPointPosition","drawingArea","plFont","textSize","getIndexAngle","updateLimits","setCenterPoint","_pointLabelItems","itemOpts","extra","createPointLabelItem","isNotOverlapped","buildPointLabelItems","hLimits","vLimits","outerDistance","pointLabelPosition","yForAngle","getTextAlignForAngle","leftForTextAlign","drawPointLabelBox","backdropLeft","backdropTop","backdropWidth","backdropHeight","pathRadiusLine","RadialLinearScale","animate","angleLines","leftMovement","rightMovement","topMovement","bottomMovement","angleMultiplier","scalingFactor","getValueForDistanceFromCenter","scaledDistance","pointLabel","createPointLabelContext","distanceFromCenter","getBasePosition","getPointLabelPosition","drawPointLabels","gridLineOpts","drawRadiusLine","translate","rotate"],"sourceRoot":""}